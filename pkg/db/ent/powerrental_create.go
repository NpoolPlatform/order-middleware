// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PowerRentalCreate is the builder for creating a PowerRental entity.
type PowerRentalCreate struct {
	config
	mutation *PowerRentalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (prc *PowerRentalCreate) SetCreatedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetCreatedAt(u)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableCreatedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetCreatedAt(*u)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PowerRentalCreate) SetUpdatedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetUpdatedAt(u)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableUpdatedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetUpdatedAt(*u)
	}
	return prc
}

// SetDeletedAt sets the "deleted_at" field.
func (prc *PowerRentalCreate) SetDeletedAt(u uint32) *PowerRentalCreate {
	prc.mutation.SetDeletedAt(u)
	return prc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDeletedAt(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetDeletedAt(*u)
	}
	return prc
}

// SetEntID sets the "ent_id" field.
func (prc *PowerRentalCreate) SetEntID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetEntID(u)
	return prc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableEntID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetEntID(*u)
	}
	return prc
}

// SetOrderID sets the "order_id" field.
func (prc *PowerRentalCreate) SetOrderID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetOrderID(u)
	return prc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableOrderID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetOrderID(*u)
	}
	return prc
}

// SetUnits sets the "units" field.
func (prc *PowerRentalCreate) SetUnits(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetUnits(d)
	return prc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableUnits(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetUnits(*d)
	}
	return prc
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (prc *PowerRentalCreate) SetGoodValueUsd(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetGoodValueUsd(d)
	return prc
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableGoodValueUsd(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetGoodValueUsd(*d)
	}
	return prc
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (prc *PowerRentalCreate) SetPaymentAmountUsd(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetPaymentAmountUsd(d)
	return prc
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetPaymentAmountUsd(*d)
	}
	return prc
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (prc *PowerRentalCreate) SetDiscountAmountUsd(d decimal.Decimal) *PowerRentalCreate {
	prc.mutation.SetDiscountAmountUsd(d)
	return prc
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDiscountAmountUsd(d *decimal.Decimal) *PowerRentalCreate {
	if d != nil {
		prc.SetDiscountAmountUsd(*d)
	}
	return prc
}

// SetPromotionID sets the "promotion_id" field.
func (prc *PowerRentalCreate) SetPromotionID(u uuid.UUID) *PowerRentalCreate {
	prc.mutation.SetPromotionID(u)
	return prc
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillablePromotionID(u *uuid.UUID) *PowerRentalCreate {
	if u != nil {
		prc.SetPromotionID(*u)
	}
	return prc
}

// SetDuration sets the "duration" field.
func (prc *PowerRentalCreate) SetDuration(u uint32) *PowerRentalCreate {
	prc.mutation.SetDuration(u)
	return prc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableDuration(u *uint32) *PowerRentalCreate {
	if u != nil {
		prc.SetDuration(*u)
	}
	return prc
}

// SetInvestmentType sets the "investment_type" field.
func (prc *PowerRentalCreate) SetInvestmentType(s string) *PowerRentalCreate {
	prc.mutation.SetInvestmentType(s)
	return prc
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (prc *PowerRentalCreate) SetNillableInvestmentType(s *string) *PowerRentalCreate {
	if s != nil {
		prc.SetInvestmentType(*s)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *PowerRentalCreate) SetID(u uint32) *PowerRentalCreate {
	prc.mutation.SetID(u)
	return prc
}

// Mutation returns the PowerRentalMutation object of the builder.
func (prc *PowerRentalCreate) Mutation() *PowerRentalMutation {
	return prc.mutation
}

// Save creates the PowerRental in the database.
func (prc *PowerRentalCreate) Save(ctx context.Context) (*PowerRental, error) {
	var (
		err  error
		node *PowerRental
	)
	if err := prc.defaults(); err != nil {
		return nil, err
	}
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			if node, err = prc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			if prc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PowerRental)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PowerRentalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PowerRentalCreate) SaveX(ctx context.Context) *PowerRental {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PowerRentalCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PowerRentalCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PowerRentalCreate) defaults() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		if powerrental.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		if powerrental.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
	if _, ok := prc.mutation.DeletedAt(); !ok {
		if powerrental.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultDeletedAt()
		prc.mutation.SetDeletedAt(v)
	}
	if _, ok := prc.mutation.EntID(); !ok {
		if powerrental.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultEntID()
		prc.mutation.SetEntID(v)
	}
	if _, ok := prc.mutation.OrderID(); !ok {
		if powerrental.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultOrderID()
		prc.mutation.SetOrderID(v)
	}
	if _, ok := prc.mutation.Units(); !ok {
		v := powerrental.DefaultUnits
		prc.mutation.SetUnits(v)
	}
	if _, ok := prc.mutation.GoodValueUsd(); !ok {
		v := powerrental.DefaultGoodValueUsd
		prc.mutation.SetGoodValueUsd(v)
	}
	if _, ok := prc.mutation.PaymentAmountUsd(); !ok {
		v := powerrental.DefaultPaymentAmountUsd
		prc.mutation.SetPaymentAmountUsd(v)
	}
	if _, ok := prc.mutation.DiscountAmountUsd(); !ok {
		v := powerrental.DefaultDiscountAmountUsd
		prc.mutation.SetDiscountAmountUsd(v)
	}
	if _, ok := prc.mutation.PromotionID(); !ok {
		if powerrental.DefaultPromotionID == nil {
			return fmt.Errorf("ent: uninitialized powerrental.DefaultPromotionID (forgotten import ent/runtime?)")
		}
		v := powerrental.DefaultPromotionID()
		prc.mutation.SetPromotionID(v)
	}
	if _, ok := prc.mutation.Duration(); !ok {
		v := powerrental.DefaultDuration
		prc.mutation.SetDuration(v)
	}
	if _, ok := prc.mutation.InvestmentType(); !ok {
		v := powerrental.DefaultInvestmentType
		prc.mutation.SetInvestmentType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prc *PowerRentalCreate) check() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PowerRental.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PowerRental.updated_at"`)}
	}
	if _, ok := prc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PowerRental.deleted_at"`)}
	}
	if _, ok := prc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "PowerRental.ent_id"`)}
	}
	return nil
}

func (prc *PowerRentalCreate) sqlSave(ctx context.Context) (*PowerRental, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (prc *PowerRentalCreate) createSpec() (*PowerRental, *sqlgraph.CreateSpec) {
	var (
		_node = &PowerRental{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: powerrental.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrental.FieldID,
			},
		}
	)
	_spec.OnConflict = prc.conflict
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := prc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := prc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := prc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := prc.mutation.GoodValueUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldGoodValueUsd,
		})
		_node.GoodValueUsd = value
	}
	if value, ok := prc.mutation.PaymentAmountUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldPaymentAmountUsd,
		})
		_node.PaymentAmountUsd = value
	}
	if value, ok := prc.mutation.DiscountAmountUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldDiscountAmountUsd,
		})
		_node.DiscountAmountUsd = value
	}
	if value, ok := prc.mutation.PromotionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldPromotionID,
		})
		_node.PromotionID = value
	}
	if value, ok := prc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := prc.mutation.InvestmentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrental.FieldInvestmentType,
		})
		_node.InvestmentType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRental.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prc *PowerRentalCreate) OnConflict(opts ...sql.ConflictOption) *PowerRentalUpsertOne {
	prc.conflict = opts
	return &PowerRentalUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prc *PowerRentalCreate) OnConflictColumns(columns ...string) *PowerRentalUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalUpsertOne{
		create: prc,
	}
}

type (
	// PowerRentalUpsertOne is the builder for "upsert"-ing
	//  one PowerRental node.
	PowerRentalUpsertOne struct {
		create *PowerRentalCreate
	}

	// PowerRentalUpsert is the "OnConflict" setter.
	PowerRentalUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsert) SetCreatedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateCreatedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsert) AddCreatedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsert) SetUpdatedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateUpdatedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsert) AddUpdatedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsert) SetDeletedAt(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDeletedAt() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsert) AddDeletedAt(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsert) SetEntID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateEntID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalUpsert) SetOrderID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateOrderID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalUpsert) ClearOrderID() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldOrderID)
	return u
}

// SetUnits sets the "units" field.
func (u *PowerRentalUpsert) SetUnits(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateUnits() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldUnits)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *PowerRentalUpsert) ClearUnits() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldUnits)
	return u
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *PowerRentalUpsert) SetGoodValueUsd(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldGoodValueUsd, v)
	return u
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateGoodValueUsd() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldGoodValueUsd)
	return u
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *PowerRentalUpsert) ClearGoodValueUsd() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldGoodValueUsd)
	return u
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *PowerRentalUpsert) SetPaymentAmountUsd(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldPaymentAmountUsd, v)
	return u
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdatePaymentAmountUsd() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldPaymentAmountUsd)
	return u
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *PowerRentalUpsert) ClearPaymentAmountUsd() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldPaymentAmountUsd)
	return u
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *PowerRentalUpsert) SetDiscountAmountUsd(v decimal.Decimal) *PowerRentalUpsert {
	u.Set(powerrental.FieldDiscountAmountUsd, v)
	return u
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDiscountAmountUsd() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDiscountAmountUsd)
	return u
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *PowerRentalUpsert) ClearDiscountAmountUsd() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldDiscountAmountUsd)
	return u
}

// SetPromotionID sets the "promotion_id" field.
func (u *PowerRentalUpsert) SetPromotionID(v uuid.UUID) *PowerRentalUpsert {
	u.Set(powerrental.FieldPromotionID, v)
	return u
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdatePromotionID() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldPromotionID)
	return u
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *PowerRentalUpsert) ClearPromotionID() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldPromotionID)
	return u
}

// SetDuration sets the "duration" field.
func (u *PowerRentalUpsert) SetDuration(v uint32) *PowerRentalUpsert {
	u.Set(powerrental.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateDuration() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *PowerRentalUpsert) AddDuration(v uint32) *PowerRentalUpsert {
	u.Add(powerrental.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *PowerRentalUpsert) ClearDuration() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldDuration)
	return u
}

// SetInvestmentType sets the "investment_type" field.
func (u *PowerRentalUpsert) SetInvestmentType(v string) *PowerRentalUpsert {
	u.Set(powerrental.FieldInvestmentType, v)
	return u
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *PowerRentalUpsert) UpdateInvestmentType() *PowerRentalUpsert {
	u.SetExcluded(powerrental.FieldInvestmentType)
	return u
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *PowerRentalUpsert) ClearInvestmentType() *PowerRentalUpsert {
	u.SetNull(powerrental.FieldInvestmentType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PowerRentalUpsertOne) UpdateNewValues() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(powerrental.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PowerRental.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PowerRentalUpsertOne) Ignore() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalUpsertOne) DoNothing() *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalCreate.OnConflict
// documentation for more info.
func (u *PowerRentalUpsertOne) Update(set func(*PowerRentalUpsert)) *PowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsertOne) SetCreatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsertOne) AddCreatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateCreatedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsertOne) SetUpdatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsertOne) AddUpdatedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateUpdatedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsertOne) SetDeletedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsertOne) AddDeletedAt(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDeletedAt() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsertOne) SetEntID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateEntID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalUpsertOne) SetOrderID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateOrderID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalUpsertOne) ClearOrderID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearOrderID()
	})
}

// SetUnits sets the "units" field.
func (u *PowerRentalUpsertOne) SetUnits(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateUnits() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *PowerRentalUpsertOne) ClearUnits() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnits()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *PowerRentalUpsertOne) SetGoodValueUsd(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateGoodValueUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *PowerRentalUpsertOne) ClearGoodValueUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *PowerRentalUpsertOne) SetPaymentAmountUsd(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdatePaymentAmountUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *PowerRentalUpsertOne) ClearPaymentAmountUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *PowerRentalUpsertOne) SetDiscountAmountUsd(v decimal.Decimal) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDiscountAmountUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *PowerRentalUpsertOne) ClearDiscountAmountUsd() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *PowerRentalUpsertOne) SetPromotionID(v uuid.UUID) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdatePromotionID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *PowerRentalUpsertOne) ClearPromotionID() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearPromotionID()
	})
}

// SetDuration sets the "duration" field.
func (u *PowerRentalUpsertOne) SetDuration(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *PowerRentalUpsertOne) AddDuration(v uint32) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateDuration() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *PowerRentalUpsertOne) ClearDuration() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDuration()
	})
}

// SetInvestmentType sets the "investment_type" field.
func (u *PowerRentalUpsertOne) SetInvestmentType(v string) *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetInvestmentType(v)
	})
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *PowerRentalUpsertOne) UpdateInvestmentType() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateInvestmentType()
	})
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *PowerRentalUpsertOne) ClearInvestmentType() *PowerRentalUpsertOne {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearInvestmentType()
	})
}

// Exec executes the query.
func (u *PowerRentalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PowerRentalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PowerRentalUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PowerRentalUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PowerRentalCreateBulk is the builder for creating many PowerRental entities in bulk.
type PowerRentalCreateBulk struct {
	config
	builders []*PowerRentalCreate
	conflict []sql.ConflictOption
}

// Save creates the PowerRental entities in the database.
func (prcb *PowerRentalCreateBulk) Save(ctx context.Context) ([]*PowerRental, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PowerRental, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PowerRentalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PowerRentalCreateBulk) SaveX(ctx context.Context) []*PowerRental {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PowerRentalCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PowerRentalCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRental.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prcb *PowerRentalCreateBulk) OnConflict(opts ...sql.ConflictOption) *PowerRentalUpsertBulk {
	prcb.conflict = opts
	return &PowerRentalUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prcb *PowerRentalCreateBulk) OnConflictColumns(columns ...string) *PowerRentalUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalUpsertBulk{
		create: prcb,
	}
}

// PowerRentalUpsertBulk is the builder for "upsert"-ing
// a bulk of PowerRental nodes.
type PowerRentalUpsertBulk struct {
	create *PowerRentalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PowerRentalUpsertBulk) UpdateNewValues() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(powerrental.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PowerRental.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PowerRentalUpsertBulk) Ignore() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalUpsertBulk) DoNothing() *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalCreateBulk.OnConflict
// documentation for more info.
func (u *PowerRentalUpsertBulk) Update(set func(*PowerRentalUpsert)) *PowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalUpsertBulk) SetCreatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalUpsertBulk) AddCreatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateCreatedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalUpsertBulk) SetUpdatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalUpsertBulk) AddUpdatedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateUpdatedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalUpsertBulk) SetDeletedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalUpsertBulk) AddDeletedAt(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDeletedAt() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalUpsertBulk) SetEntID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateEntID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalUpsertBulk) SetOrderID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateOrderID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalUpsertBulk) ClearOrderID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearOrderID()
	})
}

// SetUnits sets the "units" field.
func (u *PowerRentalUpsertBulk) SetUnits(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateUnits() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *PowerRentalUpsertBulk) ClearUnits() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearUnits()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *PowerRentalUpsertBulk) SetGoodValueUsd(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateGoodValueUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *PowerRentalUpsertBulk) ClearGoodValueUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *PowerRentalUpsertBulk) SetPaymentAmountUsd(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdatePaymentAmountUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *PowerRentalUpsertBulk) ClearPaymentAmountUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *PowerRentalUpsertBulk) SetDiscountAmountUsd(v decimal.Decimal) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDiscountAmountUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *PowerRentalUpsertBulk) ClearDiscountAmountUsd() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *PowerRentalUpsertBulk) SetPromotionID(v uuid.UUID) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdatePromotionID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *PowerRentalUpsertBulk) ClearPromotionID() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearPromotionID()
	})
}

// SetDuration sets the "duration" field.
func (u *PowerRentalUpsertBulk) SetDuration(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *PowerRentalUpsertBulk) AddDuration(v uint32) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateDuration() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *PowerRentalUpsertBulk) ClearDuration() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearDuration()
	})
}

// SetInvestmentType sets the "investment_type" field.
func (u *PowerRentalUpsertBulk) SetInvestmentType(v string) *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.SetInvestmentType(v)
	})
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *PowerRentalUpsertBulk) UpdateInvestmentType() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.UpdateInvestmentType()
	})
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *PowerRentalUpsertBulk) ClearInvestmentType() *PowerRentalUpsertBulk {
	return u.Update(func(s *PowerRentalUpsert) {
		s.ClearInvestmentType()
	})
}

// Exec executes the query.
func (u *PowerRentalUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PowerRentalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PowerRentalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
