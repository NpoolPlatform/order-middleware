// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstatebase"
	"github.com/google/uuid"
)

// OrderStateBase is the model entity for the OrderStateBase schema.
type OrderStateBase struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// OrderState holds the value of the "order_state" field.
	OrderState string `json:"order_state,omitempty"`
	// StartMode holds the value of the "start_mode" field.
	StartMode string `json:"start_mode,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// LastBenefitAt holds the value of the "last_benefit_at" field.
	LastBenefitAt uint32 `json:"last_benefit_at,omitempty"`
	// BenefitState holds the value of the "benefit_state" field.
	BenefitState string `json:"benefit_state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderStateBase) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderstatebase.FieldID, orderstatebase.FieldCreatedAt, orderstatebase.FieldUpdatedAt, orderstatebase.FieldDeletedAt, orderstatebase.FieldStartAt, orderstatebase.FieldLastBenefitAt:
			values[i] = new(sql.NullInt64)
		case orderstatebase.FieldOrderState, orderstatebase.FieldStartMode, orderstatebase.FieldBenefitState:
			values[i] = new(sql.NullString)
		case orderstatebase.FieldEntID, orderstatebase.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderStateBase", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderStateBase fields.
func (osb *OrderStateBase) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderstatebase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			osb.ID = uint32(value.Int64)
		case orderstatebase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				osb.CreatedAt = uint32(value.Int64)
			}
		case orderstatebase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				osb.UpdatedAt = uint32(value.Int64)
			}
		case orderstatebase.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				osb.DeletedAt = uint32(value.Int64)
			}
		case orderstatebase.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				osb.EntID = *value
			}
		case orderstatebase.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				osb.OrderID = *value
			}
		case orderstatebase.FieldOrderState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_state", values[i])
			} else if value.Valid {
				osb.OrderState = value.String
			}
		case orderstatebase.FieldStartMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_mode", values[i])
			} else if value.Valid {
				osb.StartMode = value.String
			}
		case orderstatebase.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				osb.StartAt = uint32(value.Int64)
			}
		case orderstatebase.FieldLastBenefitAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_benefit_at", values[i])
			} else if value.Valid {
				osb.LastBenefitAt = uint32(value.Int64)
			}
		case orderstatebase.FieldBenefitState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_state", values[i])
			} else if value.Valid {
				osb.BenefitState = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderStateBase.
// Note that you need to call OrderStateBase.Unwrap() before calling this method if this OrderStateBase
// was returned from a transaction, and the transaction was committed or rolled back.
func (osb *OrderStateBase) Update() *OrderStateBaseUpdateOne {
	return (&OrderStateBaseClient{config: osb.config}).UpdateOne(osb)
}

// Unwrap unwraps the OrderStateBase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (osb *OrderStateBase) Unwrap() *OrderStateBase {
	_tx, ok := osb.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderStateBase is not a transactional entity")
	}
	osb.config.driver = _tx.drv
	return osb
}

// String implements the fmt.Stringer.
func (osb *OrderStateBase) String() string {
	var builder strings.Builder
	builder.WriteString("OrderStateBase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", osb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", osb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", osb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", osb.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", osb.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", osb.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_state=")
	builder.WriteString(osb.OrderState)
	builder.WriteString(", ")
	builder.WriteString("start_mode=")
	builder.WriteString(osb.StartMode)
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", osb.StartAt))
	builder.WriteString(", ")
	builder.WriteString("last_benefit_at=")
	builder.WriteString(fmt.Sprintf("%v", osb.LastBenefitAt))
	builder.WriteString(", ")
	builder.WriteString("benefit_state=")
	builder.WriteString(osb.BenefitState)
	builder.WriteByte(')')
	return builder.String()
}

// OrderStateBases is a parsable slice of OrderStateBase.
type OrderStateBases []*OrderStateBase

func (osb OrderStateBases) config(cfg config) {
	for _i := range osb {
		osb[_i].config = cfg
	}
}
