// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID uuid.UUID `json:"payment_id,omitempty"`
	// ParentOrderID holds the value of the "parent_order_id" field.
	ParentOrderID uuid.UUID `json:"parent_order_id,omitempty"`
	// UnitsV1 holds the value of the "units_v1" field.
	UnitsV1 decimal.Decimal `json:"units_v1,omitempty"`
	// GoodValue holds the value of the "good_value" field.
	GoodValue decimal.Decimal `json:"good_value,omitempty"`
	// PaymentAmount holds the value of the "payment_amount" field.
	PaymentAmount decimal.Decimal `json:"payment_amount,omitempty"`
	// DiscountAmount holds the value of the "discount_amount" field.
	DiscountAmount decimal.Decimal `json:"discount_amount,omitempty"`
	// PromotionID holds the value of the "promotion_id" field.
	PromotionID uuid.UUID `json:"promotion_id,omitempty"`
	// DurationDays holds the value of the "duration_days" field.
	DurationDays uint32 `json:"duration_days,omitempty"`
	// OrderType holds the value of the "order_type" field.
	OrderType string `json:"order_type,omitempty"`
	// InvestmentType holds the value of the "investment_type" field.
	InvestmentType string `json:"investment_type,omitempty"`
	// CouponIds holds the value of the "coupon_ids" field.
	CouponIds []uuid.UUID `json:"coupon_ids,omitempty"`
	// PaymentType holds the value of the "payment_type" field.
	PaymentType string `json:"payment_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldCouponIds:
			values[i] = new([]byte)
		case order.FieldUnitsV1, order.FieldGoodValue, order.FieldPaymentAmount, order.FieldDiscountAmount:
			values[i] = new(decimal.Decimal)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldDeletedAt, order.FieldDurationDays:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderType, order.FieldInvestmentType, order.FieldPaymentType:
			values[i] = new(sql.NullString)
		case order.FieldID, order.FieldAppID, order.FieldUserID, order.FieldGoodID, order.FieldPaymentID, order.FieldParentOrderID, order.FieldPromotionID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = uint32(value.Int64)
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = uint32(value.Int64)
			}
		case order.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = uint32(value.Int64)
			}
		case order.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				o.AppID = *value
			}
		case order.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				o.UserID = *value
			}
		case order.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				o.GoodID = *value
			}
		case order.FieldPaymentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value != nil {
				o.PaymentID = *value
			}
		case order.FieldParentOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_order_id", values[i])
			} else if value != nil {
				o.ParentOrderID = *value
			}
		case order.FieldUnitsV1:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field units_v1", values[i])
			} else if value != nil {
				o.UnitsV1 = *value
			}
		case order.FieldGoodValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field good_value", values[i])
			} else if value != nil {
				o.GoodValue = *value
			}
		case order.FieldPaymentAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field payment_amount", values[i])
			} else if value != nil {
				o.PaymentAmount = *value
			}
		case order.FieldDiscountAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount", values[i])
			} else if value != nil {
				o.DiscountAmount = *value
			}
		case order.FieldPromotionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field promotion_id", values[i])
			} else if value != nil {
				o.PromotionID = *value
			}
		case order.FieldDurationDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_days", values[i])
			} else if value.Valid {
				o.DurationDays = uint32(value.Int64)
			}
		case order.FieldOrderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_type", values[i])
			} else if value.Valid {
				o.OrderType = value.String
			}
		case order.FieldInvestmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field investment_type", values[i])
			} else if value.Valid {
				o.InvestmentType = value.String
			}
		case order.FieldCouponIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.CouponIds); err != nil {
					return fmt.Errorf("unmarshal field coupon_ids: %w", err)
				}
			}
		case order.FieldPaymentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_type", values[i])
			} else if value.Valid {
				o.PaymentType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", o.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", o.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", o.GoodID))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentID))
	builder.WriteString(", ")
	builder.WriteString("parent_order_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ParentOrderID))
	builder.WriteString(", ")
	builder.WriteString("units_v1=")
	builder.WriteString(fmt.Sprintf("%v", o.UnitsV1))
	builder.WriteString(", ")
	builder.WriteString("good_value=")
	builder.WriteString(fmt.Sprintf("%v", o.GoodValue))
	builder.WriteString(", ")
	builder.WriteString("payment_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentAmount))
	builder.WriteString(", ")
	builder.WriteString("discount_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.DiscountAmount))
	builder.WriteString(", ")
	builder.WriteString("promotion_id=")
	builder.WriteString(fmt.Sprintf("%v", o.PromotionID))
	builder.WriteString(", ")
	builder.WriteString("duration_days=")
	builder.WriteString(fmt.Sprintf("%v", o.DurationDays))
	builder.WriteString(", ")
	builder.WriteString("order_type=")
	builder.WriteString(o.OrderType)
	builder.WriteString(", ")
	builder.WriteString("investment_type=")
	builder.WriteString(o.InvestmentType)
	builder.WriteString(", ")
	builder.WriteString("coupon_ids=")
	builder.WriteString(fmt.Sprintf("%v", o.CouponIds))
	builder.WriteString(", ")
	builder.WriteString("payment_type=")
	builder.WriteString(o.PaymentType)
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
