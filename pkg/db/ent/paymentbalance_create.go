// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentbalance"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentBalanceCreate is the builder for creating a PaymentBalance entity.
type PaymentBalanceCreate struct {
	config
	mutation *PaymentBalanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pbc *PaymentBalanceCreate) SetCreatedAt(u uint32) *PaymentBalanceCreate {
	pbc.mutation.SetCreatedAt(u)
	return pbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableCreatedAt(u *uint32) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetCreatedAt(*u)
	}
	return pbc
}

// SetUpdatedAt sets the "updated_at" field.
func (pbc *PaymentBalanceCreate) SetUpdatedAt(u uint32) *PaymentBalanceCreate {
	pbc.mutation.SetUpdatedAt(u)
	return pbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableUpdatedAt(u *uint32) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetUpdatedAt(*u)
	}
	return pbc
}

// SetDeletedAt sets the "deleted_at" field.
func (pbc *PaymentBalanceCreate) SetDeletedAt(u uint32) *PaymentBalanceCreate {
	pbc.mutation.SetDeletedAt(u)
	return pbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableDeletedAt(u *uint32) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetDeletedAt(*u)
	}
	return pbc
}

// SetEntID sets the "ent_id" field.
func (pbc *PaymentBalanceCreate) SetEntID(u uuid.UUID) *PaymentBalanceCreate {
	pbc.mutation.SetEntID(u)
	return pbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableEntID(u *uuid.UUID) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetEntID(*u)
	}
	return pbc
}

// SetPaymentID sets the "payment_id" field.
func (pbc *PaymentBalanceCreate) SetPaymentID(u uuid.UUID) *PaymentBalanceCreate {
	pbc.mutation.SetPaymentID(u)
	return pbc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillablePaymentID(u *uuid.UUID) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetPaymentID(*u)
	}
	return pbc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pbc *PaymentBalanceCreate) SetCoinTypeID(u uuid.UUID) *PaymentBalanceCreate {
	pbc.mutation.SetCoinTypeID(u)
	return pbc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableCoinTypeID(u *uuid.UUID) *PaymentBalanceCreate {
	if u != nil {
		pbc.SetCoinTypeID(*u)
	}
	return pbc
}

// SetAmount sets the "amount" field.
func (pbc *PaymentBalanceCreate) SetAmount(d decimal.Decimal) *PaymentBalanceCreate {
	pbc.mutation.SetAmount(d)
	return pbc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableAmount(d *decimal.Decimal) *PaymentBalanceCreate {
	if d != nil {
		pbc.SetAmount(*d)
	}
	return pbc
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (pbc *PaymentBalanceCreate) SetCoinUsdCurrency(d decimal.Decimal) *PaymentBalanceCreate {
	pbc.mutation.SetCoinUsdCurrency(d)
	return pbc
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentBalanceCreate {
	if d != nil {
		pbc.SetCoinUsdCurrency(*d)
	}
	return pbc
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (pbc *PaymentBalanceCreate) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentBalanceCreate {
	pbc.mutation.SetLocalCoinUsdCurrency(d)
	return pbc
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentBalanceCreate {
	if d != nil {
		pbc.SetLocalCoinUsdCurrency(*d)
	}
	return pbc
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (pbc *PaymentBalanceCreate) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentBalanceCreate {
	pbc.mutation.SetLiveCoinUsdCurrency(d)
	return pbc
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (pbc *PaymentBalanceCreate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentBalanceCreate {
	if d != nil {
		pbc.SetLiveCoinUsdCurrency(*d)
	}
	return pbc
}

// SetID sets the "id" field.
func (pbc *PaymentBalanceCreate) SetID(u uint32) *PaymentBalanceCreate {
	pbc.mutation.SetID(u)
	return pbc
}

// Mutation returns the PaymentBalanceMutation object of the builder.
func (pbc *PaymentBalanceCreate) Mutation() *PaymentBalanceMutation {
	return pbc.mutation
}

// Save creates the PaymentBalance in the database.
func (pbc *PaymentBalanceCreate) Save(ctx context.Context) (*PaymentBalance, error) {
	var (
		err  error
		node *PaymentBalance
	)
	if err := pbc.defaults(); err != nil {
		return nil, err
	}
	if len(pbc.hooks) == 0 {
		if err = pbc.check(); err != nil {
			return nil, err
		}
		node, err = pbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbc.check(); err != nil {
				return nil, err
			}
			pbc.mutation = mutation
			if node, err = pbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pbc.hooks) - 1; i >= 0; i-- {
			if pbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PaymentBalance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentBalanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pbc *PaymentBalanceCreate) SaveX(ctx context.Context) *PaymentBalance {
	v, err := pbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbc *PaymentBalanceCreate) Exec(ctx context.Context) error {
	_, err := pbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbc *PaymentBalanceCreate) ExecX(ctx context.Context) {
	if err := pbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbc *PaymentBalanceCreate) defaults() error {
	if _, ok := pbc.mutation.CreatedAt(); !ok {
		if paymentbalance.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultCreatedAt()
		pbc.mutation.SetCreatedAt(v)
	}
	if _, ok := pbc.mutation.UpdatedAt(); !ok {
		if paymentbalance.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultUpdatedAt()
		pbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pbc.mutation.DeletedAt(); !ok {
		if paymentbalance.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultDeletedAt()
		pbc.mutation.SetDeletedAt(v)
	}
	if _, ok := pbc.mutation.EntID(); !ok {
		if paymentbalance.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultEntID()
		pbc.mutation.SetEntID(v)
	}
	if _, ok := pbc.mutation.PaymentID(); !ok {
		if paymentbalance.DefaultPaymentID == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultPaymentID (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultPaymentID()
		pbc.mutation.SetPaymentID(v)
	}
	if _, ok := pbc.mutation.CoinTypeID(); !ok {
		if paymentbalance.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized paymentbalance.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := paymentbalance.DefaultCoinTypeID()
		pbc.mutation.SetCoinTypeID(v)
	}
	if _, ok := pbc.mutation.Amount(); !ok {
		v := paymentbalance.DefaultAmount
		pbc.mutation.SetAmount(v)
	}
	if _, ok := pbc.mutation.CoinUsdCurrency(); !ok {
		v := paymentbalance.DefaultCoinUsdCurrency
		pbc.mutation.SetCoinUsdCurrency(v)
	}
	if _, ok := pbc.mutation.LocalCoinUsdCurrency(); !ok {
		v := paymentbalance.DefaultLocalCoinUsdCurrency
		pbc.mutation.SetLocalCoinUsdCurrency(v)
	}
	if _, ok := pbc.mutation.LiveCoinUsdCurrency(); !ok {
		v := paymentbalance.DefaultLiveCoinUsdCurrency
		pbc.mutation.SetLiveCoinUsdCurrency(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pbc *PaymentBalanceCreate) check() error {
	if _, ok := pbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentBalance.created_at"`)}
	}
	if _, ok := pbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentBalance.updated_at"`)}
	}
	if _, ok := pbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PaymentBalance.deleted_at"`)}
	}
	if _, ok := pbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "PaymentBalance.ent_id"`)}
	}
	return nil
}

func (pbc *PaymentBalanceCreate) sqlSave(ctx context.Context) (*PaymentBalance, error) {
	_node, _spec := pbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (pbc *PaymentBalanceCreate) createSpec() (*PaymentBalance, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentBalance{config: pbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentbalance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymentbalance.FieldID,
			},
		}
	)
	_spec.OnConflict = pbc.conflict
	if id, ok := pbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbalance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbalance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pbc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbalance.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pbc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbalance.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := pbc.mutation.PaymentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbalance.FieldPaymentID,
		})
		_node.PaymentID = value
	}
	if value, ok := pbc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbalance.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := pbc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymentbalance.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pbc.mutation.CoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymentbalance.FieldCoinUsdCurrency,
		})
		_node.CoinUsdCurrency = value
	}
	if value, ok := pbc.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymentbalance.FieldLocalCoinUsdCurrency,
		})
		_node.LocalCoinUsdCurrency = value
	}
	if value, ok := pbc.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymentbalance.FieldLiveCoinUsdCurrency,
		})
		_node.LiveCoinUsdCurrency = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBalance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBalanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pbc *PaymentBalanceCreate) OnConflict(opts ...sql.ConflictOption) *PaymentBalanceUpsertOne {
	pbc.conflict = opts
	return &PaymentBalanceUpsertOne{
		create: pbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pbc *PaymentBalanceCreate) OnConflictColumns(columns ...string) *PaymentBalanceUpsertOne {
	pbc.conflict = append(pbc.conflict, sql.ConflictColumns(columns...))
	return &PaymentBalanceUpsertOne{
		create: pbc,
	}
}

type (
	// PaymentBalanceUpsertOne is the builder for "upsert"-ing
	//  one PaymentBalance node.
	PaymentBalanceUpsertOne struct {
		create *PaymentBalanceCreate
	}

	// PaymentBalanceUpsert is the "OnConflict" setter.
	PaymentBalanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBalanceUpsert) SetCreatedAt(v uint32) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateCreatedAt() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentBalanceUpsert) AddCreatedAt(v uint32) *PaymentBalanceUpsert {
	u.Add(paymentbalance.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBalanceUpsert) SetUpdatedAt(v uint32) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateUpdatedAt() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentBalanceUpsert) AddUpdatedAt(v uint32) *PaymentBalanceUpsert {
	u.Add(paymentbalance.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentBalanceUpsert) SetDeletedAt(v uint32) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateDeletedAt() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentBalanceUpsert) AddDeletedAt(v uint32) *PaymentBalanceUpsert {
	u.Add(paymentbalance.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceUpsert) SetEntID(v uuid.UUID) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateEntID() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldEntID)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceUpsert) SetPaymentID(v uuid.UUID) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdatePaymentID() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceUpsert) ClearPaymentID() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldPaymentID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentBalanceUpsert) SetCoinTypeID(v uuid.UUID) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateCoinTypeID() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentBalanceUpsert) ClearCoinTypeID() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentBalanceUpsert) SetAmount(v decimal.Decimal) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateAmount() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBalanceUpsert) ClearAmount() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldAmount)
	return u
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentBalanceUpsert) SetCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldCoinUsdCurrency, v)
	return u
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldCoinUsdCurrency)
	return u
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentBalanceUpsert) ClearCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldCoinUsdCurrency)
	return u
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsert) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldLocalCoinUsdCurrency, v)
	return u
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateLocalCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldLocalCoinUsdCurrency)
	return u
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsert) ClearLocalCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldLocalCoinUsdCurrency)
	return u
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsert) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsert {
	u.Set(paymentbalance.FieldLiveCoinUsdCurrency, v)
	return u
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsert) UpdateLiveCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetExcluded(paymentbalance.FieldLiveCoinUsdCurrency)
	return u
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsert) ClearLiveCoinUsdCurrency() *PaymentBalanceUpsert {
	u.SetNull(paymentbalance.FieldLiveCoinUsdCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentBalanceUpsertOne) UpdateNewValues() *PaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentbalance.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentBalance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentBalanceUpsertOne) Ignore() *PaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBalanceUpsertOne) DoNothing() *PaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBalanceCreate.OnConflict
// documentation for more info.
func (u *PaymentBalanceUpsertOne) Update(set func(*PaymentBalanceUpsert)) *PaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBalanceUpsertOne) SetCreatedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentBalanceUpsertOne) AddCreatedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateCreatedAt() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBalanceUpsertOne) SetUpdatedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentBalanceUpsertOne) AddUpdatedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateUpdatedAt() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentBalanceUpsertOne) SetDeletedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentBalanceUpsertOne) AddDeletedAt(v uint32) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateDeletedAt() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceUpsertOne) SetEntID(v uuid.UUID) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateEntID() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateEntID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceUpsertOne) SetPaymentID(v uuid.UUID) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdatePaymentID() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceUpsertOne) ClearPaymentID() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentBalanceUpsertOne) SetCoinTypeID(v uuid.UUID) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateCoinTypeID() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentBalanceUpsertOne) ClearCoinTypeID() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentBalanceUpsertOne) SetAmount(v decimal.Decimal) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateAmount() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBalanceUpsertOne) ClearAmount() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) SetCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) ClearCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateLocalCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) ClearLocalCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertOne) UpdateLiveCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsertOne) ClearLiveCoinUsdCurrency() *PaymentBalanceUpsertOne {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentBalanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentBalanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBalanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentBalanceUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentBalanceUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentBalanceCreateBulk is the builder for creating many PaymentBalance entities in bulk.
type PaymentBalanceCreateBulk struct {
	config
	builders []*PaymentBalanceCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentBalance entities in the database.
func (pbcb *PaymentBalanceCreateBulk) Save(ctx context.Context) ([]*PaymentBalance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pbcb.builders))
	nodes := make([]*PaymentBalance, len(pbcb.builders))
	mutators := make([]Mutator, len(pbcb.builders))
	for i := range pbcb.builders {
		func(i int, root context.Context) {
			builder := pbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentBalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pbcb *PaymentBalanceCreateBulk) SaveX(ctx context.Context) []*PaymentBalance {
	v, err := pbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbcb *PaymentBalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := pbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcb *PaymentBalanceCreateBulk) ExecX(ctx context.Context) {
	if err := pbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBalance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBalanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pbcb *PaymentBalanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentBalanceUpsertBulk {
	pbcb.conflict = opts
	return &PaymentBalanceUpsertBulk{
		create: pbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pbcb *PaymentBalanceCreateBulk) OnConflictColumns(columns ...string) *PaymentBalanceUpsertBulk {
	pbcb.conflict = append(pbcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentBalanceUpsertBulk{
		create: pbcb,
	}
}

// PaymentBalanceUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentBalance nodes.
type PaymentBalanceUpsertBulk struct {
	create *PaymentBalanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentBalanceUpsertBulk) UpdateNewValues() *PaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentbalance.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentBalance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentBalanceUpsertBulk) Ignore() *PaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBalanceUpsertBulk) DoNothing() *PaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBalanceCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentBalanceUpsertBulk) Update(set func(*PaymentBalanceUpsert)) *PaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBalanceUpsertBulk) SetCreatedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentBalanceUpsertBulk) AddCreatedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateCreatedAt() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBalanceUpsertBulk) SetUpdatedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentBalanceUpsertBulk) AddUpdatedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateUpdatedAt() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentBalanceUpsertBulk) SetDeletedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentBalanceUpsertBulk) AddDeletedAt(v uint32) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateDeletedAt() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentBalanceUpsertBulk) SetEntID(v uuid.UUID) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateEntID() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateEntID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *PaymentBalanceUpsertBulk) SetPaymentID(v uuid.UUID) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdatePaymentID() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *PaymentBalanceUpsertBulk) ClearPaymentID() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentBalanceUpsertBulk) SetCoinTypeID(v uuid.UUID) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateCoinTypeID() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentBalanceUpsertBulk) ClearCoinTypeID() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentBalanceUpsertBulk) SetAmount(v decimal.Decimal) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateAmount() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBalanceUpsertBulk) ClearAmount() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) SetCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) ClearCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateLocalCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) ClearLocalCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentBalanceUpsertBulk) UpdateLiveCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentBalanceUpsertBulk) ClearLiveCoinUsdCurrency() *PaymentBalanceUpsertBulk {
	return u.Update(func(s *PaymentBalanceUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentBalanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentBalanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentBalanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBalanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
