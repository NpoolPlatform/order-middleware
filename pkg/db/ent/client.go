// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/appconfig"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorder"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/ordercoupon"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstatebase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentbalance"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentcontract"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymenttransfer"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrentalstate"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppConfig is the client for interacting with the AppConfig builders.
	AppConfig *AppConfigClient
	// Compensate is the client for interacting with the Compensate builders.
	Compensate *CompensateClient
	// FeeOrder is the client for interacting with the FeeOrder builders.
	FeeOrder *FeeOrderClient
	// FeeOrderState is the client for interacting with the FeeOrderState builders.
	FeeOrderState *FeeOrderStateClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderBase is the client for interacting with the OrderBase builders.
	OrderBase *OrderBaseClient
	// OrderCoupon is the client for interacting with the OrderCoupon builders.
	OrderCoupon *OrderCouponClient
	// OrderLock is the client for interacting with the OrderLock builders.
	OrderLock *OrderLockClient
	// OrderState is the client for interacting with the OrderState builders.
	OrderState *OrderStateClient
	// OrderStateBase is the client for interacting with the OrderStateBase builders.
	OrderStateBase *OrderStateBaseClient
	// OutOfGas is the client for interacting with the OutOfGas builders.
	OutOfGas *OutOfGasClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentBalance is the client for interacting with the PaymentBalance builders.
	PaymentBalance *PaymentBalanceClient
	// PaymentContract is the client for interacting with the PaymentContract builders.
	PaymentContract *PaymentContractClient
	// PaymentTransfer is the client for interacting with the PaymentTransfer builders.
	PaymentTransfer *PaymentTransferClient
	// PowerRental is the client for interacting with the PowerRental builders.
	PowerRental *PowerRentalClient
	// PowerRentalState is the client for interacting with the PowerRentalState builders.
	PowerRentalState *PowerRentalStateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppConfig = NewAppConfigClient(c.config)
	c.Compensate = NewCompensateClient(c.config)
	c.FeeOrder = NewFeeOrderClient(c.config)
	c.FeeOrderState = NewFeeOrderStateClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderBase = NewOrderBaseClient(c.config)
	c.OrderCoupon = NewOrderCouponClient(c.config)
	c.OrderLock = NewOrderLockClient(c.config)
	c.OrderState = NewOrderStateClient(c.config)
	c.OrderStateBase = NewOrderStateBaseClient(c.config)
	c.OutOfGas = NewOutOfGasClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentBalance = NewPaymentBalanceClient(c.config)
	c.PaymentContract = NewPaymentContractClient(c.config)
	c.PaymentTransfer = NewPaymentTransferClient(c.config)
	c.PowerRental = NewPowerRentalClient(c.config)
	c.PowerRentalState = NewPowerRentalStateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AppConfig:        NewAppConfigClient(cfg),
		Compensate:       NewCompensateClient(cfg),
		FeeOrder:         NewFeeOrderClient(cfg),
		FeeOrderState:    NewFeeOrderStateClient(cfg),
		Order:            NewOrderClient(cfg),
		OrderBase:        NewOrderBaseClient(cfg),
		OrderCoupon:      NewOrderCouponClient(cfg),
		OrderLock:        NewOrderLockClient(cfg),
		OrderState:       NewOrderStateClient(cfg),
		OrderStateBase:   NewOrderStateBaseClient(cfg),
		OutOfGas:         NewOutOfGasClient(cfg),
		Payment:          NewPaymentClient(cfg),
		PaymentBalance:   NewPaymentBalanceClient(cfg),
		PaymentContract:  NewPaymentContractClient(cfg),
		PaymentTransfer:  NewPaymentTransferClient(cfg),
		PowerRental:      NewPowerRentalClient(cfg),
		PowerRentalState: NewPowerRentalStateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AppConfig:        NewAppConfigClient(cfg),
		Compensate:       NewCompensateClient(cfg),
		FeeOrder:         NewFeeOrderClient(cfg),
		FeeOrderState:    NewFeeOrderStateClient(cfg),
		Order:            NewOrderClient(cfg),
		OrderBase:        NewOrderBaseClient(cfg),
		OrderCoupon:      NewOrderCouponClient(cfg),
		OrderLock:        NewOrderLockClient(cfg),
		OrderState:       NewOrderStateClient(cfg),
		OrderStateBase:   NewOrderStateBaseClient(cfg),
		OutOfGas:         NewOutOfGasClient(cfg),
		Payment:          NewPaymentClient(cfg),
		PaymentBalance:   NewPaymentBalanceClient(cfg),
		PaymentContract:  NewPaymentContractClient(cfg),
		PaymentTransfer:  NewPaymentTransferClient(cfg),
		PowerRental:      NewPowerRentalClient(cfg),
		PowerRentalState: NewPowerRentalStateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppConfig.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppConfig.Use(hooks...)
	c.Compensate.Use(hooks...)
	c.FeeOrder.Use(hooks...)
	c.FeeOrderState.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderBase.Use(hooks...)
	c.OrderCoupon.Use(hooks...)
	c.OrderLock.Use(hooks...)
	c.OrderState.Use(hooks...)
	c.OrderStateBase.Use(hooks...)
	c.OutOfGas.Use(hooks...)
	c.Payment.Use(hooks...)
	c.PaymentBalance.Use(hooks...)
	c.PaymentContract.Use(hooks...)
	c.PaymentTransfer.Use(hooks...)
	c.PowerRental.Use(hooks...)
	c.PowerRentalState.Use(hooks...)
}

// AppConfigClient is a client for the AppConfig schema.
type AppConfigClient struct {
	config
}

// NewAppConfigClient returns a client for the AppConfig from the given config.
func NewAppConfigClient(c config) *AppConfigClient {
	return &AppConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appconfig.Hooks(f(g(h())))`.
func (c *AppConfigClient) Use(hooks ...Hook) {
	c.hooks.AppConfig = append(c.hooks.AppConfig, hooks...)
}

// Create returns a builder for creating a AppConfig entity.
func (c *AppConfigClient) Create() *AppConfigCreate {
	mutation := newAppConfigMutation(c.config, OpCreate)
	return &AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppConfig entities.
func (c *AppConfigClient) CreateBulk(builders ...*AppConfigCreate) *AppConfigCreateBulk {
	return &AppConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppConfig.
func (c *AppConfigClient) Update() *AppConfigUpdate {
	mutation := newAppConfigMutation(c.config, OpUpdate)
	return &AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppConfigClient) UpdateOne(ac *AppConfig) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfig(ac))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppConfigClient) UpdateOneID(id uint32) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfigID(id))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppConfig.
func (c *AppConfigClient) Delete() *AppConfigDelete {
	mutation := newAppConfigMutation(c.config, OpDelete)
	return &AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppConfigClient) DeleteOne(ac *AppConfig) *AppConfigDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppConfigClient) DeleteOneID(id uint32) *AppConfigDeleteOne {
	builder := c.Delete().Where(appconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppConfigDeleteOne{builder}
}

// Query returns a query builder for AppConfig.
func (c *AppConfigClient) Query() *AppConfigQuery {
	return &AppConfigQuery{
		config: c.config,
	}
}

// Get returns a AppConfig entity by its id.
func (c *AppConfigClient) Get(ctx context.Context, id uint32) (*AppConfig, error) {
	return c.Query().Where(appconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppConfigClient) GetX(ctx context.Context, id uint32) *AppConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppConfigClient) Hooks() []Hook {
	hooks := c.hooks.AppConfig
	return append(hooks[:len(hooks):len(hooks)], appconfig.Hooks[:]...)
}

// CompensateClient is a client for the Compensate schema.
type CompensateClient struct {
	config
}

// NewCompensateClient returns a client for the Compensate from the given config.
func NewCompensateClient(c config) *CompensateClient {
	return &CompensateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `compensate.Hooks(f(g(h())))`.
func (c *CompensateClient) Use(hooks ...Hook) {
	c.hooks.Compensate = append(c.hooks.Compensate, hooks...)
}

// Create returns a builder for creating a Compensate entity.
func (c *CompensateClient) Create() *CompensateCreate {
	mutation := newCompensateMutation(c.config, OpCreate)
	return &CompensateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Compensate entities.
func (c *CompensateClient) CreateBulk(builders ...*CompensateCreate) *CompensateCreateBulk {
	return &CompensateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Compensate.
func (c *CompensateClient) Update() *CompensateUpdate {
	mutation := newCompensateMutation(c.config, OpUpdate)
	return &CompensateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompensateClient) UpdateOne(co *Compensate) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensate(co))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompensateClient) UpdateOneID(id uint32) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensateID(id))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Compensate.
func (c *CompensateClient) Delete() *CompensateDelete {
	mutation := newCompensateMutation(c.config, OpDelete)
	return &CompensateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompensateClient) DeleteOne(co *Compensate) *CompensateDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CompensateClient) DeleteOneID(id uint32) *CompensateDeleteOne {
	builder := c.Delete().Where(compensate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompensateDeleteOne{builder}
}

// Query returns a query builder for Compensate.
func (c *CompensateClient) Query() *CompensateQuery {
	return &CompensateQuery{
		config: c.config,
	}
}

// Get returns a Compensate entity by its id.
func (c *CompensateClient) Get(ctx context.Context, id uint32) (*Compensate, error) {
	return c.Query().Where(compensate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompensateClient) GetX(ctx context.Context, id uint32) *Compensate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompensateClient) Hooks() []Hook {
	hooks := c.hooks.Compensate
	return append(hooks[:len(hooks):len(hooks)], compensate.Hooks[:]...)
}

// FeeOrderClient is a client for the FeeOrder schema.
type FeeOrderClient struct {
	config
}

// NewFeeOrderClient returns a client for the FeeOrder from the given config.
func NewFeeOrderClient(c config) *FeeOrderClient {
	return &FeeOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeorder.Hooks(f(g(h())))`.
func (c *FeeOrderClient) Use(hooks ...Hook) {
	c.hooks.FeeOrder = append(c.hooks.FeeOrder, hooks...)
}

// Create returns a builder for creating a FeeOrder entity.
func (c *FeeOrderClient) Create() *FeeOrderCreate {
	mutation := newFeeOrderMutation(c.config, OpCreate)
	return &FeeOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeeOrder entities.
func (c *FeeOrderClient) CreateBulk(builders ...*FeeOrderCreate) *FeeOrderCreateBulk {
	return &FeeOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeeOrder.
func (c *FeeOrderClient) Update() *FeeOrderUpdate {
	mutation := newFeeOrderMutation(c.config, OpUpdate)
	return &FeeOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeeOrderClient) UpdateOne(fo *FeeOrder) *FeeOrderUpdateOne {
	mutation := newFeeOrderMutation(c.config, OpUpdateOne, withFeeOrder(fo))
	return &FeeOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeeOrderClient) UpdateOneID(id uint32) *FeeOrderUpdateOne {
	mutation := newFeeOrderMutation(c.config, OpUpdateOne, withFeeOrderID(id))
	return &FeeOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeeOrder.
func (c *FeeOrderClient) Delete() *FeeOrderDelete {
	mutation := newFeeOrderMutation(c.config, OpDelete)
	return &FeeOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeeOrderClient) DeleteOne(fo *FeeOrder) *FeeOrderDeleteOne {
	return c.DeleteOneID(fo.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FeeOrderClient) DeleteOneID(id uint32) *FeeOrderDeleteOne {
	builder := c.Delete().Where(feeorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeeOrderDeleteOne{builder}
}

// Query returns a query builder for FeeOrder.
func (c *FeeOrderClient) Query() *FeeOrderQuery {
	return &FeeOrderQuery{
		config: c.config,
	}
}

// Get returns a FeeOrder entity by its id.
func (c *FeeOrderClient) Get(ctx context.Context, id uint32) (*FeeOrder, error) {
	return c.Query().Where(feeorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeeOrderClient) GetX(ctx context.Context, id uint32) *FeeOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeeOrderClient) Hooks() []Hook {
	hooks := c.hooks.FeeOrder
	return append(hooks[:len(hooks):len(hooks)], feeorder.Hooks[:]...)
}

// FeeOrderStateClient is a client for the FeeOrderState schema.
type FeeOrderStateClient struct {
	config
}

// NewFeeOrderStateClient returns a client for the FeeOrderState from the given config.
func NewFeeOrderStateClient(c config) *FeeOrderStateClient {
	return &FeeOrderStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeorderstate.Hooks(f(g(h())))`.
func (c *FeeOrderStateClient) Use(hooks ...Hook) {
	c.hooks.FeeOrderState = append(c.hooks.FeeOrderState, hooks...)
}

// Create returns a builder for creating a FeeOrderState entity.
func (c *FeeOrderStateClient) Create() *FeeOrderStateCreate {
	mutation := newFeeOrderStateMutation(c.config, OpCreate)
	return &FeeOrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeeOrderState entities.
func (c *FeeOrderStateClient) CreateBulk(builders ...*FeeOrderStateCreate) *FeeOrderStateCreateBulk {
	return &FeeOrderStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeeOrderState.
func (c *FeeOrderStateClient) Update() *FeeOrderStateUpdate {
	mutation := newFeeOrderStateMutation(c.config, OpUpdate)
	return &FeeOrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeeOrderStateClient) UpdateOne(fos *FeeOrderState) *FeeOrderStateUpdateOne {
	mutation := newFeeOrderStateMutation(c.config, OpUpdateOne, withFeeOrderState(fos))
	return &FeeOrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeeOrderStateClient) UpdateOneID(id uint32) *FeeOrderStateUpdateOne {
	mutation := newFeeOrderStateMutation(c.config, OpUpdateOne, withFeeOrderStateID(id))
	return &FeeOrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeeOrderState.
func (c *FeeOrderStateClient) Delete() *FeeOrderStateDelete {
	mutation := newFeeOrderStateMutation(c.config, OpDelete)
	return &FeeOrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeeOrderStateClient) DeleteOne(fos *FeeOrderState) *FeeOrderStateDeleteOne {
	return c.DeleteOneID(fos.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FeeOrderStateClient) DeleteOneID(id uint32) *FeeOrderStateDeleteOne {
	builder := c.Delete().Where(feeorderstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeeOrderStateDeleteOne{builder}
}

// Query returns a query builder for FeeOrderState.
func (c *FeeOrderStateClient) Query() *FeeOrderStateQuery {
	return &FeeOrderStateQuery{
		config: c.config,
	}
}

// Get returns a FeeOrderState entity by its id.
func (c *FeeOrderStateClient) Get(ctx context.Context, id uint32) (*FeeOrderState, error) {
	return c.Query().Where(feeorderstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeeOrderStateClient) GetX(ctx context.Context, id uint32) *FeeOrderState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeeOrderStateClient) Hooks() []Hook {
	hooks := c.hooks.FeeOrderState
	return append(hooks[:len(hooks):len(hooks)], feeorderstate.Hooks[:]...)
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint32) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint32) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint32) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint32) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// OrderBaseClient is a client for the OrderBase schema.
type OrderBaseClient struct {
	config
}

// NewOrderBaseClient returns a client for the OrderBase from the given config.
func NewOrderBaseClient(c config) *OrderBaseClient {
	return &OrderBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderbase.Hooks(f(g(h())))`.
func (c *OrderBaseClient) Use(hooks ...Hook) {
	c.hooks.OrderBase = append(c.hooks.OrderBase, hooks...)
}

// Create returns a builder for creating a OrderBase entity.
func (c *OrderBaseClient) Create() *OrderBaseCreate {
	mutation := newOrderBaseMutation(c.config, OpCreate)
	return &OrderBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderBase entities.
func (c *OrderBaseClient) CreateBulk(builders ...*OrderBaseCreate) *OrderBaseCreateBulk {
	return &OrderBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderBase.
func (c *OrderBaseClient) Update() *OrderBaseUpdate {
	mutation := newOrderBaseMutation(c.config, OpUpdate)
	return &OrderBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderBaseClient) UpdateOne(ob *OrderBase) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBase(ob))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderBaseClient) UpdateOneID(id uint32) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBaseID(id))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderBase.
func (c *OrderBaseClient) Delete() *OrderBaseDelete {
	mutation := newOrderBaseMutation(c.config, OpDelete)
	return &OrderBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderBaseClient) DeleteOne(ob *OrderBase) *OrderBaseDeleteOne {
	return c.DeleteOneID(ob.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderBaseClient) DeleteOneID(id uint32) *OrderBaseDeleteOne {
	builder := c.Delete().Where(orderbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderBaseDeleteOne{builder}
}

// Query returns a query builder for OrderBase.
func (c *OrderBaseClient) Query() *OrderBaseQuery {
	return &OrderBaseQuery{
		config: c.config,
	}
}

// Get returns a OrderBase entity by its id.
func (c *OrderBaseClient) Get(ctx context.Context, id uint32) (*OrderBase, error) {
	return c.Query().Where(orderbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderBaseClient) GetX(ctx context.Context, id uint32) *OrderBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderBaseClient) Hooks() []Hook {
	hooks := c.hooks.OrderBase
	return append(hooks[:len(hooks):len(hooks)], orderbase.Hooks[:]...)
}

// OrderCouponClient is a client for the OrderCoupon schema.
type OrderCouponClient struct {
	config
}

// NewOrderCouponClient returns a client for the OrderCoupon from the given config.
func NewOrderCouponClient(c config) *OrderCouponClient {
	return &OrderCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordercoupon.Hooks(f(g(h())))`.
func (c *OrderCouponClient) Use(hooks ...Hook) {
	c.hooks.OrderCoupon = append(c.hooks.OrderCoupon, hooks...)
}

// Create returns a builder for creating a OrderCoupon entity.
func (c *OrderCouponClient) Create() *OrderCouponCreate {
	mutation := newOrderCouponMutation(c.config, OpCreate)
	return &OrderCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderCoupon entities.
func (c *OrderCouponClient) CreateBulk(builders ...*OrderCouponCreate) *OrderCouponCreateBulk {
	return &OrderCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderCoupon.
func (c *OrderCouponClient) Update() *OrderCouponUpdate {
	mutation := newOrderCouponMutation(c.config, OpUpdate)
	return &OrderCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderCouponClient) UpdateOne(oc *OrderCoupon) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCoupon(oc))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderCouponClient) UpdateOneID(id uint32) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCouponID(id))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderCoupon.
func (c *OrderCouponClient) Delete() *OrderCouponDelete {
	mutation := newOrderCouponMutation(c.config, OpDelete)
	return &OrderCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderCouponClient) DeleteOne(oc *OrderCoupon) *OrderCouponDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderCouponClient) DeleteOneID(id uint32) *OrderCouponDeleteOne {
	builder := c.Delete().Where(ordercoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderCouponDeleteOne{builder}
}

// Query returns a query builder for OrderCoupon.
func (c *OrderCouponClient) Query() *OrderCouponQuery {
	return &OrderCouponQuery{
		config: c.config,
	}
}

// Get returns a OrderCoupon entity by its id.
func (c *OrderCouponClient) Get(ctx context.Context, id uint32) (*OrderCoupon, error) {
	return c.Query().Where(ordercoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderCouponClient) GetX(ctx context.Context, id uint32) *OrderCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderCouponClient) Hooks() []Hook {
	hooks := c.hooks.OrderCoupon
	return append(hooks[:len(hooks):len(hooks)], ordercoupon.Hooks[:]...)
}

// OrderLockClient is a client for the OrderLock schema.
type OrderLockClient struct {
	config
}

// NewOrderLockClient returns a client for the OrderLock from the given config.
func NewOrderLockClient(c config) *OrderLockClient {
	return &OrderLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderlock.Hooks(f(g(h())))`.
func (c *OrderLockClient) Use(hooks ...Hook) {
	c.hooks.OrderLock = append(c.hooks.OrderLock, hooks...)
}

// Create returns a builder for creating a OrderLock entity.
func (c *OrderLockClient) Create() *OrderLockCreate {
	mutation := newOrderLockMutation(c.config, OpCreate)
	return &OrderLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderLock entities.
func (c *OrderLockClient) CreateBulk(builders ...*OrderLockCreate) *OrderLockCreateBulk {
	return &OrderLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderLock.
func (c *OrderLockClient) Update() *OrderLockUpdate {
	mutation := newOrderLockMutation(c.config, OpUpdate)
	return &OrderLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderLockClient) UpdateOne(ol *OrderLock) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLock(ol))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderLockClient) UpdateOneID(id uint32) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLockID(id))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderLock.
func (c *OrderLockClient) Delete() *OrderLockDelete {
	mutation := newOrderLockMutation(c.config, OpDelete)
	return &OrderLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderLockClient) DeleteOne(ol *OrderLock) *OrderLockDeleteOne {
	return c.DeleteOneID(ol.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderLockClient) DeleteOneID(id uint32) *OrderLockDeleteOne {
	builder := c.Delete().Where(orderlock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderLockDeleteOne{builder}
}

// Query returns a query builder for OrderLock.
func (c *OrderLockClient) Query() *OrderLockQuery {
	return &OrderLockQuery{
		config: c.config,
	}
}

// Get returns a OrderLock entity by its id.
func (c *OrderLockClient) Get(ctx context.Context, id uint32) (*OrderLock, error) {
	return c.Query().Where(orderlock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderLockClient) GetX(ctx context.Context, id uint32) *OrderLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderLockClient) Hooks() []Hook {
	hooks := c.hooks.OrderLock
	return append(hooks[:len(hooks):len(hooks)], orderlock.Hooks[:]...)
}

// OrderStateClient is a client for the OrderState schema.
type OrderStateClient struct {
	config
}

// NewOrderStateClient returns a client for the OrderState from the given config.
func NewOrderStateClient(c config) *OrderStateClient {
	return &OrderStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstate.Hooks(f(g(h())))`.
func (c *OrderStateClient) Use(hooks ...Hook) {
	c.hooks.OrderState = append(c.hooks.OrderState, hooks...)
}

// Create returns a builder for creating a OrderState entity.
func (c *OrderStateClient) Create() *OrderStateCreate {
	mutation := newOrderStateMutation(c.config, OpCreate)
	return &OrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderState entities.
func (c *OrderStateClient) CreateBulk(builders ...*OrderStateCreate) *OrderStateCreateBulk {
	return &OrderStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderState.
func (c *OrderStateClient) Update() *OrderStateUpdate {
	mutation := newOrderStateMutation(c.config, OpUpdate)
	return &OrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStateClient) UpdateOne(os *OrderState) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderState(os))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStateClient) UpdateOneID(id uint32) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderStateID(id))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderState.
func (c *OrderStateClient) Delete() *OrderStateDelete {
	mutation := newOrderStateMutation(c.config, OpDelete)
	return &OrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStateClient) DeleteOne(os *OrderState) *OrderStateDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderStateClient) DeleteOneID(id uint32) *OrderStateDeleteOne {
	builder := c.Delete().Where(orderstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStateDeleteOne{builder}
}

// Query returns a query builder for OrderState.
func (c *OrderStateClient) Query() *OrderStateQuery {
	return &OrderStateQuery{
		config: c.config,
	}
}

// Get returns a OrderState entity by its id.
func (c *OrderStateClient) Get(ctx context.Context, id uint32) (*OrderState, error) {
	return c.Query().Where(orderstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStateClient) GetX(ctx context.Context, id uint32) *OrderState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStateClient) Hooks() []Hook {
	hooks := c.hooks.OrderState
	return append(hooks[:len(hooks):len(hooks)], orderstate.Hooks[:]...)
}

// OrderStateBaseClient is a client for the OrderStateBase schema.
type OrderStateBaseClient struct {
	config
}

// NewOrderStateBaseClient returns a client for the OrderStateBase from the given config.
func NewOrderStateBaseClient(c config) *OrderStateBaseClient {
	return &OrderStateBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatebase.Hooks(f(g(h())))`.
func (c *OrderStateBaseClient) Use(hooks ...Hook) {
	c.hooks.OrderStateBase = append(c.hooks.OrderStateBase, hooks...)
}

// Create returns a builder for creating a OrderStateBase entity.
func (c *OrderStateBaseClient) Create() *OrderStateBaseCreate {
	mutation := newOrderStateBaseMutation(c.config, OpCreate)
	return &OrderStateBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStateBase entities.
func (c *OrderStateBaseClient) CreateBulk(builders ...*OrderStateBaseCreate) *OrderStateBaseCreateBulk {
	return &OrderStateBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStateBase.
func (c *OrderStateBaseClient) Update() *OrderStateBaseUpdate {
	mutation := newOrderStateBaseMutation(c.config, OpUpdate)
	return &OrderStateBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStateBaseClient) UpdateOne(osb *OrderStateBase) *OrderStateBaseUpdateOne {
	mutation := newOrderStateBaseMutation(c.config, OpUpdateOne, withOrderStateBase(osb))
	return &OrderStateBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStateBaseClient) UpdateOneID(id uint32) *OrderStateBaseUpdateOne {
	mutation := newOrderStateBaseMutation(c.config, OpUpdateOne, withOrderStateBaseID(id))
	return &OrderStateBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStateBase.
func (c *OrderStateBaseClient) Delete() *OrderStateBaseDelete {
	mutation := newOrderStateBaseMutation(c.config, OpDelete)
	return &OrderStateBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStateBaseClient) DeleteOne(osb *OrderStateBase) *OrderStateBaseDeleteOne {
	return c.DeleteOneID(osb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderStateBaseClient) DeleteOneID(id uint32) *OrderStateBaseDeleteOne {
	builder := c.Delete().Where(orderstatebase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStateBaseDeleteOne{builder}
}

// Query returns a query builder for OrderStateBase.
func (c *OrderStateBaseClient) Query() *OrderStateBaseQuery {
	return &OrderStateBaseQuery{
		config: c.config,
	}
}

// Get returns a OrderStateBase entity by its id.
func (c *OrderStateBaseClient) Get(ctx context.Context, id uint32) (*OrderStateBase, error) {
	return c.Query().Where(orderstatebase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStateBaseClient) GetX(ctx context.Context, id uint32) *OrderStateBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStateBaseClient) Hooks() []Hook {
	hooks := c.hooks.OrderStateBase
	return append(hooks[:len(hooks):len(hooks)], orderstatebase.Hooks[:]...)
}

// OutOfGasClient is a client for the OutOfGas schema.
type OutOfGasClient struct {
	config
}

// NewOutOfGasClient returns a client for the OutOfGas from the given config.
func NewOutOfGasClient(c config) *OutOfGasClient {
	return &OutOfGasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outofgas.Hooks(f(g(h())))`.
func (c *OutOfGasClient) Use(hooks ...Hook) {
	c.hooks.OutOfGas = append(c.hooks.OutOfGas, hooks...)
}

// Create returns a builder for creating a OutOfGas entity.
func (c *OutOfGasClient) Create() *OutOfGasCreate {
	mutation := newOutOfGasMutation(c.config, OpCreate)
	return &OutOfGasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OutOfGas entities.
func (c *OutOfGasClient) CreateBulk(builders ...*OutOfGasCreate) *OutOfGasCreateBulk {
	return &OutOfGasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OutOfGas.
func (c *OutOfGasClient) Update() *OutOfGasUpdate {
	mutation := newOutOfGasMutation(c.config, OpUpdate)
	return &OutOfGasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutOfGasClient) UpdateOne(oog *OutOfGas) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGas(oog))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutOfGasClient) UpdateOneID(id uint32) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGasID(id))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OutOfGas.
func (c *OutOfGasClient) Delete() *OutOfGasDelete {
	mutation := newOutOfGasMutation(c.config, OpDelete)
	return &OutOfGasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutOfGasClient) DeleteOne(oog *OutOfGas) *OutOfGasDeleteOne {
	return c.DeleteOneID(oog.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OutOfGasClient) DeleteOneID(id uint32) *OutOfGasDeleteOne {
	builder := c.Delete().Where(outofgas.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutOfGasDeleteOne{builder}
}

// Query returns a query builder for OutOfGas.
func (c *OutOfGasClient) Query() *OutOfGasQuery {
	return &OutOfGasQuery{
		config: c.config,
	}
}

// Get returns a OutOfGas entity by its id.
func (c *OutOfGasClient) Get(ctx context.Context, id uint32) (*OutOfGas, error) {
	return c.Query().Where(outofgas.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutOfGasClient) GetX(ctx context.Context, id uint32) *OutOfGas {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OutOfGasClient) Hooks() []Hook {
	hooks := c.hooks.OutOfGas
	return append(hooks[:len(hooks):len(hooks)], outofgas.Hooks[:]...)
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uint32) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uint32) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uint32) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uint32) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	hooks := c.hooks.Payment
	return append(hooks[:len(hooks):len(hooks)], payment.Hooks[:]...)
}

// PaymentBalanceClient is a client for the PaymentBalance schema.
type PaymentBalanceClient struct {
	config
}

// NewPaymentBalanceClient returns a client for the PaymentBalance from the given config.
func NewPaymentBalanceClient(c config) *PaymentBalanceClient {
	return &PaymentBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentbalance.Hooks(f(g(h())))`.
func (c *PaymentBalanceClient) Use(hooks ...Hook) {
	c.hooks.PaymentBalance = append(c.hooks.PaymentBalance, hooks...)
}

// Create returns a builder for creating a PaymentBalance entity.
func (c *PaymentBalanceClient) Create() *PaymentBalanceCreate {
	mutation := newPaymentBalanceMutation(c.config, OpCreate)
	return &PaymentBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentBalance entities.
func (c *PaymentBalanceClient) CreateBulk(builders ...*PaymentBalanceCreate) *PaymentBalanceCreateBulk {
	return &PaymentBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentBalance.
func (c *PaymentBalanceClient) Update() *PaymentBalanceUpdate {
	mutation := newPaymentBalanceMutation(c.config, OpUpdate)
	return &PaymentBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentBalanceClient) UpdateOne(pb *PaymentBalance) *PaymentBalanceUpdateOne {
	mutation := newPaymentBalanceMutation(c.config, OpUpdateOne, withPaymentBalance(pb))
	return &PaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentBalanceClient) UpdateOneID(id uint32) *PaymentBalanceUpdateOne {
	mutation := newPaymentBalanceMutation(c.config, OpUpdateOne, withPaymentBalanceID(id))
	return &PaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentBalance.
func (c *PaymentBalanceClient) Delete() *PaymentBalanceDelete {
	mutation := newPaymentBalanceMutation(c.config, OpDelete)
	return &PaymentBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentBalanceClient) DeleteOne(pb *PaymentBalance) *PaymentBalanceDeleteOne {
	return c.DeleteOneID(pb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PaymentBalanceClient) DeleteOneID(id uint32) *PaymentBalanceDeleteOne {
	builder := c.Delete().Where(paymentbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentBalanceDeleteOne{builder}
}

// Query returns a query builder for PaymentBalance.
func (c *PaymentBalanceClient) Query() *PaymentBalanceQuery {
	return &PaymentBalanceQuery{
		config: c.config,
	}
}

// Get returns a PaymentBalance entity by its id.
func (c *PaymentBalanceClient) Get(ctx context.Context, id uint32) (*PaymentBalance, error) {
	return c.Query().Where(paymentbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentBalanceClient) GetX(ctx context.Context, id uint32) *PaymentBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentBalanceClient) Hooks() []Hook {
	hooks := c.hooks.PaymentBalance
	return append(hooks[:len(hooks):len(hooks)], paymentbalance.Hooks[:]...)
}

// PaymentContractClient is a client for the PaymentContract schema.
type PaymentContractClient struct {
	config
}

// NewPaymentContractClient returns a client for the PaymentContract from the given config.
func NewPaymentContractClient(c config) *PaymentContractClient {
	return &PaymentContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentcontract.Hooks(f(g(h())))`.
func (c *PaymentContractClient) Use(hooks ...Hook) {
	c.hooks.PaymentContract = append(c.hooks.PaymentContract, hooks...)
}

// Create returns a builder for creating a PaymentContract entity.
func (c *PaymentContractClient) Create() *PaymentContractCreate {
	mutation := newPaymentContractMutation(c.config, OpCreate)
	return &PaymentContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentContract entities.
func (c *PaymentContractClient) CreateBulk(builders ...*PaymentContractCreate) *PaymentContractCreateBulk {
	return &PaymentContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentContract.
func (c *PaymentContractClient) Update() *PaymentContractUpdate {
	mutation := newPaymentContractMutation(c.config, OpUpdate)
	return &PaymentContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentContractClient) UpdateOne(pc *PaymentContract) *PaymentContractUpdateOne {
	mutation := newPaymentContractMutation(c.config, OpUpdateOne, withPaymentContract(pc))
	return &PaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentContractClient) UpdateOneID(id uint32) *PaymentContractUpdateOne {
	mutation := newPaymentContractMutation(c.config, OpUpdateOne, withPaymentContractID(id))
	return &PaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentContract.
func (c *PaymentContractClient) Delete() *PaymentContractDelete {
	mutation := newPaymentContractMutation(c.config, OpDelete)
	return &PaymentContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentContractClient) DeleteOne(pc *PaymentContract) *PaymentContractDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PaymentContractClient) DeleteOneID(id uint32) *PaymentContractDeleteOne {
	builder := c.Delete().Where(paymentcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentContractDeleteOne{builder}
}

// Query returns a query builder for PaymentContract.
func (c *PaymentContractClient) Query() *PaymentContractQuery {
	return &PaymentContractQuery{
		config: c.config,
	}
}

// Get returns a PaymentContract entity by its id.
func (c *PaymentContractClient) Get(ctx context.Context, id uint32) (*PaymentContract, error) {
	return c.Query().Where(paymentcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentContractClient) GetX(ctx context.Context, id uint32) *PaymentContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentContractClient) Hooks() []Hook {
	hooks := c.hooks.PaymentContract
	return append(hooks[:len(hooks):len(hooks)], paymentcontract.Hooks[:]...)
}

// PaymentTransferClient is a client for the PaymentTransfer schema.
type PaymentTransferClient struct {
	config
}

// NewPaymentTransferClient returns a client for the PaymentTransfer from the given config.
func NewPaymentTransferClient(c config) *PaymentTransferClient {
	return &PaymentTransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymenttransfer.Hooks(f(g(h())))`.
func (c *PaymentTransferClient) Use(hooks ...Hook) {
	c.hooks.PaymentTransfer = append(c.hooks.PaymentTransfer, hooks...)
}

// Create returns a builder for creating a PaymentTransfer entity.
func (c *PaymentTransferClient) Create() *PaymentTransferCreate {
	mutation := newPaymentTransferMutation(c.config, OpCreate)
	return &PaymentTransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentTransfer entities.
func (c *PaymentTransferClient) CreateBulk(builders ...*PaymentTransferCreate) *PaymentTransferCreateBulk {
	return &PaymentTransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentTransfer.
func (c *PaymentTransferClient) Update() *PaymentTransferUpdate {
	mutation := newPaymentTransferMutation(c.config, OpUpdate)
	return &PaymentTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentTransferClient) UpdateOne(pt *PaymentTransfer) *PaymentTransferUpdateOne {
	mutation := newPaymentTransferMutation(c.config, OpUpdateOne, withPaymentTransfer(pt))
	return &PaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentTransferClient) UpdateOneID(id uint32) *PaymentTransferUpdateOne {
	mutation := newPaymentTransferMutation(c.config, OpUpdateOne, withPaymentTransferID(id))
	return &PaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentTransfer.
func (c *PaymentTransferClient) Delete() *PaymentTransferDelete {
	mutation := newPaymentTransferMutation(c.config, OpDelete)
	return &PaymentTransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentTransferClient) DeleteOne(pt *PaymentTransfer) *PaymentTransferDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PaymentTransferClient) DeleteOneID(id uint32) *PaymentTransferDeleteOne {
	builder := c.Delete().Where(paymenttransfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentTransferDeleteOne{builder}
}

// Query returns a query builder for PaymentTransfer.
func (c *PaymentTransferClient) Query() *PaymentTransferQuery {
	return &PaymentTransferQuery{
		config: c.config,
	}
}

// Get returns a PaymentTransfer entity by its id.
func (c *PaymentTransferClient) Get(ctx context.Context, id uint32) (*PaymentTransfer, error) {
	return c.Query().Where(paymenttransfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentTransferClient) GetX(ctx context.Context, id uint32) *PaymentTransfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentTransferClient) Hooks() []Hook {
	hooks := c.hooks.PaymentTransfer
	return append(hooks[:len(hooks):len(hooks)], paymenttransfer.Hooks[:]...)
}

// PowerRentalClient is a client for the PowerRental schema.
type PowerRentalClient struct {
	config
}

// NewPowerRentalClient returns a client for the PowerRental from the given config.
func NewPowerRentalClient(c config) *PowerRentalClient {
	return &PowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrental.Hooks(f(g(h())))`.
func (c *PowerRentalClient) Use(hooks ...Hook) {
	c.hooks.PowerRental = append(c.hooks.PowerRental, hooks...)
}

// Create returns a builder for creating a PowerRental entity.
func (c *PowerRentalClient) Create() *PowerRentalCreate {
	mutation := newPowerRentalMutation(c.config, OpCreate)
	return &PowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRental entities.
func (c *PowerRentalClient) CreateBulk(builders ...*PowerRentalCreate) *PowerRentalCreateBulk {
	return &PowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRental.
func (c *PowerRentalClient) Update() *PowerRentalUpdate {
	mutation := newPowerRentalMutation(c.config, OpUpdate)
	return &PowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalClient) UpdateOne(pr *PowerRental) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRental(pr))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalClient) UpdateOneID(id uint32) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRentalID(id))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRental.
func (c *PowerRentalClient) Delete() *PowerRentalDelete {
	mutation := newPowerRentalMutation(c.config, OpDelete)
	return &PowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalClient) DeleteOne(pr *PowerRental) *PowerRentalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PowerRentalClient) DeleteOneID(id uint32) *PowerRentalDeleteOne {
	builder := c.Delete().Where(powerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalDeleteOne{builder}
}

// Query returns a query builder for PowerRental.
func (c *PowerRentalClient) Query() *PowerRentalQuery {
	return &PowerRentalQuery{
		config: c.config,
	}
}

// Get returns a PowerRental entity by its id.
func (c *PowerRentalClient) Get(ctx context.Context, id uint32) (*PowerRental, error) {
	return c.Query().Where(powerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalClient) GetX(ctx context.Context, id uint32) *PowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.PowerRental
	return append(hooks[:len(hooks):len(hooks)], powerrental.Hooks[:]...)
}

// PowerRentalStateClient is a client for the PowerRentalState schema.
type PowerRentalStateClient struct {
	config
}

// NewPowerRentalStateClient returns a client for the PowerRentalState from the given config.
func NewPowerRentalStateClient(c config) *PowerRentalStateClient {
	return &PowerRentalStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrentalstate.Hooks(f(g(h())))`.
func (c *PowerRentalStateClient) Use(hooks ...Hook) {
	c.hooks.PowerRentalState = append(c.hooks.PowerRentalState, hooks...)
}

// Create returns a builder for creating a PowerRentalState entity.
func (c *PowerRentalStateClient) Create() *PowerRentalStateCreate {
	mutation := newPowerRentalStateMutation(c.config, OpCreate)
	return &PowerRentalStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRentalState entities.
func (c *PowerRentalStateClient) CreateBulk(builders ...*PowerRentalStateCreate) *PowerRentalStateCreateBulk {
	return &PowerRentalStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRentalState.
func (c *PowerRentalStateClient) Update() *PowerRentalStateUpdate {
	mutation := newPowerRentalStateMutation(c.config, OpUpdate)
	return &PowerRentalStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalStateClient) UpdateOne(prs *PowerRentalState) *PowerRentalStateUpdateOne {
	mutation := newPowerRentalStateMutation(c.config, OpUpdateOne, withPowerRentalState(prs))
	return &PowerRentalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalStateClient) UpdateOneID(id uint32) *PowerRentalStateUpdateOne {
	mutation := newPowerRentalStateMutation(c.config, OpUpdateOne, withPowerRentalStateID(id))
	return &PowerRentalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRentalState.
func (c *PowerRentalStateClient) Delete() *PowerRentalStateDelete {
	mutation := newPowerRentalStateMutation(c.config, OpDelete)
	return &PowerRentalStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalStateClient) DeleteOne(prs *PowerRentalState) *PowerRentalStateDeleteOne {
	return c.DeleteOneID(prs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PowerRentalStateClient) DeleteOneID(id uint32) *PowerRentalStateDeleteOne {
	builder := c.Delete().Where(powerrentalstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalStateDeleteOne{builder}
}

// Query returns a query builder for PowerRentalState.
func (c *PowerRentalStateClient) Query() *PowerRentalStateQuery {
	return &PowerRentalStateQuery{
		config: c.config,
	}
}

// Get returns a PowerRentalState entity by its id.
func (c *PowerRentalStateClient) Get(ctx context.Context, id uint32) (*PowerRentalState, error) {
	return c.Query().Where(powerrentalstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalStateClient) GetX(ctx context.Context, id uint32) *PowerRentalState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalStateClient) Hooks() []Hook {
	hooks := c.hooks.PowerRentalState
	return append(hooks[:len(hooks):len(hooks)], powerrentalstate.Hooks[:]...)
}
