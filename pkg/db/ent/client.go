// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	entorder "github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/ordercoupon"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentbalance"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentcontract"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymenttransfer"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/simulateconfig"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Compensate is the client for interacting with the Compensate builders.
	Compensate *CompensateClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderBase is the client for interacting with the OrderBase builders.
	OrderBase *OrderBaseClient
	// OrderCoupon is the client for interacting with the OrderCoupon builders.
	OrderCoupon *OrderCouponClient
	// OrderLock is the client for interacting with the OrderLock builders.
	OrderLock *OrderLockClient
	// OrderPaymentBalance is the client for interacting with the OrderPaymentBalance builders.
	OrderPaymentBalance *OrderPaymentBalanceClient
	// OrderPaymentContract is the client for interacting with the OrderPaymentContract builders.
	OrderPaymentContract *OrderPaymentContractClient
	// OrderPaymentTransfer is the client for interacting with the OrderPaymentTransfer builders.
	OrderPaymentTransfer *OrderPaymentTransferClient
	// OrderState is the client for interacting with the OrderState builders.
	OrderState *OrderStateClient
	// OutOfGas is the client for interacting with the OutOfGas builders.
	OutOfGas *OutOfGasClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PowerRental is the client for interacting with the PowerRental builders.
	PowerRental *PowerRentalClient
	// SimulateConfig is the client for interacting with the SimulateConfig builders.
	SimulateConfig *SimulateConfigClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Compensate = NewCompensateClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderBase = NewOrderBaseClient(c.config)
	c.OrderCoupon = NewOrderCouponClient(c.config)
	c.OrderLock = NewOrderLockClient(c.config)
	c.OrderPaymentBalance = NewOrderPaymentBalanceClient(c.config)
	c.OrderPaymentContract = NewOrderPaymentContractClient(c.config)
	c.OrderPaymentTransfer = NewOrderPaymentTransferClient(c.config)
	c.OrderState = NewOrderStateClient(c.config)
	c.OutOfGas = NewOutOfGasClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PowerRental = NewPowerRentalClient(c.config)
	c.SimulateConfig = NewSimulateConfigClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Compensate:           NewCompensateClient(cfg),
		Order:                NewOrderClient(cfg),
		OrderBase:            NewOrderBaseClient(cfg),
		OrderCoupon:          NewOrderCouponClient(cfg),
		OrderLock:            NewOrderLockClient(cfg),
		OrderPaymentBalance:  NewOrderPaymentBalanceClient(cfg),
		OrderPaymentContract: NewOrderPaymentContractClient(cfg),
		OrderPaymentTransfer: NewOrderPaymentTransferClient(cfg),
		OrderState:           NewOrderStateClient(cfg),
		OutOfGas:             NewOutOfGasClient(cfg),
		Payment:              NewPaymentClient(cfg),
		PowerRental:          NewPowerRentalClient(cfg),
		SimulateConfig:       NewSimulateConfigClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Compensate:           NewCompensateClient(cfg),
		Order:                NewOrderClient(cfg),
		OrderBase:            NewOrderBaseClient(cfg),
		OrderCoupon:          NewOrderCouponClient(cfg),
		OrderLock:            NewOrderLockClient(cfg),
		OrderPaymentBalance:  NewOrderPaymentBalanceClient(cfg),
		OrderPaymentContract: NewOrderPaymentContractClient(cfg),
		OrderPaymentTransfer: NewOrderPaymentTransferClient(cfg),
		OrderState:           NewOrderStateClient(cfg),
		OutOfGas:             NewOutOfGasClient(cfg),
		Payment:              NewPaymentClient(cfg),
		PowerRental:          NewPowerRentalClient(cfg),
		SimulateConfig:       NewSimulateConfigClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Compensate.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Compensate.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderBase.Use(hooks...)
	c.OrderCoupon.Use(hooks...)
	c.OrderLock.Use(hooks...)
	c.OrderPaymentBalance.Use(hooks...)
	c.OrderPaymentContract.Use(hooks...)
	c.OrderPaymentTransfer.Use(hooks...)
	c.OrderState.Use(hooks...)
	c.OutOfGas.Use(hooks...)
	c.Payment.Use(hooks...)
	c.PowerRental.Use(hooks...)
	c.SimulateConfig.Use(hooks...)
}

// CompensateClient is a client for the Compensate schema.
type CompensateClient struct {
	config
}

// NewCompensateClient returns a client for the Compensate from the given config.
func NewCompensateClient(c config) *CompensateClient {
	return &CompensateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `compensate.Hooks(f(g(h())))`.
func (c *CompensateClient) Use(hooks ...Hook) {
	c.hooks.Compensate = append(c.hooks.Compensate, hooks...)
}

// Create returns a builder for creating a Compensate entity.
func (c *CompensateClient) Create() *CompensateCreate {
	mutation := newCompensateMutation(c.config, OpCreate)
	return &CompensateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Compensate entities.
func (c *CompensateClient) CreateBulk(builders ...*CompensateCreate) *CompensateCreateBulk {
	return &CompensateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Compensate.
func (c *CompensateClient) Update() *CompensateUpdate {
	mutation := newCompensateMutation(c.config, OpUpdate)
	return &CompensateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompensateClient) UpdateOne(co *Compensate) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensate(co))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompensateClient) UpdateOneID(id uint32) *CompensateUpdateOne {
	mutation := newCompensateMutation(c.config, OpUpdateOne, withCompensateID(id))
	return &CompensateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Compensate.
func (c *CompensateClient) Delete() *CompensateDelete {
	mutation := newCompensateMutation(c.config, OpDelete)
	return &CompensateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompensateClient) DeleteOne(co *Compensate) *CompensateDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CompensateClient) DeleteOneID(id uint32) *CompensateDeleteOne {
	builder := c.Delete().Where(compensate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompensateDeleteOne{builder}
}

// Query returns a query builder for Compensate.
func (c *CompensateClient) Query() *CompensateQuery {
	return &CompensateQuery{
		config: c.config,
	}
}

// Get returns a Compensate entity by its id.
func (c *CompensateClient) Get(ctx context.Context, id uint32) (*Compensate, error) {
	return c.Query().Where(compensate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompensateClient) GetX(ctx context.Context, id uint32) *Compensate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompensateClient) Hooks() []Hook {
	hooks := c.hooks.Compensate
	return append(hooks[:len(hooks):len(hooks)], compensate.Hooks[:]...)
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entorder.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint32) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint32) *OrderDeleteOne {
	builder := c.Delete().Where(entorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint32) (*Order, error) {
	return c.Query().Where(entorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint32) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], entorder.Hooks[:]...)
}

// OrderBaseClient is a client for the OrderBase schema.
type OrderBaseClient struct {
	config
}

// NewOrderBaseClient returns a client for the OrderBase from the given config.
func NewOrderBaseClient(c config) *OrderBaseClient {
	return &OrderBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderbase.Hooks(f(g(h())))`.
func (c *OrderBaseClient) Use(hooks ...Hook) {
	c.hooks.OrderBase = append(c.hooks.OrderBase, hooks...)
}

// Create returns a builder for creating a OrderBase entity.
func (c *OrderBaseClient) Create() *OrderBaseCreate {
	mutation := newOrderBaseMutation(c.config, OpCreate)
	return &OrderBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderBase entities.
func (c *OrderBaseClient) CreateBulk(builders ...*OrderBaseCreate) *OrderBaseCreateBulk {
	return &OrderBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderBase.
func (c *OrderBaseClient) Update() *OrderBaseUpdate {
	mutation := newOrderBaseMutation(c.config, OpUpdate)
	return &OrderBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderBaseClient) UpdateOne(ob *OrderBase) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBase(ob))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderBaseClient) UpdateOneID(id uint32) *OrderBaseUpdateOne {
	mutation := newOrderBaseMutation(c.config, OpUpdateOne, withOrderBaseID(id))
	return &OrderBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderBase.
func (c *OrderBaseClient) Delete() *OrderBaseDelete {
	mutation := newOrderBaseMutation(c.config, OpDelete)
	return &OrderBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderBaseClient) DeleteOne(ob *OrderBase) *OrderBaseDeleteOne {
	return c.DeleteOneID(ob.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderBaseClient) DeleteOneID(id uint32) *OrderBaseDeleteOne {
	builder := c.Delete().Where(orderbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderBaseDeleteOne{builder}
}

// Query returns a query builder for OrderBase.
func (c *OrderBaseClient) Query() *OrderBaseQuery {
	return &OrderBaseQuery{
		config: c.config,
	}
}

// Get returns a OrderBase entity by its id.
func (c *OrderBaseClient) Get(ctx context.Context, id uint32) (*OrderBase, error) {
	return c.Query().Where(orderbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderBaseClient) GetX(ctx context.Context, id uint32) *OrderBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderBaseClient) Hooks() []Hook {
	hooks := c.hooks.OrderBase
	return append(hooks[:len(hooks):len(hooks)], orderbase.Hooks[:]...)
}

// OrderCouponClient is a client for the OrderCoupon schema.
type OrderCouponClient struct {
	config
}

// NewOrderCouponClient returns a client for the OrderCoupon from the given config.
func NewOrderCouponClient(c config) *OrderCouponClient {
	return &OrderCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordercoupon.Hooks(f(g(h())))`.
func (c *OrderCouponClient) Use(hooks ...Hook) {
	c.hooks.OrderCoupon = append(c.hooks.OrderCoupon, hooks...)
}

// Create returns a builder for creating a OrderCoupon entity.
func (c *OrderCouponClient) Create() *OrderCouponCreate {
	mutation := newOrderCouponMutation(c.config, OpCreate)
	return &OrderCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderCoupon entities.
func (c *OrderCouponClient) CreateBulk(builders ...*OrderCouponCreate) *OrderCouponCreateBulk {
	return &OrderCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderCoupon.
func (c *OrderCouponClient) Update() *OrderCouponUpdate {
	mutation := newOrderCouponMutation(c.config, OpUpdate)
	return &OrderCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderCouponClient) UpdateOne(oc *OrderCoupon) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCoupon(oc))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderCouponClient) UpdateOneID(id uint32) *OrderCouponUpdateOne {
	mutation := newOrderCouponMutation(c.config, OpUpdateOne, withOrderCouponID(id))
	return &OrderCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderCoupon.
func (c *OrderCouponClient) Delete() *OrderCouponDelete {
	mutation := newOrderCouponMutation(c.config, OpDelete)
	return &OrderCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderCouponClient) DeleteOne(oc *OrderCoupon) *OrderCouponDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderCouponClient) DeleteOneID(id uint32) *OrderCouponDeleteOne {
	builder := c.Delete().Where(ordercoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderCouponDeleteOne{builder}
}

// Query returns a query builder for OrderCoupon.
func (c *OrderCouponClient) Query() *OrderCouponQuery {
	return &OrderCouponQuery{
		config: c.config,
	}
}

// Get returns a OrderCoupon entity by its id.
func (c *OrderCouponClient) Get(ctx context.Context, id uint32) (*OrderCoupon, error) {
	return c.Query().Where(ordercoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderCouponClient) GetX(ctx context.Context, id uint32) *OrderCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderCouponClient) Hooks() []Hook {
	hooks := c.hooks.OrderCoupon
	return append(hooks[:len(hooks):len(hooks)], ordercoupon.Hooks[:]...)
}

// OrderLockClient is a client for the OrderLock schema.
type OrderLockClient struct {
	config
}

// NewOrderLockClient returns a client for the OrderLock from the given config.
func NewOrderLockClient(c config) *OrderLockClient {
	return &OrderLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderlock.Hooks(f(g(h())))`.
func (c *OrderLockClient) Use(hooks ...Hook) {
	c.hooks.OrderLock = append(c.hooks.OrderLock, hooks...)
}

// Create returns a builder for creating a OrderLock entity.
func (c *OrderLockClient) Create() *OrderLockCreate {
	mutation := newOrderLockMutation(c.config, OpCreate)
	return &OrderLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderLock entities.
func (c *OrderLockClient) CreateBulk(builders ...*OrderLockCreate) *OrderLockCreateBulk {
	return &OrderLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderLock.
func (c *OrderLockClient) Update() *OrderLockUpdate {
	mutation := newOrderLockMutation(c.config, OpUpdate)
	return &OrderLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderLockClient) UpdateOne(ol *OrderLock) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLock(ol))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderLockClient) UpdateOneID(id uint32) *OrderLockUpdateOne {
	mutation := newOrderLockMutation(c.config, OpUpdateOne, withOrderLockID(id))
	return &OrderLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderLock.
func (c *OrderLockClient) Delete() *OrderLockDelete {
	mutation := newOrderLockMutation(c.config, OpDelete)
	return &OrderLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderLockClient) DeleteOne(ol *OrderLock) *OrderLockDeleteOne {
	return c.DeleteOneID(ol.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderLockClient) DeleteOneID(id uint32) *OrderLockDeleteOne {
	builder := c.Delete().Where(orderlock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderLockDeleteOne{builder}
}

// Query returns a query builder for OrderLock.
func (c *OrderLockClient) Query() *OrderLockQuery {
	return &OrderLockQuery{
		config: c.config,
	}
}

// Get returns a OrderLock entity by its id.
func (c *OrderLockClient) Get(ctx context.Context, id uint32) (*OrderLock, error) {
	return c.Query().Where(orderlock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderLockClient) GetX(ctx context.Context, id uint32) *OrderLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderLockClient) Hooks() []Hook {
	hooks := c.hooks.OrderLock
	return append(hooks[:len(hooks):len(hooks)], orderlock.Hooks[:]...)
}

// OrderPaymentBalanceClient is a client for the OrderPaymentBalance schema.
type OrderPaymentBalanceClient struct {
	config
}

// NewOrderPaymentBalanceClient returns a client for the OrderPaymentBalance from the given config.
func NewOrderPaymentBalanceClient(c config) *OrderPaymentBalanceClient {
	return &OrderPaymentBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderpaymentbalance.Hooks(f(g(h())))`.
func (c *OrderPaymentBalanceClient) Use(hooks ...Hook) {
	c.hooks.OrderPaymentBalance = append(c.hooks.OrderPaymentBalance, hooks...)
}

// Create returns a builder for creating a OrderPaymentBalance entity.
func (c *OrderPaymentBalanceClient) Create() *OrderPaymentBalanceCreate {
	mutation := newOrderPaymentBalanceMutation(c.config, OpCreate)
	return &OrderPaymentBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderPaymentBalance entities.
func (c *OrderPaymentBalanceClient) CreateBulk(builders ...*OrderPaymentBalanceCreate) *OrderPaymentBalanceCreateBulk {
	return &OrderPaymentBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderPaymentBalance.
func (c *OrderPaymentBalanceClient) Update() *OrderPaymentBalanceUpdate {
	mutation := newOrderPaymentBalanceMutation(c.config, OpUpdate)
	return &OrderPaymentBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderPaymentBalanceClient) UpdateOne(opb *OrderPaymentBalance) *OrderPaymentBalanceUpdateOne {
	mutation := newOrderPaymentBalanceMutation(c.config, OpUpdateOne, withOrderPaymentBalance(opb))
	return &OrderPaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderPaymentBalanceClient) UpdateOneID(id uint32) *OrderPaymentBalanceUpdateOne {
	mutation := newOrderPaymentBalanceMutation(c.config, OpUpdateOne, withOrderPaymentBalanceID(id))
	return &OrderPaymentBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderPaymentBalance.
func (c *OrderPaymentBalanceClient) Delete() *OrderPaymentBalanceDelete {
	mutation := newOrderPaymentBalanceMutation(c.config, OpDelete)
	return &OrderPaymentBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderPaymentBalanceClient) DeleteOne(opb *OrderPaymentBalance) *OrderPaymentBalanceDeleteOne {
	return c.DeleteOneID(opb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderPaymentBalanceClient) DeleteOneID(id uint32) *OrderPaymentBalanceDeleteOne {
	builder := c.Delete().Where(orderpaymentbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderPaymentBalanceDeleteOne{builder}
}

// Query returns a query builder for OrderPaymentBalance.
func (c *OrderPaymentBalanceClient) Query() *OrderPaymentBalanceQuery {
	return &OrderPaymentBalanceQuery{
		config: c.config,
	}
}

// Get returns a OrderPaymentBalance entity by its id.
func (c *OrderPaymentBalanceClient) Get(ctx context.Context, id uint32) (*OrderPaymentBalance, error) {
	return c.Query().Where(orderpaymentbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderPaymentBalanceClient) GetX(ctx context.Context, id uint32) *OrderPaymentBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderPaymentBalanceClient) Hooks() []Hook {
	hooks := c.hooks.OrderPaymentBalance
	return append(hooks[:len(hooks):len(hooks)], orderpaymentbalance.Hooks[:]...)
}

// OrderPaymentContractClient is a client for the OrderPaymentContract schema.
type OrderPaymentContractClient struct {
	config
}

// NewOrderPaymentContractClient returns a client for the OrderPaymentContract from the given config.
func NewOrderPaymentContractClient(c config) *OrderPaymentContractClient {
	return &OrderPaymentContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderpaymentcontract.Hooks(f(g(h())))`.
func (c *OrderPaymentContractClient) Use(hooks ...Hook) {
	c.hooks.OrderPaymentContract = append(c.hooks.OrderPaymentContract, hooks...)
}

// Create returns a builder for creating a OrderPaymentContract entity.
func (c *OrderPaymentContractClient) Create() *OrderPaymentContractCreate {
	mutation := newOrderPaymentContractMutation(c.config, OpCreate)
	return &OrderPaymentContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderPaymentContract entities.
func (c *OrderPaymentContractClient) CreateBulk(builders ...*OrderPaymentContractCreate) *OrderPaymentContractCreateBulk {
	return &OrderPaymentContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderPaymentContract.
func (c *OrderPaymentContractClient) Update() *OrderPaymentContractUpdate {
	mutation := newOrderPaymentContractMutation(c.config, OpUpdate)
	return &OrderPaymentContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderPaymentContractClient) UpdateOne(opc *OrderPaymentContract) *OrderPaymentContractUpdateOne {
	mutation := newOrderPaymentContractMutation(c.config, OpUpdateOne, withOrderPaymentContract(opc))
	return &OrderPaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderPaymentContractClient) UpdateOneID(id uint32) *OrderPaymentContractUpdateOne {
	mutation := newOrderPaymentContractMutation(c.config, OpUpdateOne, withOrderPaymentContractID(id))
	return &OrderPaymentContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderPaymentContract.
func (c *OrderPaymentContractClient) Delete() *OrderPaymentContractDelete {
	mutation := newOrderPaymentContractMutation(c.config, OpDelete)
	return &OrderPaymentContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderPaymentContractClient) DeleteOne(opc *OrderPaymentContract) *OrderPaymentContractDeleteOne {
	return c.DeleteOneID(opc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderPaymentContractClient) DeleteOneID(id uint32) *OrderPaymentContractDeleteOne {
	builder := c.Delete().Where(orderpaymentcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderPaymentContractDeleteOne{builder}
}

// Query returns a query builder for OrderPaymentContract.
func (c *OrderPaymentContractClient) Query() *OrderPaymentContractQuery {
	return &OrderPaymentContractQuery{
		config: c.config,
	}
}

// Get returns a OrderPaymentContract entity by its id.
func (c *OrderPaymentContractClient) Get(ctx context.Context, id uint32) (*OrderPaymentContract, error) {
	return c.Query().Where(orderpaymentcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderPaymentContractClient) GetX(ctx context.Context, id uint32) *OrderPaymentContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderPaymentContractClient) Hooks() []Hook {
	hooks := c.hooks.OrderPaymentContract
	return append(hooks[:len(hooks):len(hooks)], orderpaymentcontract.Hooks[:]...)
}

// OrderPaymentTransferClient is a client for the OrderPaymentTransfer schema.
type OrderPaymentTransferClient struct {
	config
}

// NewOrderPaymentTransferClient returns a client for the OrderPaymentTransfer from the given config.
func NewOrderPaymentTransferClient(c config) *OrderPaymentTransferClient {
	return &OrderPaymentTransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderpaymenttransfer.Hooks(f(g(h())))`.
func (c *OrderPaymentTransferClient) Use(hooks ...Hook) {
	c.hooks.OrderPaymentTransfer = append(c.hooks.OrderPaymentTransfer, hooks...)
}

// Create returns a builder for creating a OrderPaymentTransfer entity.
func (c *OrderPaymentTransferClient) Create() *OrderPaymentTransferCreate {
	mutation := newOrderPaymentTransferMutation(c.config, OpCreate)
	return &OrderPaymentTransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderPaymentTransfer entities.
func (c *OrderPaymentTransferClient) CreateBulk(builders ...*OrderPaymentTransferCreate) *OrderPaymentTransferCreateBulk {
	return &OrderPaymentTransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderPaymentTransfer.
func (c *OrderPaymentTransferClient) Update() *OrderPaymentTransferUpdate {
	mutation := newOrderPaymentTransferMutation(c.config, OpUpdate)
	return &OrderPaymentTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderPaymentTransferClient) UpdateOne(opt *OrderPaymentTransfer) *OrderPaymentTransferUpdateOne {
	mutation := newOrderPaymentTransferMutation(c.config, OpUpdateOne, withOrderPaymentTransfer(opt))
	return &OrderPaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderPaymentTransferClient) UpdateOneID(id uint32) *OrderPaymentTransferUpdateOne {
	mutation := newOrderPaymentTransferMutation(c.config, OpUpdateOne, withOrderPaymentTransferID(id))
	return &OrderPaymentTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderPaymentTransfer.
func (c *OrderPaymentTransferClient) Delete() *OrderPaymentTransferDelete {
	mutation := newOrderPaymentTransferMutation(c.config, OpDelete)
	return &OrderPaymentTransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderPaymentTransferClient) DeleteOne(opt *OrderPaymentTransfer) *OrderPaymentTransferDeleteOne {
	return c.DeleteOneID(opt.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderPaymentTransferClient) DeleteOneID(id uint32) *OrderPaymentTransferDeleteOne {
	builder := c.Delete().Where(orderpaymenttransfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderPaymentTransferDeleteOne{builder}
}

// Query returns a query builder for OrderPaymentTransfer.
func (c *OrderPaymentTransferClient) Query() *OrderPaymentTransferQuery {
	return &OrderPaymentTransferQuery{
		config: c.config,
	}
}

// Get returns a OrderPaymentTransfer entity by its id.
func (c *OrderPaymentTransferClient) Get(ctx context.Context, id uint32) (*OrderPaymentTransfer, error) {
	return c.Query().Where(orderpaymenttransfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderPaymentTransferClient) GetX(ctx context.Context, id uint32) *OrderPaymentTransfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderPaymentTransferClient) Hooks() []Hook {
	hooks := c.hooks.OrderPaymentTransfer
	return append(hooks[:len(hooks):len(hooks)], orderpaymenttransfer.Hooks[:]...)
}

// OrderStateClient is a client for the OrderState schema.
type OrderStateClient struct {
	config
}

// NewOrderStateClient returns a client for the OrderState from the given config.
func NewOrderStateClient(c config) *OrderStateClient {
	return &OrderStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstate.Hooks(f(g(h())))`.
func (c *OrderStateClient) Use(hooks ...Hook) {
	c.hooks.OrderState = append(c.hooks.OrderState, hooks...)
}

// Create returns a builder for creating a OrderState entity.
func (c *OrderStateClient) Create() *OrderStateCreate {
	mutation := newOrderStateMutation(c.config, OpCreate)
	return &OrderStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderState entities.
func (c *OrderStateClient) CreateBulk(builders ...*OrderStateCreate) *OrderStateCreateBulk {
	return &OrderStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderState.
func (c *OrderStateClient) Update() *OrderStateUpdate {
	mutation := newOrderStateMutation(c.config, OpUpdate)
	return &OrderStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStateClient) UpdateOne(os *OrderState) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderState(os))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStateClient) UpdateOneID(id uint32) *OrderStateUpdateOne {
	mutation := newOrderStateMutation(c.config, OpUpdateOne, withOrderStateID(id))
	return &OrderStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderState.
func (c *OrderStateClient) Delete() *OrderStateDelete {
	mutation := newOrderStateMutation(c.config, OpDelete)
	return &OrderStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStateClient) DeleteOne(os *OrderState) *OrderStateDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderStateClient) DeleteOneID(id uint32) *OrderStateDeleteOne {
	builder := c.Delete().Where(orderstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStateDeleteOne{builder}
}

// Query returns a query builder for OrderState.
func (c *OrderStateClient) Query() *OrderStateQuery {
	return &OrderStateQuery{
		config: c.config,
	}
}

// Get returns a OrderState entity by its id.
func (c *OrderStateClient) Get(ctx context.Context, id uint32) (*OrderState, error) {
	return c.Query().Where(orderstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStateClient) GetX(ctx context.Context, id uint32) *OrderState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStateClient) Hooks() []Hook {
	hooks := c.hooks.OrderState
	return append(hooks[:len(hooks):len(hooks)], orderstate.Hooks[:]...)
}

// OutOfGasClient is a client for the OutOfGas schema.
type OutOfGasClient struct {
	config
}

// NewOutOfGasClient returns a client for the OutOfGas from the given config.
func NewOutOfGasClient(c config) *OutOfGasClient {
	return &OutOfGasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outofgas.Hooks(f(g(h())))`.
func (c *OutOfGasClient) Use(hooks ...Hook) {
	c.hooks.OutOfGas = append(c.hooks.OutOfGas, hooks...)
}

// Create returns a builder for creating a OutOfGas entity.
func (c *OutOfGasClient) Create() *OutOfGasCreate {
	mutation := newOutOfGasMutation(c.config, OpCreate)
	return &OutOfGasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OutOfGas entities.
func (c *OutOfGasClient) CreateBulk(builders ...*OutOfGasCreate) *OutOfGasCreateBulk {
	return &OutOfGasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OutOfGas.
func (c *OutOfGasClient) Update() *OutOfGasUpdate {
	mutation := newOutOfGasMutation(c.config, OpUpdate)
	return &OutOfGasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutOfGasClient) UpdateOne(oog *OutOfGas) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGas(oog))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutOfGasClient) UpdateOneID(id uint32) *OutOfGasUpdateOne {
	mutation := newOutOfGasMutation(c.config, OpUpdateOne, withOutOfGasID(id))
	return &OutOfGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OutOfGas.
func (c *OutOfGasClient) Delete() *OutOfGasDelete {
	mutation := newOutOfGasMutation(c.config, OpDelete)
	return &OutOfGasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutOfGasClient) DeleteOne(oog *OutOfGas) *OutOfGasDeleteOne {
	return c.DeleteOneID(oog.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OutOfGasClient) DeleteOneID(id uint32) *OutOfGasDeleteOne {
	builder := c.Delete().Where(outofgas.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutOfGasDeleteOne{builder}
}

// Query returns a query builder for OutOfGas.
func (c *OutOfGasClient) Query() *OutOfGasQuery {
	return &OutOfGasQuery{
		config: c.config,
	}
}

// Get returns a OutOfGas entity by its id.
func (c *OutOfGasClient) Get(ctx context.Context, id uint32) (*OutOfGas, error) {
	return c.Query().Where(outofgas.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutOfGasClient) GetX(ctx context.Context, id uint32) *OutOfGas {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OutOfGasClient) Hooks() []Hook {
	hooks := c.hooks.OutOfGas
	return append(hooks[:len(hooks):len(hooks)], outofgas.Hooks[:]...)
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uint32) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uint32) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uint32) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uint32) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	hooks := c.hooks.Payment
	return append(hooks[:len(hooks):len(hooks)], payment.Hooks[:]...)
}

// PowerRentalClient is a client for the PowerRental schema.
type PowerRentalClient struct {
	config
}

// NewPowerRentalClient returns a client for the PowerRental from the given config.
func NewPowerRentalClient(c config) *PowerRentalClient {
	return &PowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrental.Hooks(f(g(h())))`.
func (c *PowerRentalClient) Use(hooks ...Hook) {
	c.hooks.PowerRental = append(c.hooks.PowerRental, hooks...)
}

// Create returns a builder for creating a PowerRental entity.
func (c *PowerRentalClient) Create() *PowerRentalCreate {
	mutation := newPowerRentalMutation(c.config, OpCreate)
	return &PowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRental entities.
func (c *PowerRentalClient) CreateBulk(builders ...*PowerRentalCreate) *PowerRentalCreateBulk {
	return &PowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRental.
func (c *PowerRentalClient) Update() *PowerRentalUpdate {
	mutation := newPowerRentalMutation(c.config, OpUpdate)
	return &PowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalClient) UpdateOne(pr *PowerRental) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRental(pr))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalClient) UpdateOneID(id uint32) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRentalID(id))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRental.
func (c *PowerRentalClient) Delete() *PowerRentalDelete {
	mutation := newPowerRentalMutation(c.config, OpDelete)
	return &PowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalClient) DeleteOne(pr *PowerRental) *PowerRentalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PowerRentalClient) DeleteOneID(id uint32) *PowerRentalDeleteOne {
	builder := c.Delete().Where(powerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalDeleteOne{builder}
}

// Query returns a query builder for PowerRental.
func (c *PowerRentalClient) Query() *PowerRentalQuery {
	return &PowerRentalQuery{
		config: c.config,
	}
}

// Get returns a PowerRental entity by its id.
func (c *PowerRentalClient) Get(ctx context.Context, id uint32) (*PowerRental, error) {
	return c.Query().Where(powerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalClient) GetX(ctx context.Context, id uint32) *PowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.PowerRental
	return append(hooks[:len(hooks):len(hooks)], powerrental.Hooks[:]...)
}

// SimulateConfigClient is a client for the SimulateConfig schema.
type SimulateConfigClient struct {
	config
}

// NewSimulateConfigClient returns a client for the SimulateConfig from the given config.
func NewSimulateConfigClient(c config) *SimulateConfigClient {
	return &SimulateConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `simulateconfig.Hooks(f(g(h())))`.
func (c *SimulateConfigClient) Use(hooks ...Hook) {
	c.hooks.SimulateConfig = append(c.hooks.SimulateConfig, hooks...)
}

// Create returns a builder for creating a SimulateConfig entity.
func (c *SimulateConfigClient) Create() *SimulateConfigCreate {
	mutation := newSimulateConfigMutation(c.config, OpCreate)
	return &SimulateConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SimulateConfig entities.
func (c *SimulateConfigClient) CreateBulk(builders ...*SimulateConfigCreate) *SimulateConfigCreateBulk {
	return &SimulateConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SimulateConfig.
func (c *SimulateConfigClient) Update() *SimulateConfigUpdate {
	mutation := newSimulateConfigMutation(c.config, OpUpdate)
	return &SimulateConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SimulateConfigClient) UpdateOne(sc *SimulateConfig) *SimulateConfigUpdateOne {
	mutation := newSimulateConfigMutation(c.config, OpUpdateOne, withSimulateConfig(sc))
	return &SimulateConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SimulateConfigClient) UpdateOneID(id uint32) *SimulateConfigUpdateOne {
	mutation := newSimulateConfigMutation(c.config, OpUpdateOne, withSimulateConfigID(id))
	return &SimulateConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SimulateConfig.
func (c *SimulateConfigClient) Delete() *SimulateConfigDelete {
	mutation := newSimulateConfigMutation(c.config, OpDelete)
	return &SimulateConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SimulateConfigClient) DeleteOne(sc *SimulateConfig) *SimulateConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SimulateConfigClient) DeleteOneID(id uint32) *SimulateConfigDeleteOne {
	builder := c.Delete().Where(simulateconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SimulateConfigDeleteOne{builder}
}

// Query returns a query builder for SimulateConfig.
func (c *SimulateConfigClient) Query() *SimulateConfigQuery {
	return &SimulateConfigQuery{
		config: c.config,
	}
}

// Get returns a SimulateConfig entity by its id.
func (c *SimulateConfigClient) Get(ctx context.Context, id uint32) (*SimulateConfig, error) {
	return c.Query().Where(simulateconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SimulateConfigClient) GetX(ctx context.Context, id uint32) *SimulateConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SimulateConfigClient) Hooks() []Hook {
	hooks := c.hooks.SimulateConfig
	return append(hooks[:len(hooks):len(hooks)], simulateconfig.Hooks[:]...)
}
