// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorderstate"
	"github.com/google/uuid"
)

// FeeOrderState is the model entity for the FeeOrderState schema.
type FeeOrderState struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt uint32 `json:"paid_at,omitempty"`
	// UserSetPaid holds the value of the "user_set_paid" field.
	UserSetPaid bool `json:"user_set_paid,omitempty"`
	// UserSetCanceled holds the value of the "user_set_canceled" field.
	UserSetCanceled bool `json:"user_set_canceled,omitempty"`
	// AdminSetCanceled holds the value of the "admin_set_canceled" field.
	AdminSetCanceled bool `json:"admin_set_canceled,omitempty"`
	// PaymentState holds the value of the "payment_state" field.
	PaymentState string `json:"payment_state,omitempty"`
	// CancelState holds the value of the "cancel_state" field.
	CancelState string `json:"cancel_state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeeOrderState) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feeorderstate.FieldUserSetPaid, feeorderstate.FieldUserSetCanceled, feeorderstate.FieldAdminSetCanceled:
			values[i] = new(sql.NullBool)
		case feeorderstate.FieldID, feeorderstate.FieldCreatedAt, feeorderstate.FieldUpdatedAt, feeorderstate.FieldDeletedAt, feeorderstate.FieldPaidAt:
			values[i] = new(sql.NullInt64)
		case feeorderstate.FieldPaymentState, feeorderstate.FieldCancelState:
			values[i] = new(sql.NullString)
		case feeorderstate.FieldEntID, feeorderstate.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FeeOrderState", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeeOrderState fields.
func (fos *FeeOrderState) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feeorderstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fos.ID = uint32(value.Int64)
		case feeorderstate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fos.CreatedAt = uint32(value.Int64)
			}
		case feeorderstate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fos.UpdatedAt = uint32(value.Int64)
			}
		case feeorderstate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fos.DeletedAt = uint32(value.Int64)
			}
		case feeorderstate.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				fos.EntID = *value
			}
		case feeorderstate.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				fos.OrderID = *value
			}
		case feeorderstate.FieldPaidAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				fos.PaidAt = uint32(value.Int64)
			}
		case feeorderstate.FieldUserSetPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_paid", values[i])
			} else if value.Valid {
				fos.UserSetPaid = value.Bool
			}
		case feeorderstate.FieldUserSetCanceled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_canceled", values[i])
			} else if value.Valid {
				fos.UserSetCanceled = value.Bool
			}
		case feeorderstate.FieldAdminSetCanceled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin_set_canceled", values[i])
			} else if value.Valid {
				fos.AdminSetCanceled = value.Bool
			}
		case feeorderstate.FieldPaymentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_state", values[i])
			} else if value.Valid {
				fos.PaymentState = value.String
			}
		case feeorderstate.FieldCancelState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_state", values[i])
			} else if value.Valid {
				fos.CancelState = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FeeOrderState.
// Note that you need to call FeeOrderState.Unwrap() before calling this method if this FeeOrderState
// was returned from a transaction, and the transaction was committed or rolled back.
func (fos *FeeOrderState) Update() *FeeOrderStateUpdateOne {
	return (&FeeOrderStateClient{config: fos.config}).UpdateOne(fos)
}

// Unwrap unwraps the FeeOrderState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fos *FeeOrderState) Unwrap() *FeeOrderState {
	_tx, ok := fos.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeeOrderState is not a transactional entity")
	}
	fos.config.driver = _tx.drv
	return fos
}

// String implements the fmt.Stringer.
func (fos *FeeOrderState) String() string {
	var builder strings.Builder
	builder.WriteString("FeeOrderState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fos.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fos.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fos.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fos.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", fos.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", fos.OrderID))
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(fmt.Sprintf("%v", fos.PaidAt))
	builder.WriteString(", ")
	builder.WriteString("user_set_paid=")
	builder.WriteString(fmt.Sprintf("%v", fos.UserSetPaid))
	builder.WriteString(", ")
	builder.WriteString("user_set_canceled=")
	builder.WriteString(fmt.Sprintf("%v", fos.UserSetCanceled))
	builder.WriteString(", ")
	builder.WriteString("admin_set_canceled=")
	builder.WriteString(fmt.Sprintf("%v", fos.AdminSetCanceled))
	builder.WriteString(", ")
	builder.WriteString("payment_state=")
	builder.WriteString(fos.PaymentState)
	builder.WriteString(", ")
	builder.WriteString("cancel_state=")
	builder.WriteString(fos.CancelState)
	builder.WriteByte(')')
	return builder.String()
}

// FeeOrderStates is a parsable slice of FeeOrderState.
type FeeOrderStates []*FeeOrderState

func (fos FeeOrderStates) config(cfg config) {
	for _i := range fos {
		fos[_i].config = cfg
	}
}
