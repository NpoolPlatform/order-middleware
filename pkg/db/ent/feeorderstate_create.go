// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorderstate"
	"github.com/google/uuid"
)

// FeeOrderStateCreate is the builder for creating a FeeOrderState entity.
type FeeOrderStateCreate struct {
	config
	mutation *FeeOrderStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fosc *FeeOrderStateCreate) SetCreatedAt(u uint32) *FeeOrderStateCreate {
	fosc.mutation.SetCreatedAt(u)
	return fosc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableCreatedAt(u *uint32) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetCreatedAt(*u)
	}
	return fosc
}

// SetUpdatedAt sets the "updated_at" field.
func (fosc *FeeOrderStateCreate) SetUpdatedAt(u uint32) *FeeOrderStateCreate {
	fosc.mutation.SetUpdatedAt(u)
	return fosc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableUpdatedAt(u *uint32) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetUpdatedAt(*u)
	}
	return fosc
}

// SetDeletedAt sets the "deleted_at" field.
func (fosc *FeeOrderStateCreate) SetDeletedAt(u uint32) *FeeOrderStateCreate {
	fosc.mutation.SetDeletedAt(u)
	return fosc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableDeletedAt(u *uint32) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetDeletedAt(*u)
	}
	return fosc
}

// SetEntID sets the "ent_id" field.
func (fosc *FeeOrderStateCreate) SetEntID(u uuid.UUID) *FeeOrderStateCreate {
	fosc.mutation.SetEntID(u)
	return fosc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableEntID(u *uuid.UUID) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetEntID(*u)
	}
	return fosc
}

// SetOrderID sets the "order_id" field.
func (fosc *FeeOrderStateCreate) SetOrderID(u uuid.UUID) *FeeOrderStateCreate {
	fosc.mutation.SetOrderID(u)
	return fosc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableOrderID(u *uuid.UUID) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetOrderID(*u)
	}
	return fosc
}

// SetPaidAt sets the "paid_at" field.
func (fosc *FeeOrderStateCreate) SetPaidAt(u uint32) *FeeOrderStateCreate {
	fosc.mutation.SetPaidAt(u)
	return fosc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillablePaidAt(u *uint32) *FeeOrderStateCreate {
	if u != nil {
		fosc.SetPaidAt(*u)
	}
	return fosc
}

// SetUserSetPaid sets the "user_set_paid" field.
func (fosc *FeeOrderStateCreate) SetUserSetPaid(b bool) *FeeOrderStateCreate {
	fosc.mutation.SetUserSetPaid(b)
	return fosc
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableUserSetPaid(b *bool) *FeeOrderStateCreate {
	if b != nil {
		fosc.SetUserSetPaid(*b)
	}
	return fosc
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (fosc *FeeOrderStateCreate) SetUserSetCanceled(b bool) *FeeOrderStateCreate {
	fosc.mutation.SetUserSetCanceled(b)
	return fosc
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableUserSetCanceled(b *bool) *FeeOrderStateCreate {
	if b != nil {
		fosc.SetUserSetCanceled(*b)
	}
	return fosc
}

// SetPaymentState sets the "payment_state" field.
func (fosc *FeeOrderStateCreate) SetPaymentState(s string) *FeeOrderStateCreate {
	fosc.mutation.SetPaymentState(s)
	return fosc
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillablePaymentState(s *string) *FeeOrderStateCreate {
	if s != nil {
		fosc.SetPaymentState(*s)
	}
	return fosc
}

// SetCancelState sets the "cancel_state" field.
func (fosc *FeeOrderStateCreate) SetCancelState(s string) *FeeOrderStateCreate {
	fosc.mutation.SetCancelState(s)
	return fosc
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (fosc *FeeOrderStateCreate) SetNillableCancelState(s *string) *FeeOrderStateCreate {
	if s != nil {
		fosc.SetCancelState(*s)
	}
	return fosc
}

// SetID sets the "id" field.
func (fosc *FeeOrderStateCreate) SetID(u uint32) *FeeOrderStateCreate {
	fosc.mutation.SetID(u)
	return fosc
}

// Mutation returns the FeeOrderStateMutation object of the builder.
func (fosc *FeeOrderStateCreate) Mutation() *FeeOrderStateMutation {
	return fosc.mutation
}

// Save creates the FeeOrderState in the database.
func (fosc *FeeOrderStateCreate) Save(ctx context.Context) (*FeeOrderState, error) {
	var (
		err  error
		node *FeeOrderState
	)
	if err := fosc.defaults(); err != nil {
		return nil, err
	}
	if len(fosc.hooks) == 0 {
		if err = fosc.check(); err != nil {
			return nil, err
		}
		node, err = fosc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeOrderStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fosc.check(); err != nil {
				return nil, err
			}
			fosc.mutation = mutation
			if node, err = fosc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fosc.hooks) - 1; i >= 0; i-- {
			if fosc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fosc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fosc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FeeOrderState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeeOrderStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fosc *FeeOrderStateCreate) SaveX(ctx context.Context) *FeeOrderState {
	v, err := fosc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fosc *FeeOrderStateCreate) Exec(ctx context.Context) error {
	_, err := fosc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fosc *FeeOrderStateCreate) ExecX(ctx context.Context) {
	if err := fosc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fosc *FeeOrderStateCreate) defaults() error {
	if _, ok := fosc.mutation.CreatedAt(); !ok {
		if feeorderstate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := feeorderstate.DefaultCreatedAt()
		fosc.mutation.SetCreatedAt(v)
	}
	if _, ok := fosc.mutation.UpdatedAt(); !ok {
		if feeorderstate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := feeorderstate.DefaultUpdatedAt()
		fosc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fosc.mutation.DeletedAt(); !ok {
		if feeorderstate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := feeorderstate.DefaultDeletedAt()
		fosc.mutation.SetDeletedAt(v)
	}
	if _, ok := fosc.mutation.EntID(); !ok {
		if feeorderstate.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := feeorderstate.DefaultEntID()
		fosc.mutation.SetEntID(v)
	}
	if _, ok := fosc.mutation.OrderID(); !ok {
		if feeorderstate.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := feeorderstate.DefaultOrderID()
		fosc.mutation.SetOrderID(v)
	}
	if _, ok := fosc.mutation.PaidAt(); !ok {
		v := feeorderstate.DefaultPaidAt
		fosc.mutation.SetPaidAt(v)
	}
	if _, ok := fosc.mutation.UserSetPaid(); !ok {
		v := feeorderstate.DefaultUserSetPaid
		fosc.mutation.SetUserSetPaid(v)
	}
	if _, ok := fosc.mutation.UserSetCanceled(); !ok {
		v := feeorderstate.DefaultUserSetCanceled
		fosc.mutation.SetUserSetCanceled(v)
	}
	if _, ok := fosc.mutation.PaymentState(); !ok {
		v := feeorderstate.DefaultPaymentState
		fosc.mutation.SetPaymentState(v)
	}
	if _, ok := fosc.mutation.CancelState(); !ok {
		v := feeorderstate.DefaultCancelState
		fosc.mutation.SetCancelState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fosc *FeeOrderStateCreate) check() error {
	if _, ok := fosc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeeOrderState.created_at"`)}
	}
	if _, ok := fosc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeeOrderState.updated_at"`)}
	}
	if _, ok := fosc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FeeOrderState.deleted_at"`)}
	}
	if _, ok := fosc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "FeeOrderState.ent_id"`)}
	}
	return nil
}

func (fosc *FeeOrderStateCreate) sqlSave(ctx context.Context) (*FeeOrderState, error) {
	_node, _spec := fosc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fosc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (fosc *FeeOrderStateCreate) createSpec() (*FeeOrderState, *sqlgraph.CreateSpec) {
	var (
		_node = &FeeOrderState{config: fosc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feeorderstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: feeorderstate.FieldID,
			},
		}
	)
	_spec.OnConflict = fosc.conflict
	if id, ok := fosc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fosc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fosc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fosc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fosc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := fosc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := fosc.mutation.PaidAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldPaidAt,
		})
		_node.PaidAt = value
	}
	if value, ok := fosc.mutation.UserSetPaid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetPaid,
		})
		_node.UserSetPaid = value
	}
	if value, ok := fosc.mutation.UserSetCanceled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetCanceled,
		})
		_node.UserSetCanceled = value
	}
	if value, ok := fosc.mutation.PaymentState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldPaymentState,
		})
		_node.PaymentState = value
	}
	if value, ok := fosc.mutation.CancelState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldCancelState,
		})
		_node.CancelState = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeeOrderState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeOrderStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fosc *FeeOrderStateCreate) OnConflict(opts ...sql.ConflictOption) *FeeOrderStateUpsertOne {
	fosc.conflict = opts
	return &FeeOrderStateUpsertOne{
		create: fosc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeeOrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fosc *FeeOrderStateCreate) OnConflictColumns(columns ...string) *FeeOrderStateUpsertOne {
	fosc.conflict = append(fosc.conflict, sql.ConflictColumns(columns...))
	return &FeeOrderStateUpsertOne{
		create: fosc,
	}
}

type (
	// FeeOrderStateUpsertOne is the builder for "upsert"-ing
	//  one FeeOrderState node.
	FeeOrderStateUpsertOne struct {
		create *FeeOrderStateCreate
	}

	// FeeOrderStateUpsert is the "OnConflict" setter.
	FeeOrderStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderStateUpsert) SetCreatedAt(v uint32) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateCreatedAt() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderStateUpsert) AddCreatedAt(v uint32) *FeeOrderStateUpsert {
	u.Add(feeorderstate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderStateUpsert) SetUpdatedAt(v uint32) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateUpdatedAt() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderStateUpsert) AddUpdatedAt(v uint32) *FeeOrderStateUpsert {
	u.Add(feeorderstate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderStateUpsert) SetDeletedAt(v uint32) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateDeletedAt() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderStateUpsert) AddDeletedAt(v uint32) *FeeOrderStateUpsert {
	u.Add(feeorderstate.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderStateUpsert) SetEntID(v uuid.UUID) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateEntID() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderStateUpsert) SetOrderID(v uuid.UUID) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateOrderID() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderStateUpsert) ClearOrderID() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldOrderID)
	return u
}

// SetPaidAt sets the "paid_at" field.
func (u *FeeOrderStateUpsert) SetPaidAt(v uint32) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldPaidAt, v)
	return u
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdatePaidAt() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldPaidAt)
	return u
}

// AddPaidAt adds v to the "paid_at" field.
func (u *FeeOrderStateUpsert) AddPaidAt(v uint32) *FeeOrderStateUpsert {
	u.Add(feeorderstate.FieldPaidAt, v)
	return u
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *FeeOrderStateUpsert) ClearPaidAt() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldPaidAt)
	return u
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *FeeOrderStateUpsert) SetUserSetPaid(v bool) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldUserSetPaid, v)
	return u
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateUserSetPaid() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldUserSetPaid)
	return u
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *FeeOrderStateUpsert) ClearUserSetPaid() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldUserSetPaid)
	return u
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *FeeOrderStateUpsert) SetUserSetCanceled(v bool) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldUserSetCanceled, v)
	return u
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateUserSetCanceled() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldUserSetCanceled)
	return u
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *FeeOrderStateUpsert) ClearUserSetCanceled() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldUserSetCanceled)
	return u
}

// SetPaymentState sets the "payment_state" field.
func (u *FeeOrderStateUpsert) SetPaymentState(v string) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldPaymentState, v)
	return u
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdatePaymentState() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldPaymentState)
	return u
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *FeeOrderStateUpsert) ClearPaymentState() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldPaymentState)
	return u
}

// SetCancelState sets the "cancel_state" field.
func (u *FeeOrderStateUpsert) SetCancelState(v string) *FeeOrderStateUpsert {
	u.Set(feeorderstate.FieldCancelState, v)
	return u
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsert) UpdateCancelState() *FeeOrderStateUpsert {
	u.SetExcluded(feeorderstate.FieldCancelState)
	return u
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *FeeOrderStateUpsert) ClearCancelState() *FeeOrderStateUpsert {
	u.SetNull(feeorderstate.FieldCancelState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FeeOrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feeorderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeOrderStateUpsertOne) UpdateNewValues() *FeeOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feeorderstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FeeOrderState.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FeeOrderStateUpsertOne) Ignore() *FeeOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeOrderStateUpsertOne) DoNothing() *FeeOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeOrderStateCreate.OnConflict
// documentation for more info.
func (u *FeeOrderStateUpsertOne) Update(set func(*FeeOrderStateUpsert)) *FeeOrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeOrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderStateUpsertOne) SetCreatedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderStateUpsertOne) AddCreatedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateCreatedAt() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderStateUpsertOne) SetUpdatedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderStateUpsertOne) AddUpdatedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateUpdatedAt() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderStateUpsertOne) SetDeletedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderStateUpsertOne) AddDeletedAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateDeletedAt() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderStateUpsertOne) SetEntID(v uuid.UUID) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateEntID() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderStateUpsertOne) SetOrderID(v uuid.UUID) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateOrderID() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderStateUpsertOne) ClearOrderID() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearOrderID()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *FeeOrderStateUpsertOne) SetPaidAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *FeeOrderStateUpsertOne) AddPaidAt(v uint32) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdatePaidAt() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *FeeOrderStateUpsertOne) ClearPaidAt() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *FeeOrderStateUpsertOne) SetUserSetPaid(v bool) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateUserSetPaid() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *FeeOrderStateUpsertOne) ClearUserSetPaid() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *FeeOrderStateUpsertOne) SetUserSetCanceled(v bool) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateUserSetCanceled() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *FeeOrderStateUpsertOne) ClearUserSetCanceled() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *FeeOrderStateUpsertOne) SetPaymentState(v string) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdatePaymentState() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *FeeOrderStateUpsertOne) ClearPaymentState() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *FeeOrderStateUpsertOne) SetCancelState(v string) *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsertOne) UpdateCancelState() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *FeeOrderStateUpsertOne) ClearCancelState() *FeeOrderStateUpsertOne {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearCancelState()
	})
}

// Exec executes the query.
func (u *FeeOrderStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeOrderStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeOrderStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeeOrderStateUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeeOrderStateUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeeOrderStateCreateBulk is the builder for creating many FeeOrderState entities in bulk.
type FeeOrderStateCreateBulk struct {
	config
	builders []*FeeOrderStateCreate
	conflict []sql.ConflictOption
}

// Save creates the FeeOrderState entities in the database.
func (foscb *FeeOrderStateCreateBulk) Save(ctx context.Context) ([]*FeeOrderState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(foscb.builders))
	nodes := make([]*FeeOrderState, len(foscb.builders))
	mutators := make([]Mutator, len(foscb.builders))
	for i := range foscb.builders {
		func(i int, root context.Context) {
			builder := foscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeOrderStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, foscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = foscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, foscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, foscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (foscb *FeeOrderStateCreateBulk) SaveX(ctx context.Context) []*FeeOrderState {
	v, err := foscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (foscb *FeeOrderStateCreateBulk) Exec(ctx context.Context) error {
	_, err := foscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (foscb *FeeOrderStateCreateBulk) ExecX(ctx context.Context) {
	if err := foscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeeOrderState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeOrderStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (foscb *FeeOrderStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeeOrderStateUpsertBulk {
	foscb.conflict = opts
	return &FeeOrderStateUpsertBulk{
		create: foscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeeOrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (foscb *FeeOrderStateCreateBulk) OnConflictColumns(columns ...string) *FeeOrderStateUpsertBulk {
	foscb.conflict = append(foscb.conflict, sql.ConflictColumns(columns...))
	return &FeeOrderStateUpsertBulk{
		create: foscb,
	}
}

// FeeOrderStateUpsertBulk is the builder for "upsert"-ing
// a bulk of FeeOrderState nodes.
type FeeOrderStateUpsertBulk struct {
	create *FeeOrderStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeeOrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feeorderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeOrderStateUpsertBulk) UpdateNewValues() *FeeOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feeorderstate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeeOrderState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FeeOrderStateUpsertBulk) Ignore() *FeeOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeOrderStateUpsertBulk) DoNothing() *FeeOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeOrderStateCreateBulk.OnConflict
// documentation for more info.
func (u *FeeOrderStateUpsertBulk) Update(set func(*FeeOrderStateUpsert)) *FeeOrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeOrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderStateUpsertBulk) SetCreatedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderStateUpsertBulk) AddCreatedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateCreatedAt() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderStateUpsertBulk) SetUpdatedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderStateUpsertBulk) AddUpdatedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateUpdatedAt() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderStateUpsertBulk) SetDeletedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderStateUpsertBulk) AddDeletedAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateDeletedAt() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderStateUpsertBulk) SetEntID(v uuid.UUID) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateEntID() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderStateUpsertBulk) SetOrderID(v uuid.UUID) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateOrderID() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderStateUpsertBulk) ClearOrderID() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearOrderID()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *FeeOrderStateUpsertBulk) SetPaidAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *FeeOrderStateUpsertBulk) AddPaidAt(v uint32) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdatePaidAt() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *FeeOrderStateUpsertBulk) ClearPaidAt() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *FeeOrderStateUpsertBulk) SetUserSetPaid(v bool) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateUserSetPaid() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *FeeOrderStateUpsertBulk) ClearUserSetPaid() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *FeeOrderStateUpsertBulk) SetUserSetCanceled(v bool) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateUserSetCanceled() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *FeeOrderStateUpsertBulk) ClearUserSetCanceled() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *FeeOrderStateUpsertBulk) SetPaymentState(v string) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdatePaymentState() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *FeeOrderStateUpsertBulk) ClearPaymentState() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *FeeOrderStateUpsertBulk) SetCancelState(v string) *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *FeeOrderStateUpsertBulk) UpdateCancelState() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *FeeOrderStateUpsertBulk) ClearCancelState() *FeeOrderStateUpsertBulk {
	return u.Update(func(s *FeeOrderStateUpsert) {
		s.ClearCancelState()
	})
}

// Exec executes the query.
func (u *FeeOrderStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeeOrderStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeOrderStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeOrderStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
