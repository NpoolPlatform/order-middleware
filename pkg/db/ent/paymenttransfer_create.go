// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymenttransfer"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentTransferCreate is the builder for creating a PaymentTransfer entity.
type PaymentTransferCreate struct {
	config
	mutation *PaymentTransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptc *PaymentTransferCreate) SetCreatedAt(u uint32) *PaymentTransferCreate {
	ptc.mutation.SetCreatedAt(u)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableCreatedAt(u *uint32) *PaymentTransferCreate {
	if u != nil {
		ptc.SetCreatedAt(*u)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *PaymentTransferCreate) SetUpdatedAt(u uint32) *PaymentTransferCreate {
	ptc.mutation.SetUpdatedAt(u)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableUpdatedAt(u *uint32) *PaymentTransferCreate {
	if u != nil {
		ptc.SetUpdatedAt(*u)
	}
	return ptc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *PaymentTransferCreate) SetDeletedAt(u uint32) *PaymentTransferCreate {
	ptc.mutation.SetDeletedAt(u)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableDeletedAt(u *uint32) *PaymentTransferCreate {
	if u != nil {
		ptc.SetDeletedAt(*u)
	}
	return ptc
}

// SetEntID sets the "ent_id" field.
func (ptc *PaymentTransferCreate) SetEntID(u uuid.UUID) *PaymentTransferCreate {
	ptc.mutation.SetEntID(u)
	return ptc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableEntID(u *uuid.UUID) *PaymentTransferCreate {
	if u != nil {
		ptc.SetEntID(*u)
	}
	return ptc
}

// SetOrderID sets the "order_id" field.
func (ptc *PaymentTransferCreate) SetOrderID(u uuid.UUID) *PaymentTransferCreate {
	ptc.mutation.SetOrderID(u)
	return ptc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableOrderID(u *uuid.UUID) *PaymentTransferCreate {
	if u != nil {
		ptc.SetOrderID(*u)
	}
	return ptc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ptc *PaymentTransferCreate) SetCoinTypeID(u uuid.UUID) *PaymentTransferCreate {
	ptc.mutation.SetCoinTypeID(u)
	return ptc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableCoinTypeID(u *uuid.UUID) *PaymentTransferCreate {
	if u != nil {
		ptc.SetCoinTypeID(*u)
	}
	return ptc
}

// SetAccountID sets the "account_id" field.
func (ptc *PaymentTransferCreate) SetAccountID(u uuid.UUID) *PaymentTransferCreate {
	ptc.mutation.SetAccountID(u)
	return ptc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableAccountID(u *uuid.UUID) *PaymentTransferCreate {
	if u != nil {
		ptc.SetAccountID(*u)
	}
	return ptc
}

// SetAmount sets the "amount" field.
func (ptc *PaymentTransferCreate) SetAmount(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetAmount(d)
	return ptc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableAmount(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetAmount(*d)
	}
	return ptc
}

// SetStartAmount sets the "start_amount" field.
func (ptc *PaymentTransferCreate) SetStartAmount(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetStartAmount(d)
	return ptc
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableStartAmount(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetStartAmount(*d)
	}
	return ptc
}

// SetTransactionID sets the "transaction_id" field.
func (ptc *PaymentTransferCreate) SetTransactionID(s string) *PaymentTransferCreate {
	ptc.mutation.SetTransactionID(s)
	return ptc
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableTransactionID(s *string) *PaymentTransferCreate {
	if s != nil {
		ptc.SetTransactionID(*s)
	}
	return ptc
}

// SetFinishAmount sets the "finish_amount" field.
func (ptc *PaymentTransferCreate) SetFinishAmount(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetFinishAmount(d)
	return ptc
}

// SetNillableFinishAmount sets the "finish_amount" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableFinishAmount(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetFinishAmount(*d)
	}
	return ptc
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (ptc *PaymentTransferCreate) SetCoinUsdCurrency(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetCoinUsdCurrency(d)
	return ptc
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetCoinUsdCurrency(*d)
	}
	return ptc
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (ptc *PaymentTransferCreate) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetLocalCoinUsdCurrency(d)
	return ptc
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetLocalCoinUsdCurrency(*d)
	}
	return ptc
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (ptc *PaymentTransferCreate) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentTransferCreate {
	ptc.mutation.SetLiveCoinUsdCurrency(d)
	return ptc
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (ptc *PaymentTransferCreate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentTransferCreate {
	if d != nil {
		ptc.SetLiveCoinUsdCurrency(*d)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PaymentTransferCreate) SetID(u uint32) *PaymentTransferCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// Mutation returns the PaymentTransferMutation object of the builder.
func (ptc *PaymentTransferCreate) Mutation() *PaymentTransferMutation {
	return ptc.mutation
}

// Save creates the PaymentTransfer in the database.
func (ptc *PaymentTransferCreate) Save(ctx context.Context) (*PaymentTransfer, error) {
	var (
		err  error
		node *PaymentTransfer
	)
	if err := ptc.defaults(); err != nil {
		return nil, err
	}
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ptc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PaymentTransfer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentTransferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PaymentTransferCreate) SaveX(ctx context.Context) *PaymentTransfer {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PaymentTransferCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PaymentTransferCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PaymentTransferCreate) defaults() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		if paymenttransfer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		if paymenttransfer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultUpdatedAt()
		ptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptc.mutation.DeletedAt(); !ok {
		if paymenttransfer.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultDeletedAt()
		ptc.mutation.SetDeletedAt(v)
	}
	if _, ok := ptc.mutation.EntID(); !ok {
		if paymenttransfer.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultEntID()
		ptc.mutation.SetEntID(v)
	}
	if _, ok := ptc.mutation.OrderID(); !ok {
		if paymenttransfer.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultOrderID()
		ptc.mutation.SetOrderID(v)
	}
	if _, ok := ptc.mutation.CoinTypeID(); !ok {
		if paymenttransfer.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultCoinTypeID()
		ptc.mutation.SetCoinTypeID(v)
	}
	if _, ok := ptc.mutation.AccountID(); !ok {
		if paymenttransfer.DefaultAccountID == nil {
			return fmt.Errorf("ent: uninitialized paymenttransfer.DefaultAccountID (forgotten import ent/runtime?)")
		}
		v := paymenttransfer.DefaultAccountID()
		ptc.mutation.SetAccountID(v)
	}
	if _, ok := ptc.mutation.Amount(); !ok {
		v := paymenttransfer.DefaultAmount
		ptc.mutation.SetAmount(v)
	}
	if _, ok := ptc.mutation.StartAmount(); !ok {
		v := paymenttransfer.DefaultStartAmount
		ptc.mutation.SetStartAmount(v)
	}
	if _, ok := ptc.mutation.TransactionID(); !ok {
		v := paymenttransfer.DefaultTransactionID
		ptc.mutation.SetTransactionID(v)
	}
	if _, ok := ptc.mutation.FinishAmount(); !ok {
		v := paymenttransfer.DefaultFinishAmount
		ptc.mutation.SetFinishAmount(v)
	}
	if _, ok := ptc.mutation.CoinUsdCurrency(); !ok {
		v := paymenttransfer.DefaultCoinUsdCurrency
		ptc.mutation.SetCoinUsdCurrency(v)
	}
	if _, ok := ptc.mutation.LocalCoinUsdCurrency(); !ok {
		v := paymenttransfer.DefaultLocalCoinUsdCurrency
		ptc.mutation.SetLocalCoinUsdCurrency(v)
	}
	if _, ok := ptc.mutation.LiveCoinUsdCurrency(); !ok {
		v := paymenttransfer.DefaultLiveCoinUsdCurrency
		ptc.mutation.SetLiveCoinUsdCurrency(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PaymentTransferCreate) check() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentTransfer.created_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentTransfer.updated_at"`)}
	}
	if _, ok := ptc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PaymentTransfer.deleted_at"`)}
	}
	if _, ok := ptc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "PaymentTransfer.ent_id"`)}
	}
	return nil
}

func (ptc *PaymentTransferCreate) sqlSave(ctx context.Context) (*PaymentTransfer, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ptc *PaymentTransferCreate) createSpec() (*PaymentTransfer, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentTransfer{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymenttransfer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymenttransfer.FieldID,
			},
		}
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymenttransfer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymenttransfer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymenttransfer.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ptc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymenttransfer.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ptc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymenttransfer.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := ptc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymenttransfer.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := ptc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymenttransfer.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := ptc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := ptc.mutation.StartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldStartAmount,
		})
		_node.StartAmount = value
	}
	if value, ok := ptc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttransfer.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := ptc.mutation.FinishAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldFinishAmount,
		})
		_node.FinishAmount = value
	}
	if value, ok := ptc.mutation.CoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldCoinUsdCurrency,
		})
		_node.CoinUsdCurrency = value
	}
	if value, ok := ptc.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldLocalCoinUsdCurrency,
		})
		_node.LocalCoinUsdCurrency = value
	}
	if value, ok := ptc.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: paymenttransfer.FieldLiveCoinUsdCurrency,
		})
		_node.LiveCoinUsdCurrency = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentTransfer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptc *PaymentTransferCreate) OnConflict(opts ...sql.ConflictOption) *PaymentTransferUpsertOne {
	ptc.conflict = opts
	return &PaymentTransferUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptc *PaymentTransferCreate) OnConflictColumns(columns ...string) *PaymentTransferUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &PaymentTransferUpsertOne{
		create: ptc,
	}
}

type (
	// PaymentTransferUpsertOne is the builder for "upsert"-ing
	//  one PaymentTransfer node.
	PaymentTransferUpsertOne struct {
		create *PaymentTransferCreate
	}

	// PaymentTransferUpsert is the "OnConflict" setter.
	PaymentTransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTransferUpsert) SetCreatedAt(v uint32) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateCreatedAt() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentTransferUpsert) AddCreatedAt(v uint32) *PaymentTransferUpsert {
	u.Add(paymenttransfer.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTransferUpsert) SetUpdatedAt(v uint32) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateUpdatedAt() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentTransferUpsert) AddUpdatedAt(v uint32) *PaymentTransferUpsert {
	u.Add(paymenttransfer.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentTransferUpsert) SetDeletedAt(v uint32) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateDeletedAt() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentTransferUpsert) AddDeletedAt(v uint32) *PaymentTransferUpsert {
	u.Add(paymenttransfer.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PaymentTransferUpsert) SetEntID(v uuid.UUID) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateEntID() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PaymentTransferUpsert) SetOrderID(v uuid.UUID) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateOrderID() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PaymentTransferUpsert) ClearOrderID() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldOrderID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentTransferUpsert) SetCoinTypeID(v uuid.UUID) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateCoinTypeID() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentTransferUpsert) ClearCoinTypeID() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PaymentTransferUpsert) SetAccountID(v uuid.UUID) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateAccountID() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentTransferUpsert) ClearAccountID() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldAccountID)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentTransferUpsert) SetAmount(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateAmount() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentTransferUpsert) ClearAmount() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldAmount)
	return u
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentTransferUpsert) SetStartAmount(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldStartAmount, v)
	return u
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateStartAmount() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldStartAmount)
	return u
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentTransferUpsert) ClearStartAmount() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldStartAmount)
	return u
}

// SetTransactionID sets the "transaction_id" field.
func (u *PaymentTransferUpsert) SetTransactionID(v string) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateTransactionID() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldTransactionID)
	return u
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (u *PaymentTransferUpsert) ClearTransactionID() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldTransactionID)
	return u
}

// SetFinishAmount sets the "finish_amount" field.
func (u *PaymentTransferUpsert) SetFinishAmount(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldFinishAmount, v)
	return u
}

// UpdateFinishAmount sets the "finish_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateFinishAmount() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldFinishAmount)
	return u
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (u *PaymentTransferUpsert) ClearFinishAmount() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldFinishAmount)
	return u
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentTransferUpsert) SetCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldCoinUsdCurrency, v)
	return u
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldCoinUsdCurrency)
	return u
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentTransferUpsert) ClearCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldCoinUsdCurrency)
	return u
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsert) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldLocalCoinUsdCurrency, v)
	return u
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateLocalCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldLocalCoinUsdCurrency)
	return u
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsert) ClearLocalCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldLocalCoinUsdCurrency)
	return u
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsert) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsert {
	u.Set(paymenttransfer.FieldLiveCoinUsdCurrency, v)
	return u
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsert) UpdateLiveCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetExcluded(paymenttransfer.FieldLiveCoinUsdCurrency)
	return u
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsert) ClearLiveCoinUsdCurrency() *PaymentTransferUpsert {
	u.SetNull(paymenttransfer.FieldLiveCoinUsdCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttransfer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTransferUpsertOne) UpdateNewValues() *PaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymenttransfer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentTransfer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentTransferUpsertOne) Ignore() *PaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTransferUpsertOne) DoNothing() *PaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTransferCreate.OnConflict
// documentation for more info.
func (u *PaymentTransferUpsertOne) Update(set func(*PaymentTransferUpsert)) *PaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTransferUpsertOne) SetCreatedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentTransferUpsertOne) AddCreatedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateCreatedAt() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTransferUpsertOne) SetUpdatedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentTransferUpsertOne) AddUpdatedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateUpdatedAt() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentTransferUpsertOne) SetDeletedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentTransferUpsertOne) AddDeletedAt(v uint32) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateDeletedAt() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentTransferUpsertOne) SetEntID(v uuid.UUID) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateEntID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PaymentTransferUpsertOne) SetOrderID(v uuid.UUID) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateOrderID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PaymentTransferUpsertOne) ClearOrderID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentTransferUpsertOne) SetCoinTypeID(v uuid.UUID) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateCoinTypeID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentTransferUpsertOne) ClearCoinTypeID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentTransferUpsertOne) SetAccountID(v uuid.UUID) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateAccountID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentTransferUpsertOne) ClearAccountID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearAccountID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentTransferUpsertOne) SetAmount(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentTransferUpsertOne) ClearAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearAmount()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentTransferUpsertOne) SetStartAmount(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateStartAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentTransferUpsertOne) ClearStartAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearStartAmount()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *PaymentTransferUpsertOne) SetTransactionID(v string) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateTransactionID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateTransactionID()
	})
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (u *PaymentTransferUpsertOne) ClearTransactionID() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearTransactionID()
	})
}

// SetFinishAmount sets the "finish_amount" field.
func (u *PaymentTransferUpsertOne) SetFinishAmount(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetFinishAmount(v)
	})
}

// UpdateFinishAmount sets the "finish_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateFinishAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateFinishAmount()
	})
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (u *PaymentTransferUpsertOne) ClearFinishAmount() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearFinishAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) SetCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) ClearCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateLocalCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) ClearLocalCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertOne) UpdateLiveCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsertOne) ClearLiveCoinUsdCurrency() *PaymentTransferUpsertOne {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentTransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentTransferUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentTransferUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentTransferCreateBulk is the builder for creating many PaymentTransfer entities in bulk.
type PaymentTransferCreateBulk struct {
	config
	builders []*PaymentTransferCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentTransfer entities in the database.
func (ptcb *PaymentTransferCreateBulk) Save(ctx context.Context) ([]*PaymentTransfer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PaymentTransfer, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentTransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PaymentTransferCreateBulk) SaveX(ctx context.Context) []*PaymentTransfer {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PaymentTransferCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PaymentTransferCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentTransfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptcb *PaymentTransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentTransferUpsertBulk {
	ptcb.conflict = opts
	return &PaymentTransferUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptcb *PaymentTransferCreateBulk) OnConflictColumns(columns ...string) *PaymentTransferUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentTransferUpsertBulk{
		create: ptcb,
	}
}

// PaymentTransferUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentTransfer nodes.
type PaymentTransferUpsertBulk struct {
	create *PaymentTransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttransfer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTransferUpsertBulk) UpdateNewValues() *PaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymenttransfer.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentTransfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentTransferUpsertBulk) Ignore() *PaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTransferUpsertBulk) DoNothing() *PaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTransferCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentTransferUpsertBulk) Update(set func(*PaymentTransferUpsert)) *PaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTransferUpsertBulk) SetCreatedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentTransferUpsertBulk) AddCreatedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateCreatedAt() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTransferUpsertBulk) SetUpdatedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentTransferUpsertBulk) AddUpdatedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateUpdatedAt() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentTransferUpsertBulk) SetDeletedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentTransferUpsertBulk) AddDeletedAt(v uint32) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateDeletedAt() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PaymentTransferUpsertBulk) SetEntID(v uuid.UUID) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateEntID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PaymentTransferUpsertBulk) SetOrderID(v uuid.UUID) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateOrderID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PaymentTransferUpsertBulk) ClearOrderID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentTransferUpsertBulk) SetCoinTypeID(v uuid.UUID) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateCoinTypeID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *PaymentTransferUpsertBulk) ClearCoinTypeID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentTransferUpsertBulk) SetAccountID(v uuid.UUID) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateAccountID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PaymentTransferUpsertBulk) ClearAccountID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearAccountID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentTransferUpsertBulk) SetAmount(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentTransferUpsertBulk) ClearAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearAmount()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentTransferUpsertBulk) SetStartAmount(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateStartAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentTransferUpsertBulk) ClearStartAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearStartAmount()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *PaymentTransferUpsertBulk) SetTransactionID(v string) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateTransactionID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateTransactionID()
	})
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (u *PaymentTransferUpsertBulk) ClearTransactionID() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearTransactionID()
	})
}

// SetFinishAmount sets the "finish_amount" field.
func (u *PaymentTransferUpsertBulk) SetFinishAmount(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetFinishAmount(v)
	})
}

// UpdateFinishAmount sets the "finish_amount" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateFinishAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateFinishAmount()
	})
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (u *PaymentTransferUpsertBulk) ClearFinishAmount() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearFinishAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) SetCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) ClearCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateLocalCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) ClearLocalCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentTransferUpsertBulk) UpdateLiveCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentTransferUpsertBulk) ClearLiveCoinUsdCurrency() *PaymentTransferUpsertBulk {
	return u.Update(func(s *PaymentTransferUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentTransferUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentTransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
