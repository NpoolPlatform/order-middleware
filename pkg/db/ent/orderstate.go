// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderState is the model entity for the OrderState schema.
type OrderState struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// OrderState holds the value of the "order_state" field.
	OrderState string `json:"order_state,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
	// LastBenefitAt holds the value of the "last_benefit_at" field.
	LastBenefitAt uint32 `json:"last_benefit_at,omitempty"`
	// BenefitState holds the value of the "benefit_state" field.
	BenefitState string `json:"benefit_state,omitempty"`
	// UserSetPaid holds the value of the "user_set_paid" field.
	UserSetPaid bool `json:"user_set_paid,omitempty"`
	// UserSetCancelled holds the value of the "user_set_cancelled" field.
	UserSetCancelled bool `json:"user_set_cancelled,omitempty"`
	// PaymentTransactionID holds the value of the "payment_transaction_id" field.
	PaymentTransactionID string `json:"payment_transaction_id,omitempty"`
	// PaymentFinishAmount holds the value of the "payment_finish_amount" field.
	PaymentFinishAmount decimal.Decimal `json:"payment_finish_amount,omitempty"`
	// PaymentState holds the value of the "payment_state" field.
	PaymentState string `json:"payment_state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderState) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderstate.FieldPaymentFinishAmount:
			values[i] = new(decimal.Decimal)
		case orderstate.FieldUserSetPaid, orderstate.FieldUserSetCancelled:
			values[i] = new(sql.NullBool)
		case orderstate.FieldCreatedAt, orderstate.FieldUpdatedAt, orderstate.FieldDeletedAt, orderstate.FieldEndAt, orderstate.FieldLastBenefitAt:
			values[i] = new(sql.NullInt64)
		case orderstate.FieldOrderState, orderstate.FieldBenefitState, orderstate.FieldPaymentTransactionID, orderstate.FieldPaymentState:
			values[i] = new(sql.NullString)
		case orderstate.FieldID, orderstate.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderState", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderState fields.
func (os *OrderState) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderstate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				os.ID = *value
			}
		case orderstate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = uint32(value.Int64)
			}
		case orderstate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = uint32(value.Int64)
			}
		case orderstate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				os.DeletedAt = uint32(value.Int64)
			}
		case orderstate.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				os.OrderID = *value
			}
		case orderstate.FieldOrderState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_state", values[i])
			} else if value.Valid {
				os.OrderState = value.String
			}
		case orderstate.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				os.EndAt = uint32(value.Int64)
			}
		case orderstate.FieldLastBenefitAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_benefit_at", values[i])
			} else if value.Valid {
				os.LastBenefitAt = uint32(value.Int64)
			}
		case orderstate.FieldBenefitState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_state", values[i])
			} else if value.Valid {
				os.BenefitState = value.String
			}
		case orderstate.FieldUserSetPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_paid", values[i])
			} else if value.Valid {
				os.UserSetPaid = value.Bool
			}
		case orderstate.FieldUserSetCancelled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field user_set_cancelled", values[i])
			} else if value.Valid {
				os.UserSetCancelled = value.Bool
			}
		case orderstate.FieldPaymentTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_transaction_id", values[i])
			} else if value.Valid {
				os.PaymentTransactionID = value.String
			}
		case orderstate.FieldPaymentFinishAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field payment_finish_amount", values[i])
			} else if value != nil {
				os.PaymentFinishAmount = *value
			}
		case orderstate.FieldPaymentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_state", values[i])
			} else if value.Valid {
				os.PaymentState = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderState.
// Note that you need to call OrderState.Unwrap() before calling this method if this OrderState
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderState) Update() *OrderStateUpdateOne {
	return (&OrderStateClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OrderState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderState) Unwrap() *OrderState {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderState is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderState) String() string {
	var builder strings.Builder
	builder.WriteString("OrderState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", os.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", os.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", os.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_state=")
	builder.WriteString(os.OrderState)
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", os.EndAt))
	builder.WriteString(", ")
	builder.WriteString("last_benefit_at=")
	builder.WriteString(fmt.Sprintf("%v", os.LastBenefitAt))
	builder.WriteString(", ")
	builder.WriteString("benefit_state=")
	builder.WriteString(os.BenefitState)
	builder.WriteString(", ")
	builder.WriteString("user_set_paid=")
	builder.WriteString(fmt.Sprintf("%v", os.UserSetPaid))
	builder.WriteString(", ")
	builder.WriteString("user_set_cancelled=")
	builder.WriteString(fmt.Sprintf("%v", os.UserSetCancelled))
	builder.WriteString(", ")
	builder.WriteString("payment_transaction_id=")
	builder.WriteString(os.PaymentTransactionID)
	builder.WriteString(", ")
	builder.WriteString("payment_finish_amount=")
	builder.WriteString(fmt.Sprintf("%v", os.PaymentFinishAmount))
	builder.WriteString(", ")
	builder.WriteString("payment_state=")
	builder.WriteString(os.PaymentState)
	builder.WriteByte(')')
	return builder.String()
}

// OrderStates is a parsable slice of OrderState.
type OrderStates []*OrderState

func (os OrderStates) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
