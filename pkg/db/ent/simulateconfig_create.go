// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/simulateconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateConfigCreate is the builder for creating a SimulateConfig entity.
type SimulateConfigCreate struct {
	config
	mutation *SimulateConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (scc *SimulateConfigCreate) SetCreatedAt(u uint32) *SimulateConfigCreate {
	scc.mutation.SetCreatedAt(u)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableCreatedAt(u *uint32) *SimulateConfigCreate {
	if u != nil {
		scc.SetCreatedAt(*u)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *SimulateConfigCreate) SetUpdatedAt(u uint32) *SimulateConfigCreate {
	scc.mutation.SetUpdatedAt(u)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableUpdatedAt(u *uint32) *SimulateConfigCreate {
	if u != nil {
		scc.SetUpdatedAt(*u)
	}
	return scc
}

// SetDeletedAt sets the "deleted_at" field.
func (scc *SimulateConfigCreate) SetDeletedAt(u uint32) *SimulateConfigCreate {
	scc.mutation.SetDeletedAt(u)
	return scc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableDeletedAt(u *uint32) *SimulateConfigCreate {
	if u != nil {
		scc.SetDeletedAt(*u)
	}
	return scc
}

// SetEntID sets the "ent_id" field.
func (scc *SimulateConfigCreate) SetEntID(u uuid.UUID) *SimulateConfigCreate {
	scc.mutation.SetEntID(u)
	return scc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableEntID(u *uuid.UUID) *SimulateConfigCreate {
	if u != nil {
		scc.SetEntID(*u)
	}
	return scc
}

// SetAppID sets the "app_id" field.
func (scc *SimulateConfigCreate) SetAppID(u uuid.UUID) *SimulateConfigCreate {
	scc.mutation.SetAppID(u)
	return scc
}

// SetUnits sets the "units" field.
func (scc *SimulateConfigCreate) SetUnits(d decimal.Decimal) *SimulateConfigCreate {
	scc.mutation.SetUnits(d)
	return scc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableUnits(d *decimal.Decimal) *SimulateConfigCreate {
	if d != nil {
		scc.SetUnits(*d)
	}
	return scc
}

// SetDuration sets the "duration" field.
func (scc *SimulateConfigCreate) SetDuration(u uint32) *SimulateConfigCreate {
	scc.mutation.SetDuration(u)
	return scc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableDuration(u *uint32) *SimulateConfigCreate {
	if u != nil {
		scc.SetDuration(*u)
	}
	return scc
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (scc *SimulateConfigCreate) SetSendCouponMode(s string) *SimulateConfigCreate {
	scc.mutation.SetSendCouponMode(s)
	return scc
}

// SetNillableSendCouponMode sets the "send_coupon_mode" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableSendCouponMode(s *string) *SimulateConfigCreate {
	if s != nil {
		scc.SetSendCouponMode(*s)
	}
	return scc
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (scc *SimulateConfigCreate) SetSendCouponProbability(d decimal.Decimal) *SimulateConfigCreate {
	scc.mutation.SetSendCouponProbability(d)
	return scc
}

// SetNillableSendCouponProbability sets the "send_coupon_probability" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableSendCouponProbability(d *decimal.Decimal) *SimulateConfigCreate {
	if d != nil {
		scc.SetSendCouponProbability(*d)
	}
	return scc
}

// SetEnabled sets the "enabled" field.
func (scc *SimulateConfigCreate) SetEnabled(b bool) *SimulateConfigCreate {
	scc.mutation.SetEnabled(b)
	return scc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (scc *SimulateConfigCreate) SetNillableEnabled(b *bool) *SimulateConfigCreate {
	if b != nil {
		scc.SetEnabled(*b)
	}
	return scc
}

// SetID sets the "id" field.
func (scc *SimulateConfigCreate) SetID(u uint32) *SimulateConfigCreate {
	scc.mutation.SetID(u)
	return scc
}

// Mutation returns the SimulateConfigMutation object of the builder.
func (scc *SimulateConfigCreate) Mutation() *SimulateConfigMutation {
	return scc.mutation
}

// Save creates the SimulateConfig in the database.
func (scc *SimulateConfigCreate) Save(ctx context.Context) (*SimulateConfig, error) {
	var (
		err  error
		node *SimulateConfig
	)
	if err := scc.defaults(); err != nil {
		return nil, err
	}
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			if node, err = scc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			if scc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, scc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SimulateConfigCreate) SaveX(ctx context.Context) *SimulateConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SimulateConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SimulateConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SimulateConfigCreate) defaults() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		if simulateconfig.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := simulateconfig.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		if simulateconfig.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateconfig.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.DeletedAt(); !ok {
		if simulateconfig.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := simulateconfig.DefaultDeletedAt()
		scc.mutation.SetDeletedAt(v)
	}
	if _, ok := scc.mutation.EntID(); !ok {
		if simulateconfig.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := simulateconfig.DefaultEntID()
		scc.mutation.SetEntID(v)
	}
	if _, ok := scc.mutation.Units(); !ok {
		v := simulateconfig.DefaultUnits
		scc.mutation.SetUnits(v)
	}
	if _, ok := scc.mutation.Duration(); !ok {
		v := simulateconfig.DefaultDuration
		scc.mutation.SetDuration(v)
	}
	if _, ok := scc.mutation.SendCouponMode(); !ok {
		v := simulateconfig.DefaultSendCouponMode
		scc.mutation.SetSendCouponMode(v)
	}
	if _, ok := scc.mutation.SendCouponProbability(); !ok {
		v := simulateconfig.DefaultSendCouponProbability
		scc.mutation.SetSendCouponProbability(v)
	}
	if _, ok := scc.mutation.Enabled(); !ok {
		v := simulateconfig.DefaultEnabled
		scc.mutation.SetEnabled(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (scc *SimulateConfigCreate) check() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SimulateConfig.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SimulateConfig.updated_at"`)}
	}
	if _, ok := scc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SimulateConfig.deleted_at"`)}
	}
	if _, ok := scc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "SimulateConfig.ent_id"`)}
	}
	if _, ok := scc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "SimulateConfig.app_id"`)}
	}
	return nil
}

func (scc *SimulateConfigCreate) sqlSave(ctx context.Context) (*SimulateConfig, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (scc *SimulateConfigCreate) createSpec() (*SimulateConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SimulateConfig{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: simulateconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateconfig.FieldID,
			},
		}
	)
	_spec.OnConflict = scc.conflict
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := scc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := scc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := scc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := scc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := scc.mutation.SendCouponMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulateconfig.FieldSendCouponMode,
		})
		_node.SendCouponMode = value
	}
	if value, ok := scc.mutation.SendCouponProbability(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldSendCouponProbability,
		})
		_node.SendCouponProbability = value
	}
	if value, ok := scc.mutation.Enabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: simulateconfig.FieldEnabled,
		})
		_node.Enabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scc *SimulateConfigCreate) OnConflict(opts ...sql.ConflictOption) *SimulateConfigUpsertOne {
	scc.conflict = opts
	return &SimulateConfigUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scc *SimulateConfigCreate) OnConflictColumns(columns ...string) *SimulateConfigUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &SimulateConfigUpsertOne{
		create: scc,
	}
}

type (
	// SimulateConfigUpsertOne is the builder for "upsert"-ing
	//  one SimulateConfig node.
	SimulateConfigUpsertOne struct {
		create *SimulateConfigCreate
	}

	// SimulateConfigUpsert is the "OnConflict" setter.
	SimulateConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SimulateConfigUpsert) SetCreatedAt(v uint32) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateCreatedAt() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateConfigUpsert) AddCreatedAt(v uint32) *SimulateConfigUpsert {
	u.Add(simulateconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateConfigUpsert) SetUpdatedAt(v uint32) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateUpdatedAt() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateConfigUpsert) AddUpdatedAt(v uint32) *SimulateConfigUpsert {
	u.Add(simulateconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateConfigUpsert) SetDeletedAt(v uint32) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateDeletedAt() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateConfigUpsert) AddDeletedAt(v uint32) *SimulateConfigUpsert {
	u.Add(simulateconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SimulateConfigUpsert) SetEntID(v uuid.UUID) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateEntID() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SimulateConfigUpsert) SetAppID(v uuid.UUID) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateAppID() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldAppID)
	return u
}

// SetUnits sets the "units" field.
func (u *SimulateConfigUpsert) SetUnits(v decimal.Decimal) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateUnits() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldUnits)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *SimulateConfigUpsert) ClearUnits() *SimulateConfigUpsert {
	u.SetNull(simulateconfig.FieldUnits)
	return u
}

// SetDuration sets the "duration" field.
func (u *SimulateConfigUpsert) SetDuration(v uint32) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateDuration() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *SimulateConfigUpsert) AddDuration(v uint32) *SimulateConfigUpsert {
	u.Add(simulateconfig.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *SimulateConfigUpsert) ClearDuration() *SimulateConfigUpsert {
	u.SetNull(simulateconfig.FieldDuration)
	return u
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (u *SimulateConfigUpsert) SetSendCouponMode(v string) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldSendCouponMode, v)
	return u
}

// UpdateSendCouponMode sets the "send_coupon_mode" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateSendCouponMode() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldSendCouponMode)
	return u
}

// ClearSendCouponMode clears the value of the "send_coupon_mode" field.
func (u *SimulateConfigUpsert) ClearSendCouponMode() *SimulateConfigUpsert {
	u.SetNull(simulateconfig.FieldSendCouponMode)
	return u
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (u *SimulateConfigUpsert) SetSendCouponProbability(v decimal.Decimal) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldSendCouponProbability, v)
	return u
}

// UpdateSendCouponProbability sets the "send_coupon_probability" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateSendCouponProbability() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldSendCouponProbability)
	return u
}

// ClearSendCouponProbability clears the value of the "send_coupon_probability" field.
func (u *SimulateConfigUpsert) ClearSendCouponProbability() *SimulateConfigUpsert {
	u.SetNull(simulateconfig.FieldSendCouponProbability)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *SimulateConfigUpsert) SetEnabled(v bool) *SimulateConfigUpsert {
	u.Set(simulateconfig.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *SimulateConfigUpsert) UpdateEnabled() *SimulateConfigUpsert {
	u.SetExcluded(simulateconfig.FieldEnabled)
	return u
}

// ClearEnabled clears the value of the "enabled" field.
func (u *SimulateConfigUpsert) ClearEnabled() *SimulateConfigUpsert {
	u.SetNull(simulateconfig.FieldEnabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SimulateConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateConfigUpsertOne) UpdateNewValues() *SimulateConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(simulateconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SimulateConfig.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SimulateConfigUpsertOne) Ignore() *SimulateConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateConfigUpsertOne) DoNothing() *SimulateConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateConfigCreate.OnConflict
// documentation for more info.
func (u *SimulateConfigUpsertOne) Update(set func(*SimulateConfigUpsert)) *SimulateConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateConfigUpsertOne) SetCreatedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateConfigUpsertOne) AddCreatedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateCreatedAt() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateConfigUpsertOne) SetUpdatedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateConfigUpsertOne) AddUpdatedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateUpdatedAt() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateConfigUpsertOne) SetDeletedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateConfigUpsertOne) AddDeletedAt(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateDeletedAt() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateConfigUpsertOne) SetEntID(v uuid.UUID) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateEntID() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateConfigUpsertOne) SetAppID(v uuid.UUID) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateAppID() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateAppID()
	})
}

// SetUnits sets the "units" field.
func (u *SimulateConfigUpsertOne) SetUnits(v decimal.Decimal) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateUnits() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *SimulateConfigUpsertOne) ClearUnits() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearUnits()
	})
}

// SetDuration sets the "duration" field.
func (u *SimulateConfigUpsertOne) SetDuration(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *SimulateConfigUpsertOne) AddDuration(v uint32) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateDuration() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *SimulateConfigUpsertOne) ClearDuration() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearDuration()
	})
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (u *SimulateConfigUpsertOne) SetSendCouponMode(v string) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetSendCouponMode(v)
	})
}

// UpdateSendCouponMode sets the "send_coupon_mode" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateSendCouponMode() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateSendCouponMode()
	})
}

// ClearSendCouponMode clears the value of the "send_coupon_mode" field.
func (u *SimulateConfigUpsertOne) ClearSendCouponMode() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearSendCouponMode()
	})
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (u *SimulateConfigUpsertOne) SetSendCouponProbability(v decimal.Decimal) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetSendCouponProbability(v)
	})
}

// UpdateSendCouponProbability sets the "send_coupon_probability" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateSendCouponProbability() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateSendCouponProbability()
	})
}

// ClearSendCouponProbability clears the value of the "send_coupon_probability" field.
func (u *SimulateConfigUpsertOne) ClearSendCouponProbability() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearSendCouponProbability()
	})
}

// SetEnabled sets the "enabled" field.
func (u *SimulateConfigUpsertOne) SetEnabled(v bool) *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *SimulateConfigUpsertOne) UpdateEnabled() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateEnabled()
	})
}

// ClearEnabled clears the value of the "enabled" field.
func (u *SimulateConfigUpsertOne) ClearEnabled() *SimulateConfigUpsertOne {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearEnabled()
	})
}

// Exec executes the query.
func (u *SimulateConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SimulateConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SimulateConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SimulateConfigCreateBulk is the builder for creating many SimulateConfig entities in bulk.
type SimulateConfigCreateBulk struct {
	config
	builders []*SimulateConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the SimulateConfig entities in the database.
func (sccb *SimulateConfigCreateBulk) Save(ctx context.Context) ([]*SimulateConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SimulateConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SimulateConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SimulateConfigCreateBulk) SaveX(ctx context.Context) []*SimulateConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SimulateConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SimulateConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SimulateConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SimulateConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sccb *SimulateConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *SimulateConfigUpsertBulk {
	sccb.conflict = opts
	return &SimulateConfigUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SimulateConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sccb *SimulateConfigCreateBulk) OnConflictColumns(columns ...string) *SimulateConfigUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &SimulateConfigUpsertBulk{
		create: sccb,
	}
}

// SimulateConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of SimulateConfig nodes.
type SimulateConfigUpsertBulk struct {
	create *SimulateConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SimulateConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(simulateconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SimulateConfigUpsertBulk) UpdateNewValues() *SimulateConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(simulateconfig.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SimulateConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SimulateConfigUpsertBulk) Ignore() *SimulateConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SimulateConfigUpsertBulk) DoNothing() *SimulateConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SimulateConfigCreateBulk.OnConflict
// documentation for more info.
func (u *SimulateConfigUpsertBulk) Update(set func(*SimulateConfigUpsert)) *SimulateConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SimulateConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SimulateConfigUpsertBulk) SetCreatedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SimulateConfigUpsertBulk) AddCreatedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateCreatedAt() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SimulateConfigUpsertBulk) SetUpdatedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SimulateConfigUpsertBulk) AddUpdatedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateUpdatedAt() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SimulateConfigUpsertBulk) SetDeletedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SimulateConfigUpsertBulk) AddDeletedAt(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateDeletedAt() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SimulateConfigUpsertBulk) SetEntID(v uuid.UUID) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateEntID() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *SimulateConfigUpsertBulk) SetAppID(v uuid.UUID) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateAppID() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateAppID()
	})
}

// SetUnits sets the "units" field.
func (u *SimulateConfigUpsertBulk) SetUnits(v decimal.Decimal) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateUnits() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *SimulateConfigUpsertBulk) ClearUnits() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearUnits()
	})
}

// SetDuration sets the "duration" field.
func (u *SimulateConfigUpsertBulk) SetDuration(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *SimulateConfigUpsertBulk) AddDuration(v uint32) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateDuration() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *SimulateConfigUpsertBulk) ClearDuration() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearDuration()
	})
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (u *SimulateConfigUpsertBulk) SetSendCouponMode(v string) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetSendCouponMode(v)
	})
}

// UpdateSendCouponMode sets the "send_coupon_mode" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateSendCouponMode() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateSendCouponMode()
	})
}

// ClearSendCouponMode clears the value of the "send_coupon_mode" field.
func (u *SimulateConfigUpsertBulk) ClearSendCouponMode() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearSendCouponMode()
	})
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (u *SimulateConfigUpsertBulk) SetSendCouponProbability(v decimal.Decimal) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetSendCouponProbability(v)
	})
}

// UpdateSendCouponProbability sets the "send_coupon_probability" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateSendCouponProbability() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateSendCouponProbability()
	})
}

// ClearSendCouponProbability clears the value of the "send_coupon_probability" field.
func (u *SimulateConfigUpsertBulk) ClearSendCouponProbability() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearSendCouponProbability()
	})
}

// SetEnabled sets the "enabled" field.
func (u *SimulateConfigUpsertBulk) SetEnabled(v bool) *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *SimulateConfigUpsertBulk) UpdateEnabled() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.UpdateEnabled()
	})
}

// ClearEnabled clears the value of the "enabled" field.
func (u *SimulateConfigUpsertBulk) ClearEnabled() *SimulateConfigUpsertBulk {
	return u.Update(func(s *SimulateConfigUpsert) {
		s.ClearEnabled()
	})
}

// Exec executes the query.
func (u *SimulateConfigUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SimulateConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SimulateConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SimulateConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
