// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppConfigQueryRuleFunc func(context.Context, *ent.AppConfigQuery) error

// EvalQuery return f(ctx, q).
func (f AppConfigQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppConfigQuery", q)
}

// The AppConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppConfigMutationRuleFunc func(context.Context, *ent.AppConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f AppConfigMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppConfigMutation", m)
}

// The CompensateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CompensateQueryRuleFunc func(context.Context, *ent.CompensateQuery) error

// EvalQuery return f(ctx, q).
func (f CompensateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CompensateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CompensateQuery", q)
}

// The CompensateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CompensateMutationRuleFunc func(context.Context, *ent.CompensateMutation) error

// EvalMutation calls f(ctx, m).
func (f CompensateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CompensateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CompensateMutation", m)
}

// The FeeOrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeOrderQueryRuleFunc func(context.Context, *ent.FeeOrderQuery) error

// EvalQuery return f(ctx, q).
func (f FeeOrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeeOrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeeOrderQuery", q)
}

// The FeeOrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeOrderMutationRuleFunc func(context.Context, *ent.FeeOrderMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeOrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeeOrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeeOrderMutation", m)
}

// The FeeOrderStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeOrderStateQueryRuleFunc func(context.Context, *ent.FeeOrderStateQuery) error

// EvalQuery return f(ctx, q).
func (f FeeOrderStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeeOrderStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeeOrderStateQuery", q)
}

// The FeeOrderStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeOrderStateMutationRuleFunc func(context.Context, *ent.FeeOrderStateMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeOrderStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeeOrderStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeeOrderStateMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *ent.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *ent.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderMutation", m)
}

// The OrderBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderBaseQueryRuleFunc func(context.Context, *ent.OrderBaseQuery) error

// EvalQuery return f(ctx, q).
func (f OrderBaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderBaseQuery", q)
}

// The OrderBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderBaseMutationRuleFunc func(context.Context, *ent.OrderBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderBaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderBaseMutation", m)
}

// The OrderCouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderCouponQueryRuleFunc func(context.Context, *ent.OrderCouponQuery) error

// EvalQuery return f(ctx, q).
func (f OrderCouponQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderCouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderCouponQuery", q)
}

// The OrderCouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderCouponMutationRuleFunc func(context.Context, *ent.OrderCouponMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderCouponMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderCouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderCouponMutation", m)
}

// The OrderLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderLockQueryRuleFunc func(context.Context, *ent.OrderLockQuery) error

// EvalQuery return f(ctx, q).
func (f OrderLockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderLockQuery", q)
}

// The OrderLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderLockMutationRuleFunc func(context.Context, *ent.OrderLockMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderLockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderLockMutation", m)
}

// The OrderStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderStateQueryRuleFunc func(context.Context, *ent.OrderStateQuery) error

// EvalQuery return f(ctx, q).
func (f OrderStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderStateQuery", q)
}

// The OrderStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderStateMutationRuleFunc func(context.Context, *ent.OrderStateMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderStateMutation", m)
}

// The OrderStateBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderStateBaseQueryRuleFunc func(context.Context, *ent.OrderStateBaseQuery) error

// EvalQuery return f(ctx, q).
func (f OrderStateBaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderStateBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderStateBaseQuery", q)
}

// The OrderStateBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderStateBaseMutationRuleFunc func(context.Context, *ent.OrderStateBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderStateBaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderStateBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderStateBaseMutation", m)
}

// The OutOfGasQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OutOfGasQueryRuleFunc func(context.Context, *ent.OutOfGasQuery) error

// EvalQuery return f(ctx, q).
func (f OutOfGasQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OutOfGasQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OutOfGasQuery", q)
}

// The OutOfGasMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OutOfGasMutationRuleFunc func(context.Context, *ent.OutOfGasMutation) error

// EvalMutation calls f(ctx, m).
func (f OutOfGasMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OutOfGasMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OutOfGasMutation", m)
}

// The PaymentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentQueryRuleFunc func(context.Context, *ent.PaymentQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentQuery", q)
}

// The PaymentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentMutationRuleFunc func(context.Context, *ent.PaymentMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentMutation", m)
}

// The PaymentBalanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBalanceQueryRuleFunc func(context.Context, *ent.PaymentBalanceQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBalanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentBalanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentBalanceQuery", q)
}

// The PaymentBalanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBalanceMutationRuleFunc func(context.Context, *ent.PaymentBalanceMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBalanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentBalanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentBalanceMutation", m)
}

// The PaymentBalanceLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBalanceLockQueryRuleFunc func(context.Context, *ent.PaymentBalanceLockQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBalanceLockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentBalanceLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentBalanceLockQuery", q)
}

// The PaymentBalanceLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBalanceLockMutationRuleFunc func(context.Context, *ent.PaymentBalanceLockMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBalanceLockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentBalanceLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentBalanceLockMutation", m)
}

// The PaymentBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentBaseQueryRuleFunc func(context.Context, *ent.PaymentBaseQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentBaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentBaseQuery", q)
}

// The PaymentBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentBaseMutationRuleFunc func(context.Context, *ent.PaymentBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentBaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentBaseMutation", m)
}

// The PaymentContractQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentContractQueryRuleFunc func(context.Context, *ent.PaymentContractQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentContractQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentContractQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentContractQuery", q)
}

// The PaymentContractMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentContractMutationRuleFunc func(context.Context, *ent.PaymentContractMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentContractMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentContractMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentContractMutation", m)
}

// The PaymentTransferQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentTransferQueryRuleFunc func(context.Context, *ent.PaymentTransferQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentTransferQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentTransferQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentTransferQuery", q)
}

// The PaymentTransferMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentTransferMutationRuleFunc func(context.Context, *ent.PaymentTransferMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentTransferMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentTransferMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentTransferMutation", m)
}

// The PoolOrderUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PoolOrderUserQueryRuleFunc func(context.Context, *ent.PoolOrderUserQuery) error

// EvalQuery return f(ctx, q).
func (f PoolOrderUserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PoolOrderUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PoolOrderUserQuery", q)
}

// The PoolOrderUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PoolOrderUserMutationRuleFunc func(context.Context, *ent.PoolOrderUserMutation) error

// EvalMutation calls f(ctx, m).
func (f PoolOrderUserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PoolOrderUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PoolOrderUserMutation", m)
}

// The PowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalQueryRuleFunc func(context.Context, *ent.PowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PowerRentalQuery", q)
}

// The PowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalMutationRuleFunc func(context.Context, *ent.PowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PowerRentalMutation", m)
}

// The PowerRentalStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalStateQueryRuleFunc func(context.Context, *ent.PowerRentalStateQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PowerRentalStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PowerRentalStateQuery", q)
}

// The PowerRentalStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalStateMutationRuleFunc func(context.Context, *ent.PowerRentalStateMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PowerRentalStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PowerRentalStateMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AppConfigQuery:
		return q.Filter(), nil
	case *ent.CompensateQuery:
		return q.Filter(), nil
	case *ent.FeeOrderQuery:
		return q.Filter(), nil
	case *ent.FeeOrderStateQuery:
		return q.Filter(), nil
	case *ent.OrderQuery:
		return q.Filter(), nil
	case *ent.OrderBaseQuery:
		return q.Filter(), nil
	case *ent.OrderCouponQuery:
		return q.Filter(), nil
	case *ent.OrderLockQuery:
		return q.Filter(), nil
	case *ent.OrderStateQuery:
		return q.Filter(), nil
	case *ent.OrderStateBaseQuery:
		return q.Filter(), nil
	case *ent.OutOfGasQuery:
		return q.Filter(), nil
	case *ent.PaymentQuery:
		return q.Filter(), nil
	case *ent.PaymentBalanceQuery:
		return q.Filter(), nil
	case *ent.PaymentBalanceLockQuery:
		return q.Filter(), nil
	case *ent.PaymentBaseQuery:
		return q.Filter(), nil
	case *ent.PaymentContractQuery:
		return q.Filter(), nil
	case *ent.PaymentTransferQuery:
		return q.Filter(), nil
	case *ent.PoolOrderUserQuery:
		return q.Filter(), nil
	case *ent.PowerRentalQuery:
		return q.Filter(), nil
	case *ent.PowerRentalStateQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AppConfigMutation:
		return m.Filter(), nil
	case *ent.CompensateMutation:
		return m.Filter(), nil
	case *ent.FeeOrderMutation:
		return m.Filter(), nil
	case *ent.FeeOrderStateMutation:
		return m.Filter(), nil
	case *ent.OrderMutation:
		return m.Filter(), nil
	case *ent.OrderBaseMutation:
		return m.Filter(), nil
	case *ent.OrderCouponMutation:
		return m.Filter(), nil
	case *ent.OrderLockMutation:
		return m.Filter(), nil
	case *ent.OrderStateMutation:
		return m.Filter(), nil
	case *ent.OrderStateBaseMutation:
		return m.Filter(), nil
	case *ent.OutOfGasMutation:
		return m.Filter(), nil
	case *ent.PaymentMutation:
		return m.Filter(), nil
	case *ent.PaymentBalanceMutation:
		return m.Filter(), nil
	case *ent.PaymentBalanceLockMutation:
		return m.Filter(), nil
	case *ent.PaymentBaseMutation:
		return m.Filter(), nil
	case *ent.PaymentContractMutation:
		return m.Filter(), nil
	case *ent.PaymentTransferMutation:
		return m.Filter(), nil
	case *ent.PoolOrderUserMutation:
		return m.Filter(), nil
	case *ent.PowerRentalMutation:
		return m.Filter(), nil
	case *ent.PowerRentalStateMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
