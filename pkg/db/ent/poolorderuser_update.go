// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/poolorderuser"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// PoolOrderUserUpdate is the builder for updating PoolOrderUser entities.
type PoolOrderUserUpdate struct {
	config
	hooks     []Hook
	mutation  *PoolOrderUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PoolOrderUserUpdate builder.
func (pouu *PoolOrderUserUpdate) Where(ps ...predicate.PoolOrderUser) *PoolOrderUserUpdate {
	pouu.mutation.Where(ps...)
	return pouu
}

// SetCreatedAt sets the "created_at" field.
func (pouu *PoolOrderUserUpdate) SetCreatedAt(u uint32) *PoolOrderUserUpdate {
	pouu.mutation.ResetCreatedAt()
	pouu.mutation.SetCreatedAt(u)
	return pouu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pouu *PoolOrderUserUpdate) SetNillableCreatedAt(u *uint32) *PoolOrderUserUpdate {
	if u != nil {
		pouu.SetCreatedAt(*u)
	}
	return pouu
}

// AddCreatedAt adds u to the "created_at" field.
func (pouu *PoolOrderUserUpdate) AddCreatedAt(u int32) *PoolOrderUserUpdate {
	pouu.mutation.AddCreatedAt(u)
	return pouu
}

// SetUpdatedAt sets the "updated_at" field.
func (pouu *PoolOrderUserUpdate) SetUpdatedAt(u uint32) *PoolOrderUserUpdate {
	pouu.mutation.ResetUpdatedAt()
	pouu.mutation.SetUpdatedAt(u)
	return pouu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pouu *PoolOrderUserUpdate) AddUpdatedAt(u int32) *PoolOrderUserUpdate {
	pouu.mutation.AddUpdatedAt(u)
	return pouu
}

// SetDeletedAt sets the "deleted_at" field.
func (pouu *PoolOrderUserUpdate) SetDeletedAt(u uint32) *PoolOrderUserUpdate {
	pouu.mutation.ResetDeletedAt()
	pouu.mutation.SetDeletedAt(u)
	return pouu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pouu *PoolOrderUserUpdate) SetNillableDeletedAt(u *uint32) *PoolOrderUserUpdate {
	if u != nil {
		pouu.SetDeletedAt(*u)
	}
	return pouu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pouu *PoolOrderUserUpdate) AddDeletedAt(u int32) *PoolOrderUserUpdate {
	pouu.mutation.AddDeletedAt(u)
	return pouu
}

// SetEntID sets the "ent_id" field.
func (pouu *PoolOrderUserUpdate) SetEntID(u uuid.UUID) *PoolOrderUserUpdate {
	pouu.mutation.SetEntID(u)
	return pouu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pouu *PoolOrderUserUpdate) SetNillableEntID(u *uuid.UUID) *PoolOrderUserUpdate {
	if u != nil {
		pouu.SetEntID(*u)
	}
	return pouu
}

// SetOrderID sets the "order_id" field.
func (pouu *PoolOrderUserUpdate) SetOrderID(u uuid.UUID) *PoolOrderUserUpdate {
	pouu.mutation.SetOrderID(u)
	return pouu
}

// SetPoolOrderUserID sets the "pool_order_user_id" field.
func (pouu *PoolOrderUserUpdate) SetPoolOrderUserID(u uuid.UUID) *PoolOrderUserUpdate {
	pouu.mutation.SetPoolOrderUserID(u)
	return pouu
}

// Mutation returns the PoolOrderUserMutation object of the builder.
func (pouu *PoolOrderUserUpdate) Mutation() *PoolOrderUserMutation {
	return pouu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pouu *PoolOrderUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pouu.defaults(); err != nil {
		return 0, err
	}
	if len(pouu.hooks) == 0 {
		affected, err = pouu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolOrderUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pouu.mutation = mutation
			affected, err = pouu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pouu.hooks) - 1; i >= 0; i-- {
			if pouu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pouu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pouu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pouu *PoolOrderUserUpdate) SaveX(ctx context.Context) int {
	affected, err := pouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pouu *PoolOrderUserUpdate) Exec(ctx context.Context) error {
	_, err := pouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouu *PoolOrderUserUpdate) ExecX(ctx context.Context) {
	if err := pouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouu *PoolOrderUserUpdate) defaults() error {
	if _, ok := pouu.mutation.UpdatedAt(); !ok {
		if poolorderuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized poolorderuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := poolorderuser.UpdateDefaultUpdatedAt()
		pouu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pouu *PoolOrderUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PoolOrderUserUpdate {
	pouu.modifiers = append(pouu.modifiers, modifiers...)
	return pouu
}

func (pouu *PoolOrderUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolorderuser.Table,
			Columns: poolorderuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: poolorderuser.FieldID,
			},
		},
	}
	if ps := pouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldCreatedAt,
		})
	}
	if value, ok := pouu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldCreatedAt,
		})
	}
	if value, ok := pouu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldUpdatedAt,
		})
	}
	if value, ok := pouu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldUpdatedAt,
		})
	}
	if value, ok := pouu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldDeletedAt,
		})
	}
	if value, ok := pouu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldDeletedAt,
		})
	}
	if value, ok := pouu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldEntID,
		})
	}
	if value, ok := pouu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldOrderID,
		})
	}
	if value, ok := pouu.mutation.PoolOrderUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldPoolOrderUserID,
		})
	}
	_spec.Modifiers = pouu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poolorderuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PoolOrderUserUpdateOne is the builder for updating a single PoolOrderUser entity.
type PoolOrderUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PoolOrderUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (pouuo *PoolOrderUserUpdateOne) SetCreatedAt(u uint32) *PoolOrderUserUpdateOne {
	pouuo.mutation.ResetCreatedAt()
	pouuo.mutation.SetCreatedAt(u)
	return pouuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pouuo *PoolOrderUserUpdateOne) SetNillableCreatedAt(u *uint32) *PoolOrderUserUpdateOne {
	if u != nil {
		pouuo.SetCreatedAt(*u)
	}
	return pouuo
}

// AddCreatedAt adds u to the "created_at" field.
func (pouuo *PoolOrderUserUpdateOne) AddCreatedAt(u int32) *PoolOrderUserUpdateOne {
	pouuo.mutation.AddCreatedAt(u)
	return pouuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pouuo *PoolOrderUserUpdateOne) SetUpdatedAt(u uint32) *PoolOrderUserUpdateOne {
	pouuo.mutation.ResetUpdatedAt()
	pouuo.mutation.SetUpdatedAt(u)
	return pouuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pouuo *PoolOrderUserUpdateOne) AddUpdatedAt(u int32) *PoolOrderUserUpdateOne {
	pouuo.mutation.AddUpdatedAt(u)
	return pouuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pouuo *PoolOrderUserUpdateOne) SetDeletedAt(u uint32) *PoolOrderUserUpdateOne {
	pouuo.mutation.ResetDeletedAt()
	pouuo.mutation.SetDeletedAt(u)
	return pouuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pouuo *PoolOrderUserUpdateOne) SetNillableDeletedAt(u *uint32) *PoolOrderUserUpdateOne {
	if u != nil {
		pouuo.SetDeletedAt(*u)
	}
	return pouuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pouuo *PoolOrderUserUpdateOne) AddDeletedAt(u int32) *PoolOrderUserUpdateOne {
	pouuo.mutation.AddDeletedAt(u)
	return pouuo
}

// SetEntID sets the "ent_id" field.
func (pouuo *PoolOrderUserUpdateOne) SetEntID(u uuid.UUID) *PoolOrderUserUpdateOne {
	pouuo.mutation.SetEntID(u)
	return pouuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pouuo *PoolOrderUserUpdateOne) SetNillableEntID(u *uuid.UUID) *PoolOrderUserUpdateOne {
	if u != nil {
		pouuo.SetEntID(*u)
	}
	return pouuo
}

// SetOrderID sets the "order_id" field.
func (pouuo *PoolOrderUserUpdateOne) SetOrderID(u uuid.UUID) *PoolOrderUserUpdateOne {
	pouuo.mutation.SetOrderID(u)
	return pouuo
}

// SetPoolOrderUserID sets the "pool_order_user_id" field.
func (pouuo *PoolOrderUserUpdateOne) SetPoolOrderUserID(u uuid.UUID) *PoolOrderUserUpdateOne {
	pouuo.mutation.SetPoolOrderUserID(u)
	return pouuo
}

// Mutation returns the PoolOrderUserMutation object of the builder.
func (pouuo *PoolOrderUserUpdateOne) Mutation() *PoolOrderUserMutation {
	return pouuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouuo *PoolOrderUserUpdateOne) Select(field string, fields ...string) *PoolOrderUserUpdateOne {
	pouuo.fields = append([]string{field}, fields...)
	return pouuo
}

// Save executes the query and returns the updated PoolOrderUser entity.
func (pouuo *PoolOrderUserUpdateOne) Save(ctx context.Context) (*PoolOrderUser, error) {
	var (
		err  error
		node *PoolOrderUser
	)
	if err := pouuo.defaults(); err != nil {
		return nil, err
	}
	if len(pouuo.hooks) == 0 {
		node, err = pouuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolOrderUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pouuo.mutation = mutation
			node, err = pouuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pouuo.hooks) - 1; i >= 0; i-- {
			if pouuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pouuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pouuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PoolOrderUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PoolOrderUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pouuo *PoolOrderUserUpdateOne) SaveX(ctx context.Context) *PoolOrderUser {
	node, err := pouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouuo *PoolOrderUserUpdateOne) Exec(ctx context.Context) error {
	_, err := pouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouuo *PoolOrderUserUpdateOne) ExecX(ctx context.Context) {
	if err := pouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouuo *PoolOrderUserUpdateOne) defaults() error {
	if _, ok := pouuo.mutation.UpdatedAt(); !ok {
		if poolorderuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized poolorderuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := poolorderuser.UpdateDefaultUpdatedAt()
		pouuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pouuo *PoolOrderUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PoolOrderUserUpdateOne {
	pouuo.modifiers = append(pouuo.modifiers, modifiers...)
	return pouuo
}

func (pouuo *PoolOrderUserUpdateOne) sqlSave(ctx context.Context) (_node *PoolOrderUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolorderuser.Table,
			Columns: poolorderuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: poolorderuser.FieldID,
			},
		},
	}
	id, ok := pouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PoolOrderUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poolorderuser.FieldID)
		for _, f := range fields {
			if !poolorderuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poolorderuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldCreatedAt,
		})
	}
	if value, ok := pouuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldCreatedAt,
		})
	}
	if value, ok := pouuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldUpdatedAt,
		})
	}
	if value, ok := pouuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldUpdatedAt,
		})
	}
	if value, ok := pouuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldDeletedAt,
		})
	}
	if value, ok := pouuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: poolorderuser.FieldDeletedAt,
		})
	}
	if value, ok := pouuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldEntID,
		})
	}
	if value, ok := pouuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldOrderID,
		})
	}
	if value, ok := pouuo.mutation.PoolOrderUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: poolorderuser.FieldPoolOrderUserID,
		})
	}
	_spec.Modifiers = pouuo.modifiers
	_node = &PoolOrderUser{config: pouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poolorderuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
