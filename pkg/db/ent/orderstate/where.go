// Code generated by ent, DO NOT EDIT.

package orderstate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderState applies equality check predicate on the "order_state" field. It's identical to OrderStateEQ.
func OrderState(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderState), v))
	})
}

// CancelState applies equality check predicate on the "cancel_state" field. It's identical to CancelStateEQ.
func CancelState(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelState), v))
	})
}

// StartMode applies equality check predicate on the "start_mode" field. It's identical to StartModeEQ.
func StartMode(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartMode), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// PaidAt applies equality check predicate on the "paid_at" field. It's identical to PaidAtEQ.
func PaidAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidAt), v))
	})
}

// LastBenefitAt applies equality check predicate on the "last_benefit_at" field. It's identical to LastBenefitAtEQ.
func LastBenefitAt(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// BenefitState applies equality check predicate on the "benefit_state" field. It's identical to BenefitStateEQ.
func BenefitState(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// UserSetPaid applies equality check predicate on the "user_set_paid" field. It's identical to UserSetPaidEQ.
func UserSetPaid(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserSetPaid), v))
	})
}

// UserSetCanceled applies equality check predicate on the "user_set_canceled" field. It's identical to UserSetCanceledEQ.
func UserSetCanceled(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserSetCanceled), v))
	})
}

// AdminSetCanceled applies equality check predicate on the "admin_set_canceled" field. It's identical to AdminSetCanceledEQ.
func AdminSetCanceled(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminSetCanceled), v))
	})
}

// PaymentTransactionID applies equality check predicate on the "payment_transaction_id" field. It's identical to PaymentTransactionIDEQ.
func PaymentTransactionID(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentFinishAmount applies equality check predicate on the "payment_finish_amount" field. It's identical to PaymentFinishAmountEQ.
func PaymentFinishAmount(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentState applies equality check predicate on the "payment_state" field. It's identical to PaymentStateEQ.
func PaymentState(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentState), v))
	})
}

// OutofgasHours applies equality check predicate on the "outofgas_hours" field. It's identical to OutofgasHoursEQ.
func OutofgasHours(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutofgasHours), v))
	})
}

// CompensateHours applies equality check predicate on the "compensate_hours" field. It's identical to CompensateHoursEQ.
func CompensateHours(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompensateHours), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// OrderStateEQ applies the EQ predicate on the "order_state" field.
func OrderStateEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderState), v))
	})
}

// OrderStateNEQ applies the NEQ predicate on the "order_state" field.
func OrderStateNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderState), v))
	})
}

// OrderStateIn applies the In predicate on the "order_state" field.
func OrderStateIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderState), v...))
	})
}

// OrderStateNotIn applies the NotIn predicate on the "order_state" field.
func OrderStateNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderState), v...))
	})
}

// OrderStateGT applies the GT predicate on the "order_state" field.
func OrderStateGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderState), v))
	})
}

// OrderStateGTE applies the GTE predicate on the "order_state" field.
func OrderStateGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderState), v))
	})
}

// OrderStateLT applies the LT predicate on the "order_state" field.
func OrderStateLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderState), v))
	})
}

// OrderStateLTE applies the LTE predicate on the "order_state" field.
func OrderStateLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderState), v))
	})
}

// OrderStateContains applies the Contains predicate on the "order_state" field.
func OrderStateContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderState), v))
	})
}

// OrderStateHasPrefix applies the HasPrefix predicate on the "order_state" field.
func OrderStateHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderState), v))
	})
}

// OrderStateHasSuffix applies the HasSuffix predicate on the "order_state" field.
func OrderStateHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderState), v))
	})
}

// OrderStateIsNil applies the IsNil predicate on the "order_state" field.
func OrderStateIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderState)))
	})
}

// OrderStateNotNil applies the NotNil predicate on the "order_state" field.
func OrderStateNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderState)))
	})
}

// OrderStateEqualFold applies the EqualFold predicate on the "order_state" field.
func OrderStateEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderState), v))
	})
}

// OrderStateContainsFold applies the ContainsFold predicate on the "order_state" field.
func OrderStateContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderState), v))
	})
}

// CancelStateEQ applies the EQ predicate on the "cancel_state" field.
func CancelStateEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelState), v))
	})
}

// CancelStateNEQ applies the NEQ predicate on the "cancel_state" field.
func CancelStateNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelState), v))
	})
}

// CancelStateIn applies the In predicate on the "cancel_state" field.
func CancelStateIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelState), v...))
	})
}

// CancelStateNotIn applies the NotIn predicate on the "cancel_state" field.
func CancelStateNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelState), v...))
	})
}

// CancelStateGT applies the GT predicate on the "cancel_state" field.
func CancelStateGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelState), v))
	})
}

// CancelStateGTE applies the GTE predicate on the "cancel_state" field.
func CancelStateGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelState), v))
	})
}

// CancelStateLT applies the LT predicate on the "cancel_state" field.
func CancelStateLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelState), v))
	})
}

// CancelStateLTE applies the LTE predicate on the "cancel_state" field.
func CancelStateLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelState), v))
	})
}

// CancelStateContains applies the Contains predicate on the "cancel_state" field.
func CancelStateContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelState), v))
	})
}

// CancelStateHasPrefix applies the HasPrefix predicate on the "cancel_state" field.
func CancelStateHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelState), v))
	})
}

// CancelStateHasSuffix applies the HasSuffix predicate on the "cancel_state" field.
func CancelStateHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelState), v))
	})
}

// CancelStateIsNil applies the IsNil predicate on the "cancel_state" field.
func CancelStateIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelState)))
	})
}

// CancelStateNotNil applies the NotNil predicate on the "cancel_state" field.
func CancelStateNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelState)))
	})
}

// CancelStateEqualFold applies the EqualFold predicate on the "cancel_state" field.
func CancelStateEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelState), v))
	})
}

// CancelStateContainsFold applies the ContainsFold predicate on the "cancel_state" field.
func CancelStateContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelState), v))
	})
}

// StartModeEQ applies the EQ predicate on the "start_mode" field.
func StartModeEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartMode), v))
	})
}

// StartModeNEQ applies the NEQ predicate on the "start_mode" field.
func StartModeNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartMode), v))
	})
}

// StartModeIn applies the In predicate on the "start_mode" field.
func StartModeIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartMode), v...))
	})
}

// StartModeNotIn applies the NotIn predicate on the "start_mode" field.
func StartModeNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartMode), v...))
	})
}

// StartModeGT applies the GT predicate on the "start_mode" field.
func StartModeGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartMode), v))
	})
}

// StartModeGTE applies the GTE predicate on the "start_mode" field.
func StartModeGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartMode), v))
	})
}

// StartModeLT applies the LT predicate on the "start_mode" field.
func StartModeLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartMode), v))
	})
}

// StartModeLTE applies the LTE predicate on the "start_mode" field.
func StartModeLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartMode), v))
	})
}

// StartModeContains applies the Contains predicate on the "start_mode" field.
func StartModeContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStartMode), v))
	})
}

// StartModeHasPrefix applies the HasPrefix predicate on the "start_mode" field.
func StartModeHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStartMode), v))
	})
}

// StartModeHasSuffix applies the HasSuffix predicate on the "start_mode" field.
func StartModeHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStartMode), v))
	})
}

// StartModeIsNil applies the IsNil predicate on the "start_mode" field.
func StartModeIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartMode)))
	})
}

// StartModeNotNil applies the NotNil predicate on the "start_mode" field.
func StartModeNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartMode)))
	})
}

// StartModeEqualFold applies the EqualFold predicate on the "start_mode" field.
func StartModeEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStartMode), v))
	})
}

// StartModeContainsFold applies the ContainsFold predicate on the "start_mode" field.
func StartModeContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStartMode), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// PaidAtEQ applies the EQ predicate on the "paid_at" field.
func PaidAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidAt), v))
	})
}

// PaidAtNEQ applies the NEQ predicate on the "paid_at" field.
func PaidAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaidAt), v))
	})
}

// PaidAtIn applies the In predicate on the "paid_at" field.
func PaidAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaidAt), v...))
	})
}

// PaidAtNotIn applies the NotIn predicate on the "paid_at" field.
func PaidAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaidAt), v...))
	})
}

// PaidAtGT applies the GT predicate on the "paid_at" field.
func PaidAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaidAt), v))
	})
}

// PaidAtGTE applies the GTE predicate on the "paid_at" field.
func PaidAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaidAt), v))
	})
}

// PaidAtLT applies the LT predicate on the "paid_at" field.
func PaidAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaidAt), v))
	})
}

// PaidAtLTE applies the LTE predicate on the "paid_at" field.
func PaidAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaidAt), v))
	})
}

// PaidAtIsNil applies the IsNil predicate on the "paid_at" field.
func PaidAtIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaidAt)))
	})
}

// PaidAtNotNil applies the NotNil predicate on the "paid_at" field.
func PaidAtNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaidAt)))
	})
}

// LastBenefitAtEQ applies the EQ predicate on the "last_benefit_at" field.
func LastBenefitAtEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtNEQ applies the NEQ predicate on the "last_benefit_at" field.
func LastBenefitAtNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIn applies the In predicate on the "last_benefit_at" field.
func LastBenefitAtIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtNotIn applies the NotIn predicate on the "last_benefit_at" field.
func LastBenefitAtNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtGT applies the GT predicate on the "last_benefit_at" field.
func LastBenefitAtGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtGTE applies the GTE predicate on the "last_benefit_at" field.
func LastBenefitAtGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLT applies the LT predicate on the "last_benefit_at" field.
func LastBenefitAtLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLTE applies the LTE predicate on the "last_benefit_at" field.
func LastBenefitAtLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIsNil applies the IsNil predicate on the "last_benefit_at" field.
func LastBenefitAtIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBenefitAt)))
	})
}

// LastBenefitAtNotNil applies the NotNil predicate on the "last_benefit_at" field.
func LastBenefitAtNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBenefitAt)))
	})
}

// BenefitStateEQ applies the EQ predicate on the "benefit_state" field.
func BenefitStateEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateNEQ applies the NEQ predicate on the "benefit_state" field.
func BenefitStateNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIn applies the In predicate on the "benefit_state" field.
func BenefitStateIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateNotIn applies the NotIn predicate on the "benefit_state" field.
func BenefitStateNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateGT applies the GT predicate on the "benefit_state" field.
func BenefitStateGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateGTE applies the GTE predicate on the "benefit_state" field.
func BenefitStateGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLT applies the LT predicate on the "benefit_state" field.
func BenefitStateLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLTE applies the LTE predicate on the "benefit_state" field.
func BenefitStateLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContains applies the Contains predicate on the "benefit_state" field.
func BenefitStateContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasPrefix applies the HasPrefix predicate on the "benefit_state" field.
func BenefitStateHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasSuffix applies the HasSuffix predicate on the "benefit_state" field.
func BenefitStateHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIsNil applies the IsNil predicate on the "benefit_state" field.
func BenefitStateIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateNotNil applies the NotNil predicate on the "benefit_state" field.
func BenefitStateNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateEqualFold applies the EqualFold predicate on the "benefit_state" field.
func BenefitStateEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContainsFold applies the ContainsFold predicate on the "benefit_state" field.
func BenefitStateContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBenefitState), v))
	})
}

// UserSetPaidEQ applies the EQ predicate on the "user_set_paid" field.
func UserSetPaidEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserSetPaid), v))
	})
}

// UserSetPaidNEQ applies the NEQ predicate on the "user_set_paid" field.
func UserSetPaidNEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserSetPaid), v))
	})
}

// UserSetPaidIsNil applies the IsNil predicate on the "user_set_paid" field.
func UserSetPaidIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserSetPaid)))
	})
}

// UserSetPaidNotNil applies the NotNil predicate on the "user_set_paid" field.
func UserSetPaidNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserSetPaid)))
	})
}

// UserSetCanceledEQ applies the EQ predicate on the "user_set_canceled" field.
func UserSetCanceledEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserSetCanceled), v))
	})
}

// UserSetCanceledNEQ applies the NEQ predicate on the "user_set_canceled" field.
func UserSetCanceledNEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserSetCanceled), v))
	})
}

// UserSetCanceledIsNil applies the IsNil predicate on the "user_set_canceled" field.
func UserSetCanceledIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserSetCanceled)))
	})
}

// UserSetCanceledNotNil applies the NotNil predicate on the "user_set_canceled" field.
func UserSetCanceledNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserSetCanceled)))
	})
}

// AdminSetCanceledEQ applies the EQ predicate on the "admin_set_canceled" field.
func AdminSetCanceledEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminSetCanceled), v))
	})
}

// AdminSetCanceledNEQ applies the NEQ predicate on the "admin_set_canceled" field.
func AdminSetCanceledNEQ(v bool) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdminSetCanceled), v))
	})
}

// AdminSetCanceledIsNil applies the IsNil predicate on the "admin_set_canceled" field.
func AdminSetCanceledIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdminSetCanceled)))
	})
}

// AdminSetCanceledNotNil applies the NotNil predicate on the "admin_set_canceled" field.
func AdminSetCanceledNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdminSetCanceled)))
	})
}

// PaymentTransactionIDEQ applies the EQ predicate on the "payment_transaction_id" field.
func PaymentTransactionIDEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDNEQ applies the NEQ predicate on the "payment_transaction_id" field.
func PaymentTransactionIDNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDIn applies the In predicate on the "payment_transaction_id" field.
func PaymentTransactionIDIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentTransactionID), v...))
	})
}

// PaymentTransactionIDNotIn applies the NotIn predicate on the "payment_transaction_id" field.
func PaymentTransactionIDNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentTransactionID), v...))
	})
}

// PaymentTransactionIDGT applies the GT predicate on the "payment_transaction_id" field.
func PaymentTransactionIDGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDGTE applies the GTE predicate on the "payment_transaction_id" field.
func PaymentTransactionIDGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDLT applies the LT predicate on the "payment_transaction_id" field.
func PaymentTransactionIDLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDLTE applies the LTE predicate on the "payment_transaction_id" field.
func PaymentTransactionIDLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDContains applies the Contains predicate on the "payment_transaction_id" field.
func PaymentTransactionIDContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDHasPrefix applies the HasPrefix predicate on the "payment_transaction_id" field.
func PaymentTransactionIDHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDHasSuffix applies the HasSuffix predicate on the "payment_transaction_id" field.
func PaymentTransactionIDHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDIsNil applies the IsNil predicate on the "payment_transaction_id" field.
func PaymentTransactionIDIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentTransactionID)))
	})
}

// PaymentTransactionIDNotNil applies the NotNil predicate on the "payment_transaction_id" field.
func PaymentTransactionIDNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentTransactionID)))
	})
}

// PaymentTransactionIDEqualFold applies the EqualFold predicate on the "payment_transaction_id" field.
func PaymentTransactionIDEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentTransactionIDContainsFold applies the ContainsFold predicate on the "payment_transaction_id" field.
func PaymentTransactionIDContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentTransactionID), v))
	})
}

// PaymentFinishAmountEQ applies the EQ predicate on the "payment_finish_amount" field.
func PaymentFinishAmountEQ(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountNEQ applies the NEQ predicate on the "payment_finish_amount" field.
func PaymentFinishAmountNEQ(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountIn applies the In predicate on the "payment_finish_amount" field.
func PaymentFinishAmountIn(vs ...decimal.Decimal) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentFinishAmount), v...))
	})
}

// PaymentFinishAmountNotIn applies the NotIn predicate on the "payment_finish_amount" field.
func PaymentFinishAmountNotIn(vs ...decimal.Decimal) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentFinishAmount), v...))
	})
}

// PaymentFinishAmountGT applies the GT predicate on the "payment_finish_amount" field.
func PaymentFinishAmountGT(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountGTE applies the GTE predicate on the "payment_finish_amount" field.
func PaymentFinishAmountGTE(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountLT applies the LT predicate on the "payment_finish_amount" field.
func PaymentFinishAmountLT(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountLTE applies the LTE predicate on the "payment_finish_amount" field.
func PaymentFinishAmountLTE(v decimal.Decimal) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentFinishAmount), v))
	})
}

// PaymentFinishAmountIsNil applies the IsNil predicate on the "payment_finish_amount" field.
func PaymentFinishAmountIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentFinishAmount)))
	})
}

// PaymentFinishAmountNotNil applies the NotNil predicate on the "payment_finish_amount" field.
func PaymentFinishAmountNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentFinishAmount)))
	})
}

// PaymentStateEQ applies the EQ predicate on the "payment_state" field.
func PaymentStateEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentState), v))
	})
}

// PaymentStateNEQ applies the NEQ predicate on the "payment_state" field.
func PaymentStateNEQ(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentState), v))
	})
}

// PaymentStateIn applies the In predicate on the "payment_state" field.
func PaymentStateIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentState), v...))
	})
}

// PaymentStateNotIn applies the NotIn predicate on the "payment_state" field.
func PaymentStateNotIn(vs ...string) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentState), v...))
	})
}

// PaymentStateGT applies the GT predicate on the "payment_state" field.
func PaymentStateGT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentState), v))
	})
}

// PaymentStateGTE applies the GTE predicate on the "payment_state" field.
func PaymentStateGTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentState), v))
	})
}

// PaymentStateLT applies the LT predicate on the "payment_state" field.
func PaymentStateLT(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentState), v))
	})
}

// PaymentStateLTE applies the LTE predicate on the "payment_state" field.
func PaymentStateLTE(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentState), v))
	})
}

// PaymentStateContains applies the Contains predicate on the "payment_state" field.
func PaymentStateContains(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentState), v))
	})
}

// PaymentStateHasPrefix applies the HasPrefix predicate on the "payment_state" field.
func PaymentStateHasPrefix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentState), v))
	})
}

// PaymentStateHasSuffix applies the HasSuffix predicate on the "payment_state" field.
func PaymentStateHasSuffix(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentState), v))
	})
}

// PaymentStateIsNil applies the IsNil predicate on the "payment_state" field.
func PaymentStateIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentState)))
	})
}

// PaymentStateNotNil applies the NotNil predicate on the "payment_state" field.
func PaymentStateNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentState)))
	})
}

// PaymentStateEqualFold applies the EqualFold predicate on the "payment_state" field.
func PaymentStateEqualFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentState), v))
	})
}

// PaymentStateContainsFold applies the ContainsFold predicate on the "payment_state" field.
func PaymentStateContainsFold(v string) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentState), v))
	})
}

// OutofgasHoursEQ applies the EQ predicate on the "outofgas_hours" field.
func OutofgasHoursEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursNEQ applies the NEQ predicate on the "outofgas_hours" field.
func OutofgasHoursNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursIn applies the In predicate on the "outofgas_hours" field.
func OutofgasHoursIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutofgasHours), v...))
	})
}

// OutofgasHoursNotIn applies the NotIn predicate on the "outofgas_hours" field.
func OutofgasHoursNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutofgasHours), v...))
	})
}

// OutofgasHoursGT applies the GT predicate on the "outofgas_hours" field.
func OutofgasHoursGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursGTE applies the GTE predicate on the "outofgas_hours" field.
func OutofgasHoursGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursLT applies the LT predicate on the "outofgas_hours" field.
func OutofgasHoursLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursLTE applies the LTE predicate on the "outofgas_hours" field.
func OutofgasHoursLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutofgasHours), v))
	})
}

// OutofgasHoursIsNil applies the IsNil predicate on the "outofgas_hours" field.
func OutofgasHoursIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOutofgasHours)))
	})
}

// OutofgasHoursNotNil applies the NotNil predicate on the "outofgas_hours" field.
func OutofgasHoursNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOutofgasHours)))
	})
}

// CompensateHoursEQ applies the EQ predicate on the "compensate_hours" field.
func CompensateHoursEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursNEQ applies the NEQ predicate on the "compensate_hours" field.
func CompensateHoursNEQ(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursIn applies the In predicate on the "compensate_hours" field.
func CompensateHoursIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCompensateHours), v...))
	})
}

// CompensateHoursNotIn applies the NotIn predicate on the "compensate_hours" field.
func CompensateHoursNotIn(vs ...uint32) predicate.OrderState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCompensateHours), v...))
	})
}

// CompensateHoursGT applies the GT predicate on the "compensate_hours" field.
func CompensateHoursGT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursGTE applies the GTE predicate on the "compensate_hours" field.
func CompensateHoursGTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursLT applies the LT predicate on the "compensate_hours" field.
func CompensateHoursLT(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursLTE applies the LTE predicate on the "compensate_hours" field.
func CompensateHoursLTE(v uint32) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompensateHours), v))
	})
}

// CompensateHoursIsNil applies the IsNil predicate on the "compensate_hours" field.
func CompensateHoursIsNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCompensateHours)))
	})
}

// CompensateHoursNotNil applies the NotNil predicate on the "compensate_hours" field.
func CompensateHoursNotNil() predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCompensateHours)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderState) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderState) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderState) predicate.OrderState {
	return predicate.OrderState(func(s *sql.Selector) {
		p(s.Not())
	})
}
