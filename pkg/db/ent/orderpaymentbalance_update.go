// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentbalance"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentBalanceUpdate is the builder for updating OrderPaymentBalance entities.
type OrderPaymentBalanceUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderPaymentBalanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderPaymentBalanceUpdate builder.
func (opbu *OrderPaymentBalanceUpdate) Where(ps ...predicate.OrderPaymentBalance) *OrderPaymentBalanceUpdate {
	opbu.mutation.Where(ps...)
	return opbu
}

// SetCreatedAt sets the "created_at" field.
func (opbu *OrderPaymentBalanceUpdate) SetCreatedAt(u uint32) *OrderPaymentBalanceUpdate {
	opbu.mutation.ResetCreatedAt()
	opbu.mutation.SetCreatedAt(u)
	return opbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableCreatedAt(u *uint32) *OrderPaymentBalanceUpdate {
	if u != nil {
		opbu.SetCreatedAt(*u)
	}
	return opbu
}

// AddCreatedAt adds u to the "created_at" field.
func (opbu *OrderPaymentBalanceUpdate) AddCreatedAt(u int32) *OrderPaymentBalanceUpdate {
	opbu.mutation.AddCreatedAt(u)
	return opbu
}

// SetUpdatedAt sets the "updated_at" field.
func (opbu *OrderPaymentBalanceUpdate) SetUpdatedAt(u uint32) *OrderPaymentBalanceUpdate {
	opbu.mutation.ResetUpdatedAt()
	opbu.mutation.SetUpdatedAt(u)
	return opbu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opbu *OrderPaymentBalanceUpdate) AddUpdatedAt(u int32) *OrderPaymentBalanceUpdate {
	opbu.mutation.AddUpdatedAt(u)
	return opbu
}

// SetDeletedAt sets the "deleted_at" field.
func (opbu *OrderPaymentBalanceUpdate) SetDeletedAt(u uint32) *OrderPaymentBalanceUpdate {
	opbu.mutation.ResetDeletedAt()
	opbu.mutation.SetDeletedAt(u)
	return opbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableDeletedAt(u *uint32) *OrderPaymentBalanceUpdate {
	if u != nil {
		opbu.SetDeletedAt(*u)
	}
	return opbu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opbu *OrderPaymentBalanceUpdate) AddDeletedAt(u int32) *OrderPaymentBalanceUpdate {
	opbu.mutation.AddDeletedAt(u)
	return opbu
}

// SetEntID sets the "ent_id" field.
func (opbu *OrderPaymentBalanceUpdate) SetEntID(u uuid.UUID) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetEntID(u)
	return opbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableEntID(u *uuid.UUID) *OrderPaymentBalanceUpdate {
	if u != nil {
		opbu.SetEntID(*u)
	}
	return opbu
}

// SetOrderID sets the "order_id" field.
func (opbu *OrderPaymentBalanceUpdate) SetOrderID(u uuid.UUID) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetOrderID(u)
	return opbu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableOrderID(u *uuid.UUID) *OrderPaymentBalanceUpdate {
	if u != nil {
		opbu.SetOrderID(*u)
	}
	return opbu
}

// ClearOrderID clears the value of the "order_id" field.
func (opbu *OrderPaymentBalanceUpdate) ClearOrderID() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearOrderID()
	return opbu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opbu *OrderPaymentBalanceUpdate) SetCoinTypeID(u uuid.UUID) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetCoinTypeID(u)
	return opbu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentBalanceUpdate {
	if u != nil {
		opbu.SetCoinTypeID(*u)
	}
	return opbu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (opbu *OrderPaymentBalanceUpdate) ClearCoinTypeID() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearCoinTypeID()
	return opbu
}

// SetAmount sets the "amount" field.
func (opbu *OrderPaymentBalanceUpdate) SetAmount(d decimal.Decimal) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetAmount(d)
	return opbu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableAmount(d *decimal.Decimal) *OrderPaymentBalanceUpdate {
	if d != nil {
		opbu.SetAmount(*d)
	}
	return opbu
}

// ClearAmount clears the value of the "amount" field.
func (opbu *OrderPaymentBalanceUpdate) ClearAmount() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearAmount()
	return opbu
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) SetCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetCoinUsdCurrency(d)
	return opbu
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdate {
	if d != nil {
		opbu.SetCoinUsdCurrency(*d)
	}
	return opbu
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) ClearCoinUsdCurrency() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearCoinUsdCurrency()
	return opbu
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) SetLocalCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetLocalCoinUsdCurrency(d)
	return opbu
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdate {
	if d != nil {
		opbu.SetLocalCoinUsdCurrency(*d)
	}
	return opbu
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) ClearLocalCoinUsdCurrency() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearLocalCoinUsdCurrency()
	return opbu
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) SetLiveCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdate {
	opbu.mutation.SetLiveCoinUsdCurrency(d)
	return opbu
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (opbu *OrderPaymentBalanceUpdate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdate {
	if d != nil {
		opbu.SetLiveCoinUsdCurrency(*d)
	}
	return opbu
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (opbu *OrderPaymentBalanceUpdate) ClearLiveCoinUsdCurrency() *OrderPaymentBalanceUpdate {
	opbu.mutation.ClearLiveCoinUsdCurrency()
	return opbu
}

// Mutation returns the OrderPaymentBalanceMutation object of the builder.
func (opbu *OrderPaymentBalanceUpdate) Mutation() *OrderPaymentBalanceMutation {
	return opbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opbu *OrderPaymentBalanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := opbu.defaults(); err != nil {
		return 0, err
	}
	if len(opbu.hooks) == 0 {
		affected, err = opbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opbu.mutation = mutation
			affected, err = opbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opbu.hooks) - 1; i >= 0; i-- {
			if opbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opbu *OrderPaymentBalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := opbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opbu *OrderPaymentBalanceUpdate) Exec(ctx context.Context) error {
	_, err := opbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opbu *OrderPaymentBalanceUpdate) ExecX(ctx context.Context) {
	if err := opbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opbu *OrderPaymentBalanceUpdate) defaults() error {
	if _, ok := opbu.mutation.UpdatedAt(); !ok {
		if orderpaymentbalance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.UpdateDefaultUpdatedAt()
		opbu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opbu *OrderPaymentBalanceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPaymentBalanceUpdate {
	opbu.modifiers = append(opbu.modifiers, modifiers...)
	return opbu
}

func (opbu *OrderPaymentBalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentbalance.Table,
			Columns: orderpaymentbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentbalance.FieldID,
			},
		},
	}
	if ps := opbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldCreatedAt,
		})
	}
	if value, ok := opbu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldCreatedAt,
		})
	}
	if value, ok := opbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldUpdatedAt,
		})
	}
	if value, ok := opbu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldUpdatedAt,
		})
	}
	if value, ok := opbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldDeletedAt,
		})
	}
	if value, ok := opbu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldDeletedAt,
		})
	}
	if value, ok := opbu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldEntID,
		})
	}
	if value, ok := opbu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldOrderID,
		})
	}
	if opbu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentbalance.FieldOrderID,
		})
	}
	if value, ok := opbu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinTypeID,
		})
	}
	if opbu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentbalance.FieldCoinTypeID,
		})
	}
	if value, ok := opbu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldAmount,
		})
	}
	if opbu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldAmount,
		})
	}
	if value, ok := opbu.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinUsdCurrency,
		})
	}
	if opbu.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldCoinUsdCurrency,
		})
	}
	if value, ok := opbu.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLocalCoinUsdCurrency,
		})
	}
	if opbu.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := opbu.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLiveCoinUsdCurrency,
		})
	}
	if opbu.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldLiveCoinUsdCurrency,
		})
	}
	_spec.Modifiers = opbu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, opbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPaymentBalanceUpdateOne is the builder for updating a single OrderPaymentBalance entity.
type OrderPaymentBalanceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderPaymentBalanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetCreatedAt(u uint32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ResetCreatedAt()
	opbuo.mutation.SetCreatedAt(u)
	return opbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableCreatedAt(u *uint32) *OrderPaymentBalanceUpdateOne {
	if u != nil {
		opbuo.SetCreatedAt(*u)
	}
	return opbuo
}

// AddCreatedAt adds u to the "created_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) AddCreatedAt(u int32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.AddCreatedAt(u)
	return opbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetUpdatedAt(u uint32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ResetUpdatedAt()
	opbuo.mutation.SetUpdatedAt(u)
	return opbuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) AddUpdatedAt(u int32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.AddUpdatedAt(u)
	return opbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetDeletedAt(u uint32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ResetDeletedAt()
	opbuo.mutation.SetDeletedAt(u)
	return opbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableDeletedAt(u *uint32) *OrderPaymentBalanceUpdateOne {
	if u != nil {
		opbuo.SetDeletedAt(*u)
	}
	return opbuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opbuo *OrderPaymentBalanceUpdateOne) AddDeletedAt(u int32) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.AddDeletedAt(u)
	return opbuo
}

// SetEntID sets the "ent_id" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetEntID(u uuid.UUID) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetEntID(u)
	return opbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderPaymentBalanceUpdateOne {
	if u != nil {
		opbuo.SetEntID(*u)
	}
	return opbuo
}

// SetOrderID sets the "order_id" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetOrderID(u uuid.UUID) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetOrderID(u)
	return opbuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableOrderID(u *uuid.UUID) *OrderPaymentBalanceUpdateOne {
	if u != nil {
		opbuo.SetOrderID(*u)
	}
	return opbuo
}

// ClearOrderID clears the value of the "order_id" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearOrderID() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearOrderID()
	return opbuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetCoinTypeID(u uuid.UUID) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetCoinTypeID(u)
	return opbuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentBalanceUpdateOne {
	if u != nil {
		opbuo.SetCoinTypeID(*u)
	}
	return opbuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearCoinTypeID() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearCoinTypeID()
	return opbuo
}

// SetAmount sets the "amount" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetAmount(d decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetAmount(d)
	return opbuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableAmount(d *decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	if d != nil {
		opbuo.SetAmount(*d)
	}
	return opbuo
}

// ClearAmount clears the value of the "amount" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearAmount() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearAmount()
	return opbuo
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetCoinUsdCurrency(d)
	return opbuo
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	if d != nil {
		opbuo.SetCoinUsdCurrency(*d)
	}
	return opbuo
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearCoinUsdCurrency() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearCoinUsdCurrency()
	return opbuo
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetLocalCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetLocalCoinUsdCurrency(d)
	return opbuo
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	if d != nil {
		opbuo.SetLocalCoinUsdCurrency(*d)
	}
	return opbuo
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearLocalCoinUsdCurrency() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearLocalCoinUsdCurrency()
	return opbuo
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) SetLiveCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.SetLiveCoinUsdCurrency(d)
	return opbuo
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (opbuo *OrderPaymentBalanceUpdateOne) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceUpdateOne {
	if d != nil {
		opbuo.SetLiveCoinUsdCurrency(*d)
	}
	return opbuo
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (opbuo *OrderPaymentBalanceUpdateOne) ClearLiveCoinUsdCurrency() *OrderPaymentBalanceUpdateOne {
	opbuo.mutation.ClearLiveCoinUsdCurrency()
	return opbuo
}

// Mutation returns the OrderPaymentBalanceMutation object of the builder.
func (opbuo *OrderPaymentBalanceUpdateOne) Mutation() *OrderPaymentBalanceMutation {
	return opbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opbuo *OrderPaymentBalanceUpdateOne) Select(field string, fields ...string) *OrderPaymentBalanceUpdateOne {
	opbuo.fields = append([]string{field}, fields...)
	return opbuo
}

// Save executes the query and returns the updated OrderPaymentBalance entity.
func (opbuo *OrderPaymentBalanceUpdateOne) Save(ctx context.Context) (*OrderPaymentBalance, error) {
	var (
		err  error
		node *OrderPaymentBalance
	)
	if err := opbuo.defaults(); err != nil {
		return nil, err
	}
	if len(opbuo.hooks) == 0 {
		node, err = opbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opbuo.mutation = mutation
			node, err = opbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opbuo.hooks) - 1; i >= 0; i-- {
			if opbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPaymentBalance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPaymentBalanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opbuo *OrderPaymentBalanceUpdateOne) SaveX(ctx context.Context) *OrderPaymentBalance {
	node, err := opbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opbuo *OrderPaymentBalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := opbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opbuo *OrderPaymentBalanceUpdateOne) ExecX(ctx context.Context) {
	if err := opbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opbuo *OrderPaymentBalanceUpdateOne) defaults() error {
	if _, ok := opbuo.mutation.UpdatedAt(); !ok {
		if orderpaymentbalance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.UpdateDefaultUpdatedAt()
		opbuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opbuo *OrderPaymentBalanceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPaymentBalanceUpdateOne {
	opbuo.modifiers = append(opbuo.modifiers, modifiers...)
	return opbuo
}

func (opbuo *OrderPaymentBalanceUpdateOne) sqlSave(ctx context.Context) (_node *OrderPaymentBalance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentbalance.Table,
			Columns: orderpaymentbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentbalance.FieldID,
			},
		},
	}
	id, ok := opbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderPaymentBalance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpaymentbalance.FieldID)
		for _, f := range fields {
			if !orderpaymentbalance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpaymentbalance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldCreatedAt,
		})
	}
	if value, ok := opbuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldCreatedAt,
		})
	}
	if value, ok := opbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldUpdatedAt,
		})
	}
	if value, ok := opbuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldUpdatedAt,
		})
	}
	if value, ok := opbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldDeletedAt,
		})
	}
	if value, ok := opbuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldDeletedAt,
		})
	}
	if value, ok := opbuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldEntID,
		})
	}
	if value, ok := opbuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldOrderID,
		})
	}
	if opbuo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentbalance.FieldOrderID,
		})
	}
	if value, ok := opbuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinTypeID,
		})
	}
	if opbuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentbalance.FieldCoinTypeID,
		})
	}
	if value, ok := opbuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldAmount,
		})
	}
	if opbuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldAmount,
		})
	}
	if value, ok := opbuo.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinUsdCurrency,
		})
	}
	if opbuo.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldCoinUsdCurrency,
		})
	}
	if value, ok := opbuo.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLocalCoinUsdCurrency,
		})
	}
	if opbuo.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := opbuo.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLiveCoinUsdCurrency,
		})
	}
	if opbuo.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentbalance.FieldLiveCoinUsdCurrency,
		})
	}
	_spec.Modifiers = opbuo.modifiers
	_node = &OrderPaymentBalance{config: opbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
