// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/ordercoupon"
	"github.com/google/uuid"
)

// OrderCoupon is the model entity for the OrderCoupon schema.
type OrderCoupon struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID uuid.UUID `json:"coupon_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderCoupon) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordercoupon.FieldID, ordercoupon.FieldCreatedAt, ordercoupon.FieldUpdatedAt, ordercoupon.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case ordercoupon.FieldEntID, ordercoupon.FieldOrderID, ordercoupon.FieldCouponID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderCoupon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderCoupon fields.
func (oc *OrderCoupon) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordercoupon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oc.ID = uint32(value.Int64)
		case ordercoupon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = uint32(value.Int64)
			}
		case ordercoupon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = uint32(value.Int64)
			}
		case ordercoupon.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				oc.DeletedAt = uint32(value.Int64)
			}
		case ordercoupon.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				oc.EntID = *value
			}
		case ordercoupon.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				oc.OrderID = *value
			}
		case ordercoupon.FieldCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.CouponID); err != nil {
					return fmt.Errorf("unmarshal field coupon_id: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderCoupon.
// Note that you need to call OrderCoupon.Unwrap() before calling this method if this OrderCoupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OrderCoupon) Update() *OrderCouponUpdateOne {
	return (&OrderCouponClient{config: oc.config}).UpdateOne(oc)
}

// Unwrap unwraps the OrderCoupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OrderCoupon) Unwrap() *OrderCoupon {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderCoupon is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OrderCoupon) String() string {
	var builder strings.Builder
	builder.WriteString("OrderCoupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", oc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", oc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", oc.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", oc.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oc.OrderID))
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", oc.CouponID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderCoupons is a parsable slice of OrderCoupon.
type OrderCoupons []*OrderCoupon

func (oc OrderCoupons) config(cfg config) {
	for _i := range oc {
		oc[_i].config = cfg
	}
}
