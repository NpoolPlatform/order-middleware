// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentcontract"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentContractUpdate is the builder for updating OrderPaymentContract entities.
type OrderPaymentContractUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderPaymentContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderPaymentContractUpdate builder.
func (opcu *OrderPaymentContractUpdate) Where(ps ...predicate.OrderPaymentContract) *OrderPaymentContractUpdate {
	opcu.mutation.Where(ps...)
	return opcu
}

// SetCreatedAt sets the "created_at" field.
func (opcu *OrderPaymentContractUpdate) SetCreatedAt(u uint32) *OrderPaymentContractUpdate {
	opcu.mutation.ResetCreatedAt()
	opcu.mutation.SetCreatedAt(u)
	return opcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableCreatedAt(u *uint32) *OrderPaymentContractUpdate {
	if u != nil {
		opcu.SetCreatedAt(*u)
	}
	return opcu
}

// AddCreatedAt adds u to the "created_at" field.
func (opcu *OrderPaymentContractUpdate) AddCreatedAt(u int32) *OrderPaymentContractUpdate {
	opcu.mutation.AddCreatedAt(u)
	return opcu
}

// SetUpdatedAt sets the "updated_at" field.
func (opcu *OrderPaymentContractUpdate) SetUpdatedAt(u uint32) *OrderPaymentContractUpdate {
	opcu.mutation.ResetUpdatedAt()
	opcu.mutation.SetUpdatedAt(u)
	return opcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opcu *OrderPaymentContractUpdate) AddUpdatedAt(u int32) *OrderPaymentContractUpdate {
	opcu.mutation.AddUpdatedAt(u)
	return opcu
}

// SetDeletedAt sets the "deleted_at" field.
func (opcu *OrderPaymentContractUpdate) SetDeletedAt(u uint32) *OrderPaymentContractUpdate {
	opcu.mutation.ResetDeletedAt()
	opcu.mutation.SetDeletedAt(u)
	return opcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableDeletedAt(u *uint32) *OrderPaymentContractUpdate {
	if u != nil {
		opcu.SetDeletedAt(*u)
	}
	return opcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opcu *OrderPaymentContractUpdate) AddDeletedAt(u int32) *OrderPaymentContractUpdate {
	opcu.mutation.AddDeletedAt(u)
	return opcu
}

// SetEntID sets the "ent_id" field.
func (opcu *OrderPaymentContractUpdate) SetEntID(u uuid.UUID) *OrderPaymentContractUpdate {
	opcu.mutation.SetEntID(u)
	return opcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableEntID(u *uuid.UUID) *OrderPaymentContractUpdate {
	if u != nil {
		opcu.SetEntID(*u)
	}
	return opcu
}

// SetOrderID sets the "order_id" field.
func (opcu *OrderPaymentContractUpdate) SetOrderID(u uuid.UUID) *OrderPaymentContractUpdate {
	opcu.mutation.SetOrderID(u)
	return opcu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableOrderID(u *uuid.UUID) *OrderPaymentContractUpdate {
	if u != nil {
		opcu.SetOrderID(*u)
	}
	return opcu
}

// ClearOrderID clears the value of the "order_id" field.
func (opcu *OrderPaymentContractUpdate) ClearOrderID() *OrderPaymentContractUpdate {
	opcu.mutation.ClearOrderID()
	return opcu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opcu *OrderPaymentContractUpdate) SetCoinTypeID(u uuid.UUID) *OrderPaymentContractUpdate {
	opcu.mutation.SetCoinTypeID(u)
	return opcu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentContractUpdate {
	if u != nil {
		opcu.SetCoinTypeID(*u)
	}
	return opcu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (opcu *OrderPaymentContractUpdate) ClearCoinTypeID() *OrderPaymentContractUpdate {
	opcu.mutation.ClearCoinTypeID()
	return opcu
}

// SetAmount sets the "amount" field.
func (opcu *OrderPaymentContractUpdate) SetAmount(d decimal.Decimal) *OrderPaymentContractUpdate {
	opcu.mutation.SetAmount(d)
	return opcu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opcu *OrderPaymentContractUpdate) SetNillableAmount(d *decimal.Decimal) *OrderPaymentContractUpdate {
	if d != nil {
		opcu.SetAmount(*d)
	}
	return opcu
}

// ClearAmount clears the value of the "amount" field.
func (opcu *OrderPaymentContractUpdate) ClearAmount() *OrderPaymentContractUpdate {
	opcu.mutation.ClearAmount()
	return opcu
}

// Mutation returns the OrderPaymentContractMutation object of the builder.
func (opcu *OrderPaymentContractUpdate) Mutation() *OrderPaymentContractMutation {
	return opcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opcu *OrderPaymentContractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := opcu.defaults(); err != nil {
		return 0, err
	}
	if len(opcu.hooks) == 0 {
		affected, err = opcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opcu.mutation = mutation
			affected, err = opcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opcu.hooks) - 1; i >= 0; i-- {
			if opcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opcu *OrderPaymentContractUpdate) SaveX(ctx context.Context) int {
	affected, err := opcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opcu *OrderPaymentContractUpdate) Exec(ctx context.Context) error {
	_, err := opcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcu *OrderPaymentContractUpdate) ExecX(ctx context.Context) {
	if err := opcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opcu *OrderPaymentContractUpdate) defaults() error {
	if _, ok := opcu.mutation.UpdatedAt(); !ok {
		if orderpaymentcontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.UpdateDefaultUpdatedAt()
		opcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opcu *OrderPaymentContractUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPaymentContractUpdate {
	opcu.modifiers = append(opcu.modifiers, modifiers...)
	return opcu
}

func (opcu *OrderPaymentContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentcontract.Table,
			Columns: orderpaymentcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentcontract.FieldID,
			},
		},
	}
	if ps := opcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldCreatedAt,
		})
	}
	if value, ok := opcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldCreatedAt,
		})
	}
	if value, ok := opcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldUpdatedAt,
		})
	}
	if value, ok := opcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldUpdatedAt,
		})
	}
	if value, ok := opcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldDeletedAt,
		})
	}
	if value, ok := opcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldDeletedAt,
		})
	}
	if value, ok := opcu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldEntID,
		})
	}
	if value, ok := opcu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldOrderID,
		})
	}
	if opcu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentcontract.FieldOrderID,
		})
	}
	if value, ok := opcu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldCoinTypeID,
		})
	}
	if opcu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentcontract.FieldCoinTypeID,
		})
	}
	if value, ok := opcu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentcontract.FieldAmount,
		})
	}
	if opcu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentcontract.FieldAmount,
		})
	}
	_spec.Modifiers = opcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, opcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPaymentContractUpdateOne is the builder for updating a single OrderPaymentContract entity.
type OrderPaymentContractUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderPaymentContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (opcuo *OrderPaymentContractUpdateOne) SetCreatedAt(u uint32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.ResetCreatedAt()
	opcuo.mutation.SetCreatedAt(u)
	return opcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableCreatedAt(u *uint32) *OrderPaymentContractUpdateOne {
	if u != nil {
		opcuo.SetCreatedAt(*u)
	}
	return opcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (opcuo *OrderPaymentContractUpdateOne) AddCreatedAt(u int32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.AddCreatedAt(u)
	return opcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (opcuo *OrderPaymentContractUpdateOne) SetUpdatedAt(u uint32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.ResetUpdatedAt()
	opcuo.mutation.SetUpdatedAt(u)
	return opcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opcuo *OrderPaymentContractUpdateOne) AddUpdatedAt(u int32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.AddUpdatedAt(u)
	return opcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opcuo *OrderPaymentContractUpdateOne) SetDeletedAt(u uint32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.ResetDeletedAt()
	opcuo.mutation.SetDeletedAt(u)
	return opcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableDeletedAt(u *uint32) *OrderPaymentContractUpdateOne {
	if u != nil {
		opcuo.SetDeletedAt(*u)
	}
	return opcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opcuo *OrderPaymentContractUpdateOne) AddDeletedAt(u int32) *OrderPaymentContractUpdateOne {
	opcuo.mutation.AddDeletedAt(u)
	return opcuo
}

// SetEntID sets the "ent_id" field.
func (opcuo *OrderPaymentContractUpdateOne) SetEntID(u uuid.UUID) *OrderPaymentContractUpdateOne {
	opcuo.mutation.SetEntID(u)
	return opcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderPaymentContractUpdateOne {
	if u != nil {
		opcuo.SetEntID(*u)
	}
	return opcuo
}

// SetOrderID sets the "order_id" field.
func (opcuo *OrderPaymentContractUpdateOne) SetOrderID(u uuid.UUID) *OrderPaymentContractUpdateOne {
	opcuo.mutation.SetOrderID(u)
	return opcuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableOrderID(u *uuid.UUID) *OrderPaymentContractUpdateOne {
	if u != nil {
		opcuo.SetOrderID(*u)
	}
	return opcuo
}

// ClearOrderID clears the value of the "order_id" field.
func (opcuo *OrderPaymentContractUpdateOne) ClearOrderID() *OrderPaymentContractUpdateOne {
	opcuo.mutation.ClearOrderID()
	return opcuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opcuo *OrderPaymentContractUpdateOne) SetCoinTypeID(u uuid.UUID) *OrderPaymentContractUpdateOne {
	opcuo.mutation.SetCoinTypeID(u)
	return opcuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentContractUpdateOne {
	if u != nil {
		opcuo.SetCoinTypeID(*u)
	}
	return opcuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (opcuo *OrderPaymentContractUpdateOne) ClearCoinTypeID() *OrderPaymentContractUpdateOne {
	opcuo.mutation.ClearCoinTypeID()
	return opcuo
}

// SetAmount sets the "amount" field.
func (opcuo *OrderPaymentContractUpdateOne) SetAmount(d decimal.Decimal) *OrderPaymentContractUpdateOne {
	opcuo.mutation.SetAmount(d)
	return opcuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opcuo *OrderPaymentContractUpdateOne) SetNillableAmount(d *decimal.Decimal) *OrderPaymentContractUpdateOne {
	if d != nil {
		opcuo.SetAmount(*d)
	}
	return opcuo
}

// ClearAmount clears the value of the "amount" field.
func (opcuo *OrderPaymentContractUpdateOne) ClearAmount() *OrderPaymentContractUpdateOne {
	opcuo.mutation.ClearAmount()
	return opcuo
}

// Mutation returns the OrderPaymentContractMutation object of the builder.
func (opcuo *OrderPaymentContractUpdateOne) Mutation() *OrderPaymentContractMutation {
	return opcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opcuo *OrderPaymentContractUpdateOne) Select(field string, fields ...string) *OrderPaymentContractUpdateOne {
	opcuo.fields = append([]string{field}, fields...)
	return opcuo
}

// Save executes the query and returns the updated OrderPaymentContract entity.
func (opcuo *OrderPaymentContractUpdateOne) Save(ctx context.Context) (*OrderPaymentContract, error) {
	var (
		err  error
		node *OrderPaymentContract
	)
	if err := opcuo.defaults(); err != nil {
		return nil, err
	}
	if len(opcuo.hooks) == 0 {
		node, err = opcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opcuo.mutation = mutation
			node, err = opcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opcuo.hooks) - 1; i >= 0; i-- {
			if opcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPaymentContract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPaymentContractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opcuo *OrderPaymentContractUpdateOne) SaveX(ctx context.Context) *OrderPaymentContract {
	node, err := opcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opcuo *OrderPaymentContractUpdateOne) Exec(ctx context.Context) error {
	_, err := opcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcuo *OrderPaymentContractUpdateOne) ExecX(ctx context.Context) {
	if err := opcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opcuo *OrderPaymentContractUpdateOne) defaults() error {
	if _, ok := opcuo.mutation.UpdatedAt(); !ok {
		if orderpaymentcontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.UpdateDefaultUpdatedAt()
		opcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opcuo *OrderPaymentContractUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPaymentContractUpdateOne {
	opcuo.modifiers = append(opcuo.modifiers, modifiers...)
	return opcuo
}

func (opcuo *OrderPaymentContractUpdateOne) sqlSave(ctx context.Context) (_node *OrderPaymentContract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentcontract.Table,
			Columns: orderpaymentcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentcontract.FieldID,
			},
		},
	}
	id, ok := opcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderPaymentContract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpaymentcontract.FieldID)
		for _, f := range fields {
			if !orderpaymentcontract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpaymentcontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldCreatedAt,
		})
	}
	if value, ok := opcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldCreatedAt,
		})
	}
	if value, ok := opcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldUpdatedAt,
		})
	}
	if value, ok := opcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldUpdatedAt,
		})
	}
	if value, ok := opcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldDeletedAt,
		})
	}
	if value, ok := opcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldDeletedAt,
		})
	}
	if value, ok := opcuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldEntID,
		})
	}
	if value, ok := opcuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldOrderID,
		})
	}
	if opcuo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentcontract.FieldOrderID,
		})
	}
	if value, ok := opcuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldCoinTypeID,
		})
	}
	if opcuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpaymentcontract.FieldCoinTypeID,
		})
	}
	if value, ok := opcuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentcontract.FieldAmount,
		})
	}
	if opcuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpaymentcontract.FieldAmount,
		})
	}
	_spec.Modifiers = opcuo.modifiers
	_node = &OrderPaymentContract{config: opcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
