// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrentalstate"
	"github.com/google/uuid"
)

// PowerRentalStateCreate is the builder for creating a PowerRentalState entity.
type PowerRentalStateCreate struct {
	config
	mutation *PowerRentalStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (prsc *PowerRentalStateCreate) SetCreatedAt(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetCreatedAt(u)
	return prsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableCreatedAt(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetCreatedAt(*u)
	}
	return prsc
}

// SetUpdatedAt sets the "updated_at" field.
func (prsc *PowerRentalStateCreate) SetUpdatedAt(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetUpdatedAt(u)
	return prsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableUpdatedAt(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetUpdatedAt(*u)
	}
	return prsc
}

// SetDeletedAt sets the "deleted_at" field.
func (prsc *PowerRentalStateCreate) SetDeletedAt(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetDeletedAt(u)
	return prsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableDeletedAt(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetDeletedAt(*u)
	}
	return prsc
}

// SetEntID sets the "ent_id" field.
func (prsc *PowerRentalStateCreate) SetEntID(u uuid.UUID) *PowerRentalStateCreate {
	prsc.mutation.SetEntID(u)
	return prsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableEntID(u *uuid.UUID) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetEntID(*u)
	}
	return prsc
}

// SetOrderID sets the "order_id" field.
func (prsc *PowerRentalStateCreate) SetOrderID(u uuid.UUID) *PowerRentalStateCreate {
	prsc.mutation.SetOrderID(u)
	return prsc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableOrderID(u *uuid.UUID) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetOrderID(*u)
	}
	return prsc
}

// SetCancelState sets the "cancel_state" field.
func (prsc *PowerRentalStateCreate) SetCancelState(s string) *PowerRentalStateCreate {
	prsc.mutation.SetCancelState(s)
	return prsc
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableCancelState(s *string) *PowerRentalStateCreate {
	if s != nil {
		prsc.SetCancelState(*s)
	}
	return prsc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (prsc *PowerRentalStateCreate) SetDurationSeconds(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetDurationSeconds(u)
	return prsc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableDurationSeconds(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetDurationSeconds(*u)
	}
	return prsc
}

// SetPaidAt sets the "paid_at" field.
func (prsc *PowerRentalStateCreate) SetPaidAt(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetPaidAt(u)
	return prsc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillablePaidAt(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetPaidAt(*u)
	}
	return prsc
}

// SetUserSetPaid sets the "user_set_paid" field.
func (prsc *PowerRentalStateCreate) SetUserSetPaid(b bool) *PowerRentalStateCreate {
	prsc.mutation.SetUserSetPaid(b)
	return prsc
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableUserSetPaid(b *bool) *PowerRentalStateCreate {
	if b != nil {
		prsc.SetUserSetPaid(*b)
	}
	return prsc
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (prsc *PowerRentalStateCreate) SetUserSetCanceled(b bool) *PowerRentalStateCreate {
	prsc.mutation.SetUserSetCanceled(b)
	return prsc
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableUserSetCanceled(b *bool) *PowerRentalStateCreate {
	if b != nil {
		prsc.SetUserSetCanceled(*b)
	}
	return prsc
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (prsc *PowerRentalStateCreate) SetAdminSetCanceled(b bool) *PowerRentalStateCreate {
	prsc.mutation.SetAdminSetCanceled(b)
	return prsc
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableAdminSetCanceled(b *bool) *PowerRentalStateCreate {
	if b != nil {
		prsc.SetAdminSetCanceled(*b)
	}
	return prsc
}

// SetPaymentState sets the "payment_state" field.
func (prsc *PowerRentalStateCreate) SetPaymentState(s string) *PowerRentalStateCreate {
	prsc.mutation.SetPaymentState(s)
	return prsc
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillablePaymentState(s *string) *PowerRentalStateCreate {
	if s != nil {
		prsc.SetPaymentState(*s)
	}
	return prsc
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (prsc *PowerRentalStateCreate) SetOutofgasSeconds(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetOutofgasSeconds(u)
	return prsc
}

// SetNillableOutofgasSeconds sets the "outofgas_seconds" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableOutofgasSeconds(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetOutofgasSeconds(*u)
	}
	return prsc
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (prsc *PowerRentalStateCreate) SetCompensateSeconds(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetCompensateSeconds(u)
	return prsc
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableCompensateSeconds(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetCompensateSeconds(*u)
	}
	return prsc
}

// SetRenewState sets the "renew_state" field.
func (prsc *PowerRentalStateCreate) SetRenewState(s string) *PowerRentalStateCreate {
	prsc.mutation.SetRenewState(s)
	return prsc
}

// SetNillableRenewState sets the "renew_state" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableRenewState(s *string) *PowerRentalStateCreate {
	if s != nil {
		prsc.SetRenewState(*s)
	}
	return prsc
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (prsc *PowerRentalStateCreate) SetRenewNotifyAt(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetRenewNotifyAt(u)
	return prsc
}

// SetNillableRenewNotifyAt sets the "renew_notify_at" field if the given value is not nil.
func (prsc *PowerRentalStateCreate) SetNillableRenewNotifyAt(u *uint32) *PowerRentalStateCreate {
	if u != nil {
		prsc.SetRenewNotifyAt(*u)
	}
	return prsc
}

// SetID sets the "id" field.
func (prsc *PowerRentalStateCreate) SetID(u uint32) *PowerRentalStateCreate {
	prsc.mutation.SetID(u)
	return prsc
}

// Mutation returns the PowerRentalStateMutation object of the builder.
func (prsc *PowerRentalStateCreate) Mutation() *PowerRentalStateMutation {
	return prsc.mutation
}

// Save creates the PowerRentalState in the database.
func (prsc *PowerRentalStateCreate) Save(ctx context.Context) (*PowerRentalState, error) {
	var (
		err  error
		node *PowerRentalState
	)
	if err := prsc.defaults(); err != nil {
		return nil, err
	}
	if len(prsc.hooks) == 0 {
		if err = prsc.check(); err != nil {
			return nil, err
		}
		node, err = prsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prsc.check(); err != nil {
				return nil, err
			}
			prsc.mutation = mutation
			if node, err = prsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prsc.hooks) - 1; i >= 0; i-- {
			if prsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PowerRentalState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PowerRentalStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prsc *PowerRentalStateCreate) SaveX(ctx context.Context) *PowerRentalState {
	v, err := prsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prsc *PowerRentalStateCreate) Exec(ctx context.Context) error {
	_, err := prsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prsc *PowerRentalStateCreate) ExecX(ctx context.Context) {
	if err := prsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prsc *PowerRentalStateCreate) defaults() error {
	if _, ok := prsc.mutation.CreatedAt(); !ok {
		if powerrentalstate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.DefaultCreatedAt()
		prsc.mutation.SetCreatedAt(v)
	}
	if _, ok := prsc.mutation.UpdatedAt(); !ok {
		if powerrentalstate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.DefaultUpdatedAt()
		prsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := prsc.mutation.DeletedAt(); !ok {
		if powerrentalstate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.DefaultDeletedAt()
		prsc.mutation.SetDeletedAt(v)
	}
	if _, ok := prsc.mutation.EntID(); !ok {
		if powerrentalstate.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.DefaultEntID()
		prsc.mutation.SetEntID(v)
	}
	if _, ok := prsc.mutation.OrderID(); !ok {
		if powerrentalstate.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.DefaultOrderID()
		prsc.mutation.SetOrderID(v)
	}
	if _, ok := prsc.mutation.CancelState(); !ok {
		v := powerrentalstate.DefaultCancelState
		prsc.mutation.SetCancelState(v)
	}
	if _, ok := prsc.mutation.DurationSeconds(); !ok {
		v := powerrentalstate.DefaultDurationSeconds
		prsc.mutation.SetDurationSeconds(v)
	}
	if _, ok := prsc.mutation.PaidAt(); !ok {
		v := powerrentalstate.DefaultPaidAt
		prsc.mutation.SetPaidAt(v)
	}
	if _, ok := prsc.mutation.UserSetPaid(); !ok {
		v := powerrentalstate.DefaultUserSetPaid
		prsc.mutation.SetUserSetPaid(v)
	}
	if _, ok := prsc.mutation.UserSetCanceled(); !ok {
		v := powerrentalstate.DefaultUserSetCanceled
		prsc.mutation.SetUserSetCanceled(v)
	}
	if _, ok := prsc.mutation.AdminSetCanceled(); !ok {
		v := powerrentalstate.DefaultAdminSetCanceled
		prsc.mutation.SetAdminSetCanceled(v)
	}
	if _, ok := prsc.mutation.PaymentState(); !ok {
		v := powerrentalstate.DefaultPaymentState
		prsc.mutation.SetPaymentState(v)
	}
	if _, ok := prsc.mutation.OutofgasSeconds(); !ok {
		v := powerrentalstate.DefaultOutofgasSeconds
		prsc.mutation.SetOutofgasSeconds(v)
	}
	if _, ok := prsc.mutation.CompensateSeconds(); !ok {
		v := powerrentalstate.DefaultCompensateSeconds
		prsc.mutation.SetCompensateSeconds(v)
	}
	if _, ok := prsc.mutation.RenewState(); !ok {
		v := powerrentalstate.DefaultRenewState
		prsc.mutation.SetRenewState(v)
	}
	if _, ok := prsc.mutation.RenewNotifyAt(); !ok {
		v := powerrentalstate.DefaultRenewNotifyAt
		prsc.mutation.SetRenewNotifyAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prsc *PowerRentalStateCreate) check() error {
	if _, ok := prsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PowerRentalState.created_at"`)}
	}
	if _, ok := prsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PowerRentalState.updated_at"`)}
	}
	if _, ok := prsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PowerRentalState.deleted_at"`)}
	}
	if _, ok := prsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "PowerRentalState.ent_id"`)}
	}
	return nil
}

func (prsc *PowerRentalStateCreate) sqlSave(ctx context.Context) (*PowerRentalState, error) {
	_node, _spec := prsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (prsc *PowerRentalStateCreate) createSpec() (*PowerRentalState, *sqlgraph.CreateSpec) {
	var (
		_node = &PowerRentalState{config: prsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: powerrentalstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrentalstate.FieldID,
			},
		}
	)
	_spec.OnConflict = prsc.conflict
	if id, ok := prsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := prsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := prsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := prsc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := prsc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := prsc.mutation.CancelState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldCancelState,
		})
		_node.CancelState = value
	}
	if value, ok := prsc.mutation.DurationSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDurationSeconds,
		})
		_node.DurationSeconds = value
	}
	if value, ok := prsc.mutation.PaidAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldPaidAt,
		})
		_node.PaidAt = value
	}
	if value, ok := prsc.mutation.UserSetPaid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetPaid,
		})
		_node.UserSetPaid = value
	}
	if value, ok := prsc.mutation.UserSetCanceled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetCanceled,
		})
		_node.UserSetCanceled = value
	}
	if value, ok := prsc.mutation.AdminSetCanceled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldAdminSetCanceled,
		})
		_node.AdminSetCanceled = value
	}
	if value, ok := prsc.mutation.PaymentState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldPaymentState,
		})
		_node.PaymentState = value
	}
	if value, ok := prsc.mutation.OutofgasSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
		_node.OutofgasSeconds = value
	}
	if value, ok := prsc.mutation.CompensateSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
		_node.CompensateSeconds = value
	}
	if value, ok := prsc.mutation.RenewState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldRenewState,
		})
		_node.RenewState = value
	}
	if value, ok := prsc.mutation.RenewNotifyAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
		_node.RenewNotifyAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRentalState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prsc *PowerRentalStateCreate) OnConflict(opts ...sql.ConflictOption) *PowerRentalStateUpsertOne {
	prsc.conflict = opts
	return &PowerRentalStateUpsertOne{
		create: prsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRentalState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prsc *PowerRentalStateCreate) OnConflictColumns(columns ...string) *PowerRentalStateUpsertOne {
	prsc.conflict = append(prsc.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalStateUpsertOne{
		create: prsc,
	}
}

type (
	// PowerRentalStateUpsertOne is the builder for "upsert"-ing
	//  one PowerRentalState node.
	PowerRentalStateUpsertOne struct {
		create *PowerRentalStateCreate
	}

	// PowerRentalStateUpsert is the "OnConflict" setter.
	PowerRentalStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalStateUpsert) SetCreatedAt(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateCreatedAt() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalStateUpsert) AddCreatedAt(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalStateUpsert) SetUpdatedAt(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateUpdatedAt() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalStateUpsert) AddUpdatedAt(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalStateUpsert) SetDeletedAt(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateDeletedAt() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalStateUpsert) AddDeletedAt(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalStateUpsert) SetEntID(v uuid.UUID) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateEntID() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalStateUpsert) SetOrderID(v uuid.UUID) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateOrderID() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalStateUpsert) ClearOrderID() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldOrderID)
	return u
}

// SetCancelState sets the "cancel_state" field.
func (u *PowerRentalStateUpsert) SetCancelState(v string) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldCancelState, v)
	return u
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateCancelState() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldCancelState)
	return u
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *PowerRentalStateUpsert) ClearCancelState() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldCancelState)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *PowerRentalStateUpsert) SetDurationSeconds(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateDurationSeconds() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *PowerRentalStateUpsert) AddDurationSeconds(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *PowerRentalStateUpsert) ClearDurationSeconds() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldDurationSeconds)
	return u
}

// SetPaidAt sets the "paid_at" field.
func (u *PowerRentalStateUpsert) SetPaidAt(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldPaidAt, v)
	return u
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdatePaidAt() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldPaidAt)
	return u
}

// AddPaidAt adds v to the "paid_at" field.
func (u *PowerRentalStateUpsert) AddPaidAt(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldPaidAt, v)
	return u
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *PowerRentalStateUpsert) ClearPaidAt() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldPaidAt)
	return u
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *PowerRentalStateUpsert) SetUserSetPaid(v bool) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldUserSetPaid, v)
	return u
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateUserSetPaid() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldUserSetPaid)
	return u
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *PowerRentalStateUpsert) ClearUserSetPaid() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldUserSetPaid)
	return u
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *PowerRentalStateUpsert) SetUserSetCanceled(v bool) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldUserSetCanceled, v)
	return u
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateUserSetCanceled() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldUserSetCanceled)
	return u
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *PowerRentalStateUpsert) ClearUserSetCanceled() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldUserSetCanceled)
	return u
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *PowerRentalStateUpsert) SetAdminSetCanceled(v bool) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldAdminSetCanceled, v)
	return u
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateAdminSetCanceled() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldAdminSetCanceled)
	return u
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *PowerRentalStateUpsert) ClearAdminSetCanceled() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldAdminSetCanceled)
	return u
}

// SetPaymentState sets the "payment_state" field.
func (u *PowerRentalStateUpsert) SetPaymentState(v string) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldPaymentState, v)
	return u
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdatePaymentState() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldPaymentState)
	return u
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *PowerRentalStateUpsert) ClearPaymentState() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldPaymentState)
	return u
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (u *PowerRentalStateUpsert) SetOutofgasSeconds(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldOutofgasSeconds, v)
	return u
}

// UpdateOutofgasSeconds sets the "outofgas_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateOutofgasSeconds() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldOutofgasSeconds)
	return u
}

// AddOutofgasSeconds adds v to the "outofgas_seconds" field.
func (u *PowerRentalStateUpsert) AddOutofgasSeconds(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldOutofgasSeconds, v)
	return u
}

// ClearOutofgasSeconds clears the value of the "outofgas_seconds" field.
func (u *PowerRentalStateUpsert) ClearOutofgasSeconds() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldOutofgasSeconds)
	return u
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *PowerRentalStateUpsert) SetCompensateSeconds(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldCompensateSeconds, v)
	return u
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateCompensateSeconds() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldCompensateSeconds)
	return u
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *PowerRentalStateUpsert) AddCompensateSeconds(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldCompensateSeconds, v)
	return u
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *PowerRentalStateUpsert) ClearCompensateSeconds() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldCompensateSeconds)
	return u
}

// SetRenewState sets the "renew_state" field.
func (u *PowerRentalStateUpsert) SetRenewState(v string) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldRenewState, v)
	return u
}

// UpdateRenewState sets the "renew_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateRenewState() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldRenewState)
	return u
}

// ClearRenewState clears the value of the "renew_state" field.
func (u *PowerRentalStateUpsert) ClearRenewState() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldRenewState)
	return u
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (u *PowerRentalStateUpsert) SetRenewNotifyAt(v uint32) *PowerRentalStateUpsert {
	u.Set(powerrentalstate.FieldRenewNotifyAt, v)
	return u
}

// UpdateRenewNotifyAt sets the "renew_notify_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsert) UpdateRenewNotifyAt() *PowerRentalStateUpsert {
	u.SetExcluded(powerrentalstate.FieldRenewNotifyAt)
	return u
}

// AddRenewNotifyAt adds v to the "renew_notify_at" field.
func (u *PowerRentalStateUpsert) AddRenewNotifyAt(v uint32) *PowerRentalStateUpsert {
	u.Add(powerrentalstate.FieldRenewNotifyAt, v)
	return u
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (u *PowerRentalStateUpsert) ClearRenewNotifyAt() *PowerRentalStateUpsert {
	u.SetNull(powerrentalstate.FieldRenewNotifyAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PowerRentalState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrentalstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PowerRentalStateUpsertOne) UpdateNewValues() *PowerRentalStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(powerrentalstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PowerRentalState.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PowerRentalStateUpsertOne) Ignore() *PowerRentalStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalStateUpsertOne) DoNothing() *PowerRentalStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalStateCreate.OnConflict
// documentation for more info.
func (u *PowerRentalStateUpsertOne) Update(set func(*PowerRentalStateUpsert)) *PowerRentalStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalStateUpsertOne) SetCreatedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalStateUpsertOne) AddCreatedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateCreatedAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalStateUpsertOne) SetUpdatedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalStateUpsertOne) AddUpdatedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateUpdatedAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalStateUpsertOne) SetDeletedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalStateUpsertOne) AddDeletedAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateDeletedAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalStateUpsertOne) SetEntID(v uuid.UUID) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateEntID() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalStateUpsertOne) SetOrderID(v uuid.UUID) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateOrderID() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalStateUpsertOne) ClearOrderID() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearOrderID()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *PowerRentalStateUpsertOne) SetCancelState(v string) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateCancelState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *PowerRentalStateUpsertOne) ClearCancelState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearCancelState()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *PowerRentalStateUpsertOne) SetDurationSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *PowerRentalStateUpsertOne) AddDurationSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateDurationSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *PowerRentalStateUpsertOne) ClearDurationSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *PowerRentalStateUpsertOne) SetPaidAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *PowerRentalStateUpsertOne) AddPaidAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdatePaidAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *PowerRentalStateUpsertOne) ClearPaidAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *PowerRentalStateUpsertOne) SetUserSetPaid(v bool) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateUserSetPaid() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *PowerRentalStateUpsertOne) ClearUserSetPaid() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *PowerRentalStateUpsertOne) SetUserSetCanceled(v bool) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateUserSetCanceled() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *PowerRentalStateUpsertOne) ClearUserSetCanceled() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *PowerRentalStateUpsertOne) SetAdminSetCanceled(v bool) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetAdminSetCanceled(v)
	})
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateAdminSetCanceled() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateAdminSetCanceled()
	})
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *PowerRentalStateUpsertOne) ClearAdminSetCanceled() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearAdminSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *PowerRentalStateUpsertOne) SetPaymentState(v string) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdatePaymentState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *PowerRentalStateUpsertOne) ClearPaymentState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertOne) SetOutofgasSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetOutofgasSeconds(v)
	})
}

// AddOutofgasSeconds adds v to the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertOne) AddOutofgasSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddOutofgasSeconds(v)
	})
}

// UpdateOutofgasSeconds sets the "outofgas_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateOutofgasSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateOutofgasSeconds()
	})
}

// ClearOutofgasSeconds clears the value of the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertOne) ClearOutofgasSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearOutofgasSeconds()
	})
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *PowerRentalStateUpsertOne) SetCompensateSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCompensateSeconds(v)
	})
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *PowerRentalStateUpsertOne) AddCompensateSeconds(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddCompensateSeconds(v)
	})
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateCompensateSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCompensateSeconds()
	})
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *PowerRentalStateUpsertOne) ClearCompensateSeconds() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearCompensateSeconds()
	})
}

// SetRenewState sets the "renew_state" field.
func (u *PowerRentalStateUpsertOne) SetRenewState(v string) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetRenewState(v)
	})
}

// UpdateRenewState sets the "renew_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateRenewState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateRenewState()
	})
}

// ClearRenewState clears the value of the "renew_state" field.
func (u *PowerRentalStateUpsertOne) ClearRenewState() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearRenewState()
	})
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (u *PowerRentalStateUpsertOne) SetRenewNotifyAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetRenewNotifyAt(v)
	})
}

// AddRenewNotifyAt adds v to the "renew_notify_at" field.
func (u *PowerRentalStateUpsertOne) AddRenewNotifyAt(v uint32) *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddRenewNotifyAt(v)
	})
}

// UpdateRenewNotifyAt sets the "renew_notify_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertOne) UpdateRenewNotifyAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateRenewNotifyAt()
	})
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (u *PowerRentalStateUpsertOne) ClearRenewNotifyAt() *PowerRentalStateUpsertOne {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearRenewNotifyAt()
	})
}

// Exec executes the query.
func (u *PowerRentalStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PowerRentalStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PowerRentalStateUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PowerRentalStateUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PowerRentalStateCreateBulk is the builder for creating many PowerRentalState entities in bulk.
type PowerRentalStateCreateBulk struct {
	config
	builders []*PowerRentalStateCreate
	conflict []sql.ConflictOption
}

// Save creates the PowerRentalState entities in the database.
func (prscb *PowerRentalStateCreateBulk) Save(ctx context.Context) ([]*PowerRentalState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prscb.builders))
	nodes := make([]*PowerRentalState, len(prscb.builders))
	mutators := make([]Mutator, len(prscb.builders))
	for i := range prscb.builders {
		func(i int, root context.Context) {
			builder := prscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PowerRentalStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prscb *PowerRentalStateCreateBulk) SaveX(ctx context.Context) []*PowerRentalState {
	v, err := prscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prscb *PowerRentalStateCreateBulk) Exec(ctx context.Context) error {
	_, err := prscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prscb *PowerRentalStateCreateBulk) ExecX(ctx context.Context) {
	if err := prscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PowerRentalState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PowerRentalStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prscb *PowerRentalStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *PowerRentalStateUpsertBulk {
	prscb.conflict = opts
	return &PowerRentalStateUpsertBulk{
		create: prscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PowerRentalState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prscb *PowerRentalStateCreateBulk) OnConflictColumns(columns ...string) *PowerRentalStateUpsertBulk {
	prscb.conflict = append(prscb.conflict, sql.ConflictColumns(columns...))
	return &PowerRentalStateUpsertBulk{
		create: prscb,
	}
}

// PowerRentalStateUpsertBulk is the builder for "upsert"-ing
// a bulk of PowerRentalState nodes.
type PowerRentalStateUpsertBulk struct {
	create *PowerRentalStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PowerRentalState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(powerrentalstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PowerRentalStateUpsertBulk) UpdateNewValues() *PowerRentalStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(powerrentalstate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PowerRentalState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PowerRentalStateUpsertBulk) Ignore() *PowerRentalStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PowerRentalStateUpsertBulk) DoNothing() *PowerRentalStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PowerRentalStateCreateBulk.OnConflict
// documentation for more info.
func (u *PowerRentalStateUpsertBulk) Update(set func(*PowerRentalStateUpsert)) *PowerRentalStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PowerRentalStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PowerRentalStateUpsertBulk) SetCreatedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PowerRentalStateUpsertBulk) AddCreatedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateCreatedAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PowerRentalStateUpsertBulk) SetUpdatedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PowerRentalStateUpsertBulk) AddUpdatedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateUpdatedAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PowerRentalStateUpsertBulk) SetDeletedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PowerRentalStateUpsertBulk) AddDeletedAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateDeletedAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PowerRentalStateUpsertBulk) SetEntID(v uuid.UUID) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateEntID() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PowerRentalStateUpsertBulk) SetOrderID(v uuid.UUID) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateOrderID() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PowerRentalStateUpsertBulk) ClearOrderID() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearOrderID()
	})
}

// SetCancelState sets the "cancel_state" field.
func (u *PowerRentalStateUpsertBulk) SetCancelState(v string) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCancelState(v)
	})
}

// UpdateCancelState sets the "cancel_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateCancelState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCancelState()
	})
}

// ClearCancelState clears the value of the "cancel_state" field.
func (u *PowerRentalStateUpsertBulk) ClearCancelState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearCancelState()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *PowerRentalStateUpsertBulk) SetDurationSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *PowerRentalStateUpsertBulk) AddDurationSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateDurationSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *PowerRentalStateUpsertBulk) ClearDurationSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetPaidAt sets the "paid_at" field.
func (u *PowerRentalStateUpsertBulk) SetPaidAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetPaidAt(v)
	})
}

// AddPaidAt adds v to the "paid_at" field.
func (u *PowerRentalStateUpsertBulk) AddPaidAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddPaidAt(v)
	})
}

// UpdatePaidAt sets the "paid_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdatePaidAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdatePaidAt()
	})
}

// ClearPaidAt clears the value of the "paid_at" field.
func (u *PowerRentalStateUpsertBulk) ClearPaidAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearPaidAt()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *PowerRentalStateUpsertBulk) SetUserSetPaid(v bool) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateUserSetPaid() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *PowerRentalStateUpsertBulk) ClearUserSetPaid() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (u *PowerRentalStateUpsertBulk) SetUserSetCanceled(v bool) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetUserSetCanceled(v)
	})
}

// UpdateUserSetCanceled sets the "user_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateUserSetCanceled() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateUserSetCanceled()
	})
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (u *PowerRentalStateUpsertBulk) ClearUserSetCanceled() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearUserSetCanceled()
	})
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (u *PowerRentalStateUpsertBulk) SetAdminSetCanceled(v bool) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetAdminSetCanceled(v)
	})
}

// UpdateAdminSetCanceled sets the "admin_set_canceled" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateAdminSetCanceled() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateAdminSetCanceled()
	})
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (u *PowerRentalStateUpsertBulk) ClearAdminSetCanceled() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearAdminSetCanceled()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *PowerRentalStateUpsertBulk) SetPaymentState(v string) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdatePaymentState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *PowerRentalStateUpsertBulk) ClearPaymentState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearPaymentState()
	})
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertBulk) SetOutofgasSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetOutofgasSeconds(v)
	})
}

// AddOutofgasSeconds adds v to the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertBulk) AddOutofgasSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddOutofgasSeconds(v)
	})
}

// UpdateOutofgasSeconds sets the "outofgas_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateOutofgasSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateOutofgasSeconds()
	})
}

// ClearOutofgasSeconds clears the value of the "outofgas_seconds" field.
func (u *PowerRentalStateUpsertBulk) ClearOutofgasSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearOutofgasSeconds()
	})
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *PowerRentalStateUpsertBulk) SetCompensateSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetCompensateSeconds(v)
	})
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *PowerRentalStateUpsertBulk) AddCompensateSeconds(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddCompensateSeconds(v)
	})
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateCompensateSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateCompensateSeconds()
	})
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *PowerRentalStateUpsertBulk) ClearCompensateSeconds() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearCompensateSeconds()
	})
}

// SetRenewState sets the "renew_state" field.
func (u *PowerRentalStateUpsertBulk) SetRenewState(v string) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetRenewState(v)
	})
}

// UpdateRenewState sets the "renew_state" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateRenewState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateRenewState()
	})
}

// ClearRenewState clears the value of the "renew_state" field.
func (u *PowerRentalStateUpsertBulk) ClearRenewState() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearRenewState()
	})
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (u *PowerRentalStateUpsertBulk) SetRenewNotifyAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.SetRenewNotifyAt(v)
	})
}

// AddRenewNotifyAt adds v to the "renew_notify_at" field.
func (u *PowerRentalStateUpsertBulk) AddRenewNotifyAt(v uint32) *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.AddRenewNotifyAt(v)
	})
}

// UpdateRenewNotifyAt sets the "renew_notify_at" field to the value that was provided on create.
func (u *PowerRentalStateUpsertBulk) UpdateRenewNotifyAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.UpdateRenewNotifyAt()
	})
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (u *PowerRentalStateUpsertBulk) ClearRenewNotifyAt() *PowerRentalStateUpsertBulk {
	return u.Update(func(s *PowerRentalStateUpsert) {
		s.ClearRenewNotifyAt()
	})
}

// Exec executes the query.
func (u *PowerRentalStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PowerRentalStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PowerRentalStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PowerRentalStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
