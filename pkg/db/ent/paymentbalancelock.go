// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentbalancelock"
	"github.com/google/uuid"
)

// PaymentBalanceLock is the model entity for the PaymentBalanceLock schema.
type PaymentBalanceLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID uuid.UUID `json:"payment_id,omitempty"`
	// LedgerLockID holds the value of the "ledger_lock_id" field.
	LedgerLockID uuid.UUID `json:"ledger_lock_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentBalanceLock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentbalancelock.FieldID, paymentbalancelock.FieldCreatedAt, paymentbalancelock.FieldUpdatedAt, paymentbalancelock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case paymentbalancelock.FieldEntID, paymentbalancelock.FieldPaymentID, paymentbalancelock.FieldLedgerLockID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PaymentBalanceLock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentBalanceLock fields.
func (pbl *PaymentBalanceLock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentbalancelock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pbl.ID = uint32(value.Int64)
		case paymentbalancelock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pbl.CreatedAt = uint32(value.Int64)
			}
		case paymentbalancelock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pbl.UpdatedAt = uint32(value.Int64)
			}
		case paymentbalancelock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pbl.DeletedAt = uint32(value.Int64)
			}
		case paymentbalancelock.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				pbl.EntID = *value
			}
		case paymentbalancelock.FieldPaymentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value != nil {
				pbl.PaymentID = *value
			}
		case paymentbalancelock.FieldLedgerLockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ledger_lock_id", values[i])
			} else if value != nil {
				pbl.LedgerLockID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PaymentBalanceLock.
// Note that you need to call PaymentBalanceLock.Unwrap() before calling this method if this PaymentBalanceLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (pbl *PaymentBalanceLock) Update() *PaymentBalanceLockUpdateOne {
	return (&PaymentBalanceLockClient{config: pbl.config}).UpdateOne(pbl)
}

// Unwrap unwraps the PaymentBalanceLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pbl *PaymentBalanceLock) Unwrap() *PaymentBalanceLock {
	_tx, ok := pbl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentBalanceLock is not a transactional entity")
	}
	pbl.config.driver = _tx.drv
	return pbl
}

// String implements the fmt.Stringer.
func (pbl *PaymentBalanceLock) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentBalanceLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pbl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pbl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pbl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pbl.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", pbl.EntID))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", pbl.PaymentID))
	builder.WriteString(", ")
	builder.WriteString("ledger_lock_id=")
	builder.WriteString(fmt.Sprintf("%v", pbl.LedgerLockID))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentBalanceLocks is a parsable slice of PaymentBalanceLock.
type PaymentBalanceLocks []*PaymentBalanceLock

func (pbl PaymentBalanceLocks) config(cfg config) {
	for _i := range pbl {
		pbl[_i].config = cfg
	}
}
