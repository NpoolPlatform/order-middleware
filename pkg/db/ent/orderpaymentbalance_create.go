// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentbalance"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentBalanceCreate is the builder for creating a OrderPaymentBalance entity.
type OrderPaymentBalanceCreate struct {
	config
	mutation *OrderPaymentBalanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (opbc *OrderPaymentBalanceCreate) SetCreatedAt(u uint32) *OrderPaymentBalanceCreate {
	opbc.mutation.SetCreatedAt(u)
	return opbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableCreatedAt(u *uint32) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetCreatedAt(*u)
	}
	return opbc
}

// SetUpdatedAt sets the "updated_at" field.
func (opbc *OrderPaymentBalanceCreate) SetUpdatedAt(u uint32) *OrderPaymentBalanceCreate {
	opbc.mutation.SetUpdatedAt(u)
	return opbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableUpdatedAt(u *uint32) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetUpdatedAt(*u)
	}
	return opbc
}

// SetDeletedAt sets the "deleted_at" field.
func (opbc *OrderPaymentBalanceCreate) SetDeletedAt(u uint32) *OrderPaymentBalanceCreate {
	opbc.mutation.SetDeletedAt(u)
	return opbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableDeletedAt(u *uint32) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetDeletedAt(*u)
	}
	return opbc
}

// SetEntID sets the "ent_id" field.
func (opbc *OrderPaymentBalanceCreate) SetEntID(u uuid.UUID) *OrderPaymentBalanceCreate {
	opbc.mutation.SetEntID(u)
	return opbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableEntID(u *uuid.UUID) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetEntID(*u)
	}
	return opbc
}

// SetOrderID sets the "order_id" field.
func (opbc *OrderPaymentBalanceCreate) SetOrderID(u uuid.UUID) *OrderPaymentBalanceCreate {
	opbc.mutation.SetOrderID(u)
	return opbc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableOrderID(u *uuid.UUID) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetOrderID(*u)
	}
	return opbc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opbc *OrderPaymentBalanceCreate) SetCoinTypeID(u uuid.UUID) *OrderPaymentBalanceCreate {
	opbc.mutation.SetCoinTypeID(u)
	return opbc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentBalanceCreate {
	if u != nil {
		opbc.SetCoinTypeID(*u)
	}
	return opbc
}

// SetAmount sets the "amount" field.
func (opbc *OrderPaymentBalanceCreate) SetAmount(d decimal.Decimal) *OrderPaymentBalanceCreate {
	opbc.mutation.SetAmount(d)
	return opbc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableAmount(d *decimal.Decimal) *OrderPaymentBalanceCreate {
	if d != nil {
		opbc.SetAmount(*d)
	}
	return opbc
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (opbc *OrderPaymentBalanceCreate) SetCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceCreate {
	opbc.mutation.SetCoinUsdCurrency(d)
	return opbc
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceCreate {
	if d != nil {
		opbc.SetCoinUsdCurrency(*d)
	}
	return opbc
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (opbc *OrderPaymentBalanceCreate) SetLocalCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceCreate {
	opbc.mutation.SetLocalCoinUsdCurrency(d)
	return opbc
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceCreate {
	if d != nil {
		opbc.SetLocalCoinUsdCurrency(*d)
	}
	return opbc
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (opbc *OrderPaymentBalanceCreate) SetLiveCoinUsdCurrency(d decimal.Decimal) *OrderPaymentBalanceCreate {
	opbc.mutation.SetLiveCoinUsdCurrency(d)
	return opbc
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (opbc *OrderPaymentBalanceCreate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *OrderPaymentBalanceCreate {
	if d != nil {
		opbc.SetLiveCoinUsdCurrency(*d)
	}
	return opbc
}

// SetID sets the "id" field.
func (opbc *OrderPaymentBalanceCreate) SetID(u uint32) *OrderPaymentBalanceCreate {
	opbc.mutation.SetID(u)
	return opbc
}

// Mutation returns the OrderPaymentBalanceMutation object of the builder.
func (opbc *OrderPaymentBalanceCreate) Mutation() *OrderPaymentBalanceMutation {
	return opbc.mutation
}

// Save creates the OrderPaymentBalance in the database.
func (opbc *OrderPaymentBalanceCreate) Save(ctx context.Context) (*OrderPaymentBalance, error) {
	var (
		err  error
		node *OrderPaymentBalance
	)
	if err := opbc.defaults(); err != nil {
		return nil, err
	}
	if len(opbc.hooks) == 0 {
		if err = opbc.check(); err != nil {
			return nil, err
		}
		node, err = opbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opbc.check(); err != nil {
				return nil, err
			}
			opbc.mutation = mutation
			if node, err = opbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(opbc.hooks) - 1; i >= 0; i-- {
			if opbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPaymentBalance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPaymentBalanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (opbc *OrderPaymentBalanceCreate) SaveX(ctx context.Context) *OrderPaymentBalance {
	v, err := opbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opbc *OrderPaymentBalanceCreate) Exec(ctx context.Context) error {
	_, err := opbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opbc *OrderPaymentBalanceCreate) ExecX(ctx context.Context) {
	if err := opbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opbc *OrderPaymentBalanceCreate) defaults() error {
	if _, ok := opbc.mutation.CreatedAt(); !ok {
		if orderpaymentbalance.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultCreatedAt()
		opbc.mutation.SetCreatedAt(v)
	}
	if _, ok := opbc.mutation.UpdatedAt(); !ok {
		if orderpaymentbalance.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultUpdatedAt()
		opbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := opbc.mutation.DeletedAt(); !ok {
		if orderpaymentbalance.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultDeletedAt()
		opbc.mutation.SetDeletedAt(v)
	}
	if _, ok := opbc.mutation.EntID(); !ok {
		if orderpaymentbalance.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultEntID()
		opbc.mutation.SetEntID(v)
	}
	if _, ok := opbc.mutation.OrderID(); !ok {
		if orderpaymentbalance.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultOrderID()
		opbc.mutation.SetOrderID(v)
	}
	if _, ok := opbc.mutation.CoinTypeID(); !ok {
		if orderpaymentbalance.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentbalance.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := orderpaymentbalance.DefaultCoinTypeID()
		opbc.mutation.SetCoinTypeID(v)
	}
	if _, ok := opbc.mutation.Amount(); !ok {
		v := orderpaymentbalance.DefaultAmount
		opbc.mutation.SetAmount(v)
	}
	if _, ok := opbc.mutation.CoinUsdCurrency(); !ok {
		v := orderpaymentbalance.DefaultCoinUsdCurrency
		opbc.mutation.SetCoinUsdCurrency(v)
	}
	if _, ok := opbc.mutation.LocalCoinUsdCurrency(); !ok {
		v := orderpaymentbalance.DefaultLocalCoinUsdCurrency
		opbc.mutation.SetLocalCoinUsdCurrency(v)
	}
	if _, ok := opbc.mutation.LiveCoinUsdCurrency(); !ok {
		v := orderpaymentbalance.DefaultLiveCoinUsdCurrency
		opbc.mutation.SetLiveCoinUsdCurrency(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opbc *OrderPaymentBalanceCreate) check() error {
	if _, ok := opbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPaymentBalance.created_at"`)}
	}
	if _, ok := opbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPaymentBalance.updated_at"`)}
	}
	if _, ok := opbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderPaymentBalance.deleted_at"`)}
	}
	if _, ok := opbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "OrderPaymentBalance.ent_id"`)}
	}
	return nil
}

func (opbc *OrderPaymentBalanceCreate) sqlSave(ctx context.Context) (*OrderPaymentBalance, error) {
	_node, _spec := opbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (opbc *OrderPaymentBalanceCreate) createSpec() (*OrderPaymentBalance, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPaymentBalance{config: opbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpaymentbalance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentbalance.FieldID,
			},
		}
	)
	_spec.OnConflict = opbc.conflict
	if id, ok := opbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := opbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := opbc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentbalance.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := opbc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := opbc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := opbc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := opbc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := opbc.mutation.CoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldCoinUsdCurrency,
		})
		_node.CoinUsdCurrency = value
	}
	if value, ok := opbc.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLocalCoinUsdCurrency,
		})
		_node.LocalCoinUsdCurrency = value
	}
	if value, ok := opbc.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentbalance.FieldLiveCoinUsdCurrency,
		})
		_node.LiveCoinUsdCurrency = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentBalance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentBalanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opbc *OrderPaymentBalanceCreate) OnConflict(opts ...sql.ConflictOption) *OrderPaymentBalanceUpsertOne {
	opbc.conflict = opts
	return &OrderPaymentBalanceUpsertOne{
		create: opbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opbc *OrderPaymentBalanceCreate) OnConflictColumns(columns ...string) *OrderPaymentBalanceUpsertOne {
	opbc.conflict = append(opbc.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentBalanceUpsertOne{
		create: opbc,
	}
}

type (
	// OrderPaymentBalanceUpsertOne is the builder for "upsert"-ing
	//  one OrderPaymentBalance node.
	OrderPaymentBalanceUpsertOne struct {
		create *OrderPaymentBalanceCreate
	}

	// OrderPaymentBalanceUpsert is the "OnConflict" setter.
	OrderPaymentBalanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentBalanceUpsert) SetCreatedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateCreatedAt() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentBalanceUpsert) AddCreatedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Add(orderpaymentbalance.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentBalanceUpsert) SetUpdatedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateUpdatedAt() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentBalanceUpsert) AddUpdatedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Add(orderpaymentbalance.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentBalanceUpsert) SetDeletedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateDeletedAt() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentBalanceUpsert) AddDeletedAt(v uint32) *OrderPaymentBalanceUpsert {
	u.Add(orderpaymentbalance.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentBalanceUpsert) SetEntID(v uuid.UUID) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateEntID() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentBalanceUpsert) SetOrderID(v uuid.UUID) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateOrderID() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentBalanceUpsert) ClearOrderID() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldOrderID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsert) SetCoinTypeID(v uuid.UUID) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateCoinTypeID() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsert) ClearCoinTypeID() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentBalanceUpsert) SetAmount(v decimal.Decimal) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateAmount() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentBalanceUpsert) ClearAmount() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldAmount)
	return u
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) SetCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldCoinUsdCurrency, v)
	return u
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldCoinUsdCurrency)
	return u
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) ClearCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldCoinUsdCurrency)
	return u
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) SetLocalCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldLocalCoinUsdCurrency, v)
	return u
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateLocalCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldLocalCoinUsdCurrency)
	return u
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) ClearLocalCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldLocalCoinUsdCurrency)
	return u
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) SetLiveCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsert {
	u.Set(orderpaymentbalance.FieldLiveCoinUsdCurrency, v)
	return u
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsert) UpdateLiveCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetExcluded(orderpaymentbalance.FieldLiveCoinUsdCurrency)
	return u
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsert) ClearLiveCoinUsdCurrency() *OrderPaymentBalanceUpsert {
	u.SetNull(orderpaymentbalance.FieldLiveCoinUsdCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderPaymentBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymentbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentBalanceUpsertOne) UpdateNewValues() *OrderPaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderpaymentbalance.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderPaymentBalance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderPaymentBalanceUpsertOne) Ignore() *OrderPaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentBalanceUpsertOne) DoNothing() *OrderPaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentBalanceCreate.OnConflict
// documentation for more info.
func (u *OrderPaymentBalanceUpsertOne) Update(set func(*OrderPaymentBalanceUpsert)) *OrderPaymentBalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentBalanceUpsertOne) SetCreatedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentBalanceUpsertOne) AddCreatedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateCreatedAt() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentBalanceUpsertOne) SetUpdatedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentBalanceUpsertOne) AddUpdatedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateUpdatedAt() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentBalanceUpsertOne) SetDeletedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentBalanceUpsertOne) AddDeletedAt(v uint32) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateDeletedAt() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentBalanceUpsertOne) SetEntID(v uuid.UUID) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateEntID() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentBalanceUpsertOne) SetOrderID(v uuid.UUID) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateOrderID() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentBalanceUpsertOne) ClearOrderID() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsertOne) SetCoinTypeID(v uuid.UUID) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateCoinTypeID() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsertOne) ClearCoinTypeID() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentBalanceUpsertOne) SetAmount(v decimal.Decimal) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateAmount() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentBalanceUpsertOne) ClearAmount() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) SetCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) ClearCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) SetLocalCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateLocalCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) ClearLocalCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) SetLiveCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertOne) UpdateLiveCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertOne) ClearLiveCoinUsdCurrency() *OrderPaymentBalanceUpsertOne {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *OrderPaymentBalanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentBalanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentBalanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPaymentBalanceUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPaymentBalanceUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPaymentBalanceCreateBulk is the builder for creating many OrderPaymentBalance entities in bulk.
type OrderPaymentBalanceCreateBulk struct {
	config
	builders []*OrderPaymentBalanceCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPaymentBalance entities in the database.
func (opbcb *OrderPaymentBalanceCreateBulk) Save(ctx context.Context) ([]*OrderPaymentBalance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opbcb.builders))
	nodes := make([]*OrderPaymentBalance, len(opbcb.builders))
	mutators := make([]Mutator, len(opbcb.builders))
	for i := range opbcb.builders {
		func(i int, root context.Context) {
			builder := opbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPaymentBalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opbcb *OrderPaymentBalanceCreateBulk) SaveX(ctx context.Context) []*OrderPaymentBalance {
	v, err := opbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opbcb *OrderPaymentBalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := opbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opbcb *OrderPaymentBalanceCreateBulk) ExecX(ctx context.Context) {
	if err := opbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentBalance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentBalanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opbcb *OrderPaymentBalanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPaymentBalanceUpsertBulk {
	opbcb.conflict = opts
	return &OrderPaymentBalanceUpsertBulk{
		create: opbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentBalance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opbcb *OrderPaymentBalanceCreateBulk) OnConflictColumns(columns ...string) *OrderPaymentBalanceUpsertBulk {
	opbcb.conflict = append(opbcb.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentBalanceUpsertBulk{
		create: opbcb,
	}
}

// OrderPaymentBalanceUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPaymentBalance nodes.
type OrderPaymentBalanceUpsertBulk struct {
	create *OrderPaymentBalanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPaymentBalance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymentbalance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentBalanceUpsertBulk) UpdateNewValues() *OrderPaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderpaymentbalance.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPaymentBalance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderPaymentBalanceUpsertBulk) Ignore() *OrderPaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentBalanceUpsertBulk) DoNothing() *OrderPaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentBalanceCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPaymentBalanceUpsertBulk) Update(set func(*OrderPaymentBalanceUpsert)) *OrderPaymentBalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentBalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentBalanceUpsertBulk) SetCreatedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentBalanceUpsertBulk) AddCreatedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateCreatedAt() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentBalanceUpsertBulk) SetUpdatedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentBalanceUpsertBulk) AddUpdatedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateUpdatedAt() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentBalanceUpsertBulk) SetDeletedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentBalanceUpsertBulk) AddDeletedAt(v uint32) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateDeletedAt() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentBalanceUpsertBulk) SetEntID(v uuid.UUID) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateEntID() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentBalanceUpsertBulk) SetOrderID(v uuid.UUID) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateOrderID() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearOrderID() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsertBulk) SetCoinTypeID(v uuid.UUID) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateCoinTypeID() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearCoinTypeID() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentBalanceUpsertBulk) SetAmount(v decimal.Decimal) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateAmount() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearAmount() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) SetCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) SetLocalCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateLocalCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearLocalCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) SetLiveCoinUsdCurrency(v decimal.Decimal) *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *OrderPaymentBalanceUpsertBulk) UpdateLiveCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *OrderPaymentBalanceUpsertBulk) ClearLiveCoinUsdCurrency() *OrderPaymentBalanceUpsertBulk {
	return u.Update(func(s *OrderPaymentBalanceUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *OrderPaymentBalanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPaymentBalanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentBalanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentBalanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
