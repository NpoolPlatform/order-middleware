// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FeeOrderStateUpdate is the builder for updating FeeOrderState entities.
type FeeOrderStateUpdate struct {
	config
	hooks     []Hook
	mutation  *FeeOrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeeOrderStateUpdate builder.
func (fosu *FeeOrderStateUpdate) Where(ps ...predicate.FeeOrderState) *FeeOrderStateUpdate {
	fosu.mutation.Where(ps...)
	return fosu
}

// SetCreatedAt sets the "created_at" field.
func (fosu *FeeOrderStateUpdate) SetCreatedAt(u uint32) *FeeOrderStateUpdate {
	fosu.mutation.ResetCreatedAt()
	fosu.mutation.SetCreatedAt(u)
	return fosu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableCreatedAt(u *uint32) *FeeOrderStateUpdate {
	if u != nil {
		fosu.SetCreatedAt(*u)
	}
	return fosu
}

// AddCreatedAt adds u to the "created_at" field.
func (fosu *FeeOrderStateUpdate) AddCreatedAt(u int32) *FeeOrderStateUpdate {
	fosu.mutation.AddCreatedAt(u)
	return fosu
}

// SetUpdatedAt sets the "updated_at" field.
func (fosu *FeeOrderStateUpdate) SetUpdatedAt(u uint32) *FeeOrderStateUpdate {
	fosu.mutation.ResetUpdatedAt()
	fosu.mutation.SetUpdatedAt(u)
	return fosu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fosu *FeeOrderStateUpdate) AddUpdatedAt(u int32) *FeeOrderStateUpdate {
	fosu.mutation.AddUpdatedAt(u)
	return fosu
}

// SetDeletedAt sets the "deleted_at" field.
func (fosu *FeeOrderStateUpdate) SetDeletedAt(u uint32) *FeeOrderStateUpdate {
	fosu.mutation.ResetDeletedAt()
	fosu.mutation.SetDeletedAt(u)
	return fosu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableDeletedAt(u *uint32) *FeeOrderStateUpdate {
	if u != nil {
		fosu.SetDeletedAt(*u)
	}
	return fosu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fosu *FeeOrderStateUpdate) AddDeletedAt(u int32) *FeeOrderStateUpdate {
	fosu.mutation.AddDeletedAt(u)
	return fosu
}

// SetEntID sets the "ent_id" field.
func (fosu *FeeOrderStateUpdate) SetEntID(u uuid.UUID) *FeeOrderStateUpdate {
	fosu.mutation.SetEntID(u)
	return fosu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableEntID(u *uuid.UUID) *FeeOrderStateUpdate {
	if u != nil {
		fosu.SetEntID(*u)
	}
	return fosu
}

// SetOrderID sets the "order_id" field.
func (fosu *FeeOrderStateUpdate) SetOrderID(u uuid.UUID) *FeeOrderStateUpdate {
	fosu.mutation.SetOrderID(u)
	return fosu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableOrderID(u *uuid.UUID) *FeeOrderStateUpdate {
	if u != nil {
		fosu.SetOrderID(*u)
	}
	return fosu
}

// ClearOrderID clears the value of the "order_id" field.
func (fosu *FeeOrderStateUpdate) ClearOrderID() *FeeOrderStateUpdate {
	fosu.mutation.ClearOrderID()
	return fosu
}

// SetPaidAt sets the "paid_at" field.
func (fosu *FeeOrderStateUpdate) SetPaidAt(u uint32) *FeeOrderStateUpdate {
	fosu.mutation.ResetPaidAt()
	fosu.mutation.SetPaidAt(u)
	return fosu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillablePaidAt(u *uint32) *FeeOrderStateUpdate {
	if u != nil {
		fosu.SetPaidAt(*u)
	}
	return fosu
}

// AddPaidAt adds u to the "paid_at" field.
func (fosu *FeeOrderStateUpdate) AddPaidAt(u int32) *FeeOrderStateUpdate {
	fosu.mutation.AddPaidAt(u)
	return fosu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (fosu *FeeOrderStateUpdate) ClearPaidAt() *FeeOrderStateUpdate {
	fosu.mutation.ClearPaidAt()
	return fosu
}

// SetUserSetPaid sets the "user_set_paid" field.
func (fosu *FeeOrderStateUpdate) SetUserSetPaid(b bool) *FeeOrderStateUpdate {
	fosu.mutation.SetUserSetPaid(b)
	return fosu
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableUserSetPaid(b *bool) *FeeOrderStateUpdate {
	if b != nil {
		fosu.SetUserSetPaid(*b)
	}
	return fosu
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (fosu *FeeOrderStateUpdate) ClearUserSetPaid() *FeeOrderStateUpdate {
	fosu.mutation.ClearUserSetPaid()
	return fosu
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (fosu *FeeOrderStateUpdate) SetUserSetCanceled(b bool) *FeeOrderStateUpdate {
	fosu.mutation.SetUserSetCanceled(b)
	return fosu
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableUserSetCanceled(b *bool) *FeeOrderStateUpdate {
	if b != nil {
		fosu.SetUserSetCanceled(*b)
	}
	return fosu
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (fosu *FeeOrderStateUpdate) ClearUserSetCanceled() *FeeOrderStateUpdate {
	fosu.mutation.ClearUserSetCanceled()
	return fosu
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (fosu *FeeOrderStateUpdate) SetAdminSetCanceled(b bool) *FeeOrderStateUpdate {
	fosu.mutation.SetAdminSetCanceled(b)
	return fosu
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableAdminSetCanceled(b *bool) *FeeOrderStateUpdate {
	if b != nil {
		fosu.SetAdminSetCanceled(*b)
	}
	return fosu
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (fosu *FeeOrderStateUpdate) ClearAdminSetCanceled() *FeeOrderStateUpdate {
	fosu.mutation.ClearAdminSetCanceled()
	return fosu
}

// SetPaymentState sets the "payment_state" field.
func (fosu *FeeOrderStateUpdate) SetPaymentState(s string) *FeeOrderStateUpdate {
	fosu.mutation.SetPaymentState(s)
	return fosu
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillablePaymentState(s *string) *FeeOrderStateUpdate {
	if s != nil {
		fosu.SetPaymentState(*s)
	}
	return fosu
}

// ClearPaymentState clears the value of the "payment_state" field.
func (fosu *FeeOrderStateUpdate) ClearPaymentState() *FeeOrderStateUpdate {
	fosu.mutation.ClearPaymentState()
	return fosu
}

// SetCancelState sets the "cancel_state" field.
func (fosu *FeeOrderStateUpdate) SetCancelState(s string) *FeeOrderStateUpdate {
	fosu.mutation.SetCancelState(s)
	return fosu
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (fosu *FeeOrderStateUpdate) SetNillableCancelState(s *string) *FeeOrderStateUpdate {
	if s != nil {
		fosu.SetCancelState(*s)
	}
	return fosu
}

// ClearCancelState clears the value of the "cancel_state" field.
func (fosu *FeeOrderStateUpdate) ClearCancelState() *FeeOrderStateUpdate {
	fosu.mutation.ClearCancelState()
	return fosu
}

// Mutation returns the FeeOrderStateMutation object of the builder.
func (fosu *FeeOrderStateUpdate) Mutation() *FeeOrderStateMutation {
	return fosu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fosu *FeeOrderStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fosu.defaults(); err != nil {
		return 0, err
	}
	if len(fosu.hooks) == 0 {
		affected, err = fosu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeOrderStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fosu.mutation = mutation
			affected, err = fosu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fosu.hooks) - 1; i >= 0; i-- {
			if fosu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fosu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fosu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fosu *FeeOrderStateUpdate) SaveX(ctx context.Context) int {
	affected, err := fosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fosu *FeeOrderStateUpdate) Exec(ctx context.Context) error {
	_, err := fosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fosu *FeeOrderStateUpdate) ExecX(ctx context.Context) {
	if err := fosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fosu *FeeOrderStateUpdate) defaults() error {
	if _, ok := fosu.mutation.UpdatedAt(); !ok {
		if feeorderstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := feeorderstate.UpdateDefaultUpdatedAt()
		fosu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fosu *FeeOrderStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeeOrderStateUpdate {
	fosu.modifiers = append(fosu.modifiers, modifiers...)
	return fosu
}

func (fosu *FeeOrderStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeorderstate.Table,
			Columns: feeorderstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: feeorderstate.FieldID,
			},
		},
	}
	if ps := fosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fosu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldCreatedAt,
		})
	}
	if value, ok := fosu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldCreatedAt,
		})
	}
	if value, ok := fosu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldUpdatedAt,
		})
	}
	if value, ok := fosu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldUpdatedAt,
		})
	}
	if value, ok := fosu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldDeletedAt,
		})
	}
	if value, ok := fosu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldDeletedAt,
		})
	}
	if value, ok := fosu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldEntID,
		})
	}
	if value, ok := fosu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldOrderID,
		})
	}
	if fosu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: feeorderstate.FieldOrderID,
		})
	}
	if value, ok := fosu.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if value, ok := fosu.mutation.AddedPaidAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if fosu.mutation.PaidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if value, ok := fosu.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetPaid,
		})
	}
	if fosu.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldUserSetPaid,
		})
	}
	if value, ok := fosu.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetCanceled,
		})
	}
	if fosu.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldUserSetCanceled,
		})
	}
	if value, ok := fosu.mutation.AdminSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldAdminSetCanceled,
		})
	}
	if fosu.mutation.AdminSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldAdminSetCanceled,
		})
	}
	if value, ok := fosu.mutation.PaymentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldPaymentState,
		})
	}
	if fosu.mutation.PaymentStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feeorderstate.FieldPaymentState,
		})
	}
	if value, ok := fosu.mutation.CancelState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldCancelState,
		})
	}
	if fosu.mutation.CancelStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feeorderstate.FieldCancelState,
		})
	}
	_spec.Modifiers = fosu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeorderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FeeOrderStateUpdateOne is the builder for updating a single FeeOrderState entity.
type FeeOrderStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeeOrderStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fosuo *FeeOrderStateUpdateOne) SetCreatedAt(u uint32) *FeeOrderStateUpdateOne {
	fosuo.mutation.ResetCreatedAt()
	fosuo.mutation.SetCreatedAt(u)
	return fosuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableCreatedAt(u *uint32) *FeeOrderStateUpdateOne {
	if u != nil {
		fosuo.SetCreatedAt(*u)
	}
	return fosuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fosuo *FeeOrderStateUpdateOne) AddCreatedAt(u int32) *FeeOrderStateUpdateOne {
	fosuo.mutation.AddCreatedAt(u)
	return fosuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fosuo *FeeOrderStateUpdateOne) SetUpdatedAt(u uint32) *FeeOrderStateUpdateOne {
	fosuo.mutation.ResetUpdatedAt()
	fosuo.mutation.SetUpdatedAt(u)
	return fosuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fosuo *FeeOrderStateUpdateOne) AddUpdatedAt(u int32) *FeeOrderStateUpdateOne {
	fosuo.mutation.AddUpdatedAt(u)
	return fosuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fosuo *FeeOrderStateUpdateOne) SetDeletedAt(u uint32) *FeeOrderStateUpdateOne {
	fosuo.mutation.ResetDeletedAt()
	fosuo.mutation.SetDeletedAt(u)
	return fosuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableDeletedAt(u *uint32) *FeeOrderStateUpdateOne {
	if u != nil {
		fosuo.SetDeletedAt(*u)
	}
	return fosuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fosuo *FeeOrderStateUpdateOne) AddDeletedAt(u int32) *FeeOrderStateUpdateOne {
	fosuo.mutation.AddDeletedAt(u)
	return fosuo
}

// SetEntID sets the "ent_id" field.
func (fosuo *FeeOrderStateUpdateOne) SetEntID(u uuid.UUID) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetEntID(u)
	return fosuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableEntID(u *uuid.UUID) *FeeOrderStateUpdateOne {
	if u != nil {
		fosuo.SetEntID(*u)
	}
	return fosuo
}

// SetOrderID sets the "order_id" field.
func (fosuo *FeeOrderStateUpdateOne) SetOrderID(u uuid.UUID) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetOrderID(u)
	return fosuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableOrderID(u *uuid.UUID) *FeeOrderStateUpdateOne {
	if u != nil {
		fosuo.SetOrderID(*u)
	}
	return fosuo
}

// ClearOrderID clears the value of the "order_id" field.
func (fosuo *FeeOrderStateUpdateOne) ClearOrderID() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearOrderID()
	return fosuo
}

// SetPaidAt sets the "paid_at" field.
func (fosuo *FeeOrderStateUpdateOne) SetPaidAt(u uint32) *FeeOrderStateUpdateOne {
	fosuo.mutation.ResetPaidAt()
	fosuo.mutation.SetPaidAt(u)
	return fosuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillablePaidAt(u *uint32) *FeeOrderStateUpdateOne {
	if u != nil {
		fosuo.SetPaidAt(*u)
	}
	return fosuo
}

// AddPaidAt adds u to the "paid_at" field.
func (fosuo *FeeOrderStateUpdateOne) AddPaidAt(u int32) *FeeOrderStateUpdateOne {
	fosuo.mutation.AddPaidAt(u)
	return fosuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (fosuo *FeeOrderStateUpdateOne) ClearPaidAt() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearPaidAt()
	return fosuo
}

// SetUserSetPaid sets the "user_set_paid" field.
func (fosuo *FeeOrderStateUpdateOne) SetUserSetPaid(b bool) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetUserSetPaid(b)
	return fosuo
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableUserSetPaid(b *bool) *FeeOrderStateUpdateOne {
	if b != nil {
		fosuo.SetUserSetPaid(*b)
	}
	return fosuo
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (fosuo *FeeOrderStateUpdateOne) ClearUserSetPaid() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearUserSetPaid()
	return fosuo
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (fosuo *FeeOrderStateUpdateOne) SetUserSetCanceled(b bool) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetUserSetCanceled(b)
	return fosuo
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableUserSetCanceled(b *bool) *FeeOrderStateUpdateOne {
	if b != nil {
		fosuo.SetUserSetCanceled(*b)
	}
	return fosuo
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (fosuo *FeeOrderStateUpdateOne) ClearUserSetCanceled() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearUserSetCanceled()
	return fosuo
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (fosuo *FeeOrderStateUpdateOne) SetAdminSetCanceled(b bool) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetAdminSetCanceled(b)
	return fosuo
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableAdminSetCanceled(b *bool) *FeeOrderStateUpdateOne {
	if b != nil {
		fosuo.SetAdminSetCanceled(*b)
	}
	return fosuo
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (fosuo *FeeOrderStateUpdateOne) ClearAdminSetCanceled() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearAdminSetCanceled()
	return fosuo
}

// SetPaymentState sets the "payment_state" field.
func (fosuo *FeeOrderStateUpdateOne) SetPaymentState(s string) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetPaymentState(s)
	return fosuo
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillablePaymentState(s *string) *FeeOrderStateUpdateOne {
	if s != nil {
		fosuo.SetPaymentState(*s)
	}
	return fosuo
}

// ClearPaymentState clears the value of the "payment_state" field.
func (fosuo *FeeOrderStateUpdateOne) ClearPaymentState() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearPaymentState()
	return fosuo
}

// SetCancelState sets the "cancel_state" field.
func (fosuo *FeeOrderStateUpdateOne) SetCancelState(s string) *FeeOrderStateUpdateOne {
	fosuo.mutation.SetCancelState(s)
	return fosuo
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (fosuo *FeeOrderStateUpdateOne) SetNillableCancelState(s *string) *FeeOrderStateUpdateOne {
	if s != nil {
		fosuo.SetCancelState(*s)
	}
	return fosuo
}

// ClearCancelState clears the value of the "cancel_state" field.
func (fosuo *FeeOrderStateUpdateOne) ClearCancelState() *FeeOrderStateUpdateOne {
	fosuo.mutation.ClearCancelState()
	return fosuo
}

// Mutation returns the FeeOrderStateMutation object of the builder.
func (fosuo *FeeOrderStateUpdateOne) Mutation() *FeeOrderStateMutation {
	return fosuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fosuo *FeeOrderStateUpdateOne) Select(field string, fields ...string) *FeeOrderStateUpdateOne {
	fosuo.fields = append([]string{field}, fields...)
	return fosuo
}

// Save executes the query and returns the updated FeeOrderState entity.
func (fosuo *FeeOrderStateUpdateOne) Save(ctx context.Context) (*FeeOrderState, error) {
	var (
		err  error
		node *FeeOrderState
	)
	if err := fosuo.defaults(); err != nil {
		return nil, err
	}
	if len(fosuo.hooks) == 0 {
		node, err = fosuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeOrderStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fosuo.mutation = mutation
			node, err = fosuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fosuo.hooks) - 1; i >= 0; i-- {
			if fosuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fosuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fosuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FeeOrderState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeeOrderStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fosuo *FeeOrderStateUpdateOne) SaveX(ctx context.Context) *FeeOrderState {
	node, err := fosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fosuo *FeeOrderStateUpdateOne) Exec(ctx context.Context) error {
	_, err := fosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fosuo *FeeOrderStateUpdateOne) ExecX(ctx context.Context) {
	if err := fosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fosuo *FeeOrderStateUpdateOne) defaults() error {
	if _, ok := fosuo.mutation.UpdatedAt(); !ok {
		if feeorderstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorderstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := feeorderstate.UpdateDefaultUpdatedAt()
		fosuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fosuo *FeeOrderStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeeOrderStateUpdateOne {
	fosuo.modifiers = append(fosuo.modifiers, modifiers...)
	return fosuo
}

func (fosuo *FeeOrderStateUpdateOne) sqlSave(ctx context.Context) (_node *FeeOrderState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeorderstate.Table,
			Columns: feeorderstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: feeorderstate.FieldID,
			},
		},
	}
	id, ok := fosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeeOrderState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fosuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeorderstate.FieldID)
		for _, f := range fields {
			if !feeorderstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feeorderstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fosuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fosuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldCreatedAt,
		})
	}
	if value, ok := fosuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldCreatedAt,
		})
	}
	if value, ok := fosuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldUpdatedAt,
		})
	}
	if value, ok := fosuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldUpdatedAt,
		})
	}
	if value, ok := fosuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldDeletedAt,
		})
	}
	if value, ok := fosuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldDeletedAt,
		})
	}
	if value, ok := fosuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldEntID,
		})
	}
	if value, ok := fosuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorderstate.FieldOrderID,
		})
	}
	if fosuo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: feeorderstate.FieldOrderID,
		})
	}
	if value, ok := fosuo.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if value, ok := fosuo.mutation.AddedPaidAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if fosuo.mutation.PaidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: feeorderstate.FieldPaidAt,
		})
	}
	if value, ok := fosuo.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetPaid,
		})
	}
	if fosuo.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldUserSetPaid,
		})
	}
	if value, ok := fosuo.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldUserSetCanceled,
		})
	}
	if fosuo.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldUserSetCanceled,
		})
	}
	if value, ok := fosuo.mutation.AdminSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feeorderstate.FieldAdminSetCanceled,
		})
	}
	if fosuo.mutation.AdminSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: feeorderstate.FieldAdminSetCanceled,
		})
	}
	if value, ok := fosuo.mutation.PaymentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldPaymentState,
		})
	}
	if fosuo.mutation.PaymentStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feeorderstate.FieldPaymentState,
		})
	}
	if value, ok := fosuo.mutation.CancelState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feeorderstate.FieldCancelState,
		})
	}
	if fosuo.mutation.CancelStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feeorderstate.FieldCancelState,
		})
	}
	_spec.Modifiers = fosuo.modifiers
	_node = &FeeOrderState{config: fosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeorderstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
