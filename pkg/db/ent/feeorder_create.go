// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/feeorder"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FeeOrderCreate is the builder for creating a FeeOrder entity.
type FeeOrderCreate struct {
	config
	mutation *FeeOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (foc *FeeOrderCreate) SetCreatedAt(u uint32) *FeeOrderCreate {
	foc.mutation.SetCreatedAt(u)
	return foc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableCreatedAt(u *uint32) *FeeOrderCreate {
	if u != nil {
		foc.SetCreatedAt(*u)
	}
	return foc
}

// SetUpdatedAt sets the "updated_at" field.
func (foc *FeeOrderCreate) SetUpdatedAt(u uint32) *FeeOrderCreate {
	foc.mutation.SetUpdatedAt(u)
	return foc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableUpdatedAt(u *uint32) *FeeOrderCreate {
	if u != nil {
		foc.SetUpdatedAt(*u)
	}
	return foc
}

// SetDeletedAt sets the "deleted_at" field.
func (foc *FeeOrderCreate) SetDeletedAt(u uint32) *FeeOrderCreate {
	foc.mutation.SetDeletedAt(u)
	return foc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableDeletedAt(u *uint32) *FeeOrderCreate {
	if u != nil {
		foc.SetDeletedAt(*u)
	}
	return foc
}

// SetEntID sets the "ent_id" field.
func (foc *FeeOrderCreate) SetEntID(u uuid.UUID) *FeeOrderCreate {
	foc.mutation.SetEntID(u)
	return foc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableEntID(u *uuid.UUID) *FeeOrderCreate {
	if u != nil {
		foc.SetEntID(*u)
	}
	return foc
}

// SetOrderID sets the "order_id" field.
func (foc *FeeOrderCreate) SetOrderID(u uuid.UUID) *FeeOrderCreate {
	foc.mutation.SetOrderID(u)
	return foc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableOrderID(u *uuid.UUID) *FeeOrderCreate {
	if u != nil {
		foc.SetOrderID(*u)
	}
	return foc
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (foc *FeeOrderCreate) SetGoodValueUsd(d decimal.Decimal) *FeeOrderCreate {
	foc.mutation.SetGoodValueUsd(d)
	return foc
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableGoodValueUsd(d *decimal.Decimal) *FeeOrderCreate {
	if d != nil {
		foc.SetGoodValueUsd(*d)
	}
	return foc
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (foc *FeeOrderCreate) SetPaymentAmountUsd(d decimal.Decimal) *FeeOrderCreate {
	foc.mutation.SetPaymentAmountUsd(d)
	return foc
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *FeeOrderCreate {
	if d != nil {
		foc.SetPaymentAmountUsd(*d)
	}
	return foc
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (foc *FeeOrderCreate) SetDiscountAmountUsd(d decimal.Decimal) *FeeOrderCreate {
	foc.mutation.SetDiscountAmountUsd(d)
	return foc
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableDiscountAmountUsd(d *decimal.Decimal) *FeeOrderCreate {
	if d != nil {
		foc.SetDiscountAmountUsd(*d)
	}
	return foc
}

// SetPromotionID sets the "promotion_id" field.
func (foc *FeeOrderCreate) SetPromotionID(u uuid.UUID) *FeeOrderCreate {
	foc.mutation.SetPromotionID(u)
	return foc
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillablePromotionID(u *uuid.UUID) *FeeOrderCreate {
	if u != nil {
		foc.SetPromotionID(*u)
	}
	return foc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (foc *FeeOrderCreate) SetDurationSeconds(u uint32) *FeeOrderCreate {
	foc.mutation.SetDurationSeconds(u)
	return foc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (foc *FeeOrderCreate) SetNillableDurationSeconds(u *uint32) *FeeOrderCreate {
	if u != nil {
		foc.SetDurationSeconds(*u)
	}
	return foc
}

// SetID sets the "id" field.
func (foc *FeeOrderCreate) SetID(u uint32) *FeeOrderCreate {
	foc.mutation.SetID(u)
	return foc
}

// Mutation returns the FeeOrderMutation object of the builder.
func (foc *FeeOrderCreate) Mutation() *FeeOrderMutation {
	return foc.mutation
}

// Save creates the FeeOrder in the database.
func (foc *FeeOrderCreate) Save(ctx context.Context) (*FeeOrder, error) {
	var (
		err  error
		node *FeeOrder
	)
	if err := foc.defaults(); err != nil {
		return nil, err
	}
	if len(foc.hooks) == 0 {
		if err = foc.check(); err != nil {
			return nil, err
		}
		node, err = foc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = foc.check(); err != nil {
				return nil, err
			}
			foc.mutation = mutation
			if node, err = foc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(foc.hooks) - 1; i >= 0; i-- {
			if foc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = foc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, foc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FeeOrder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeeOrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (foc *FeeOrderCreate) SaveX(ctx context.Context) *FeeOrder {
	v, err := foc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (foc *FeeOrderCreate) Exec(ctx context.Context) error {
	_, err := foc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (foc *FeeOrderCreate) ExecX(ctx context.Context) {
	if err := foc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (foc *FeeOrderCreate) defaults() error {
	if _, ok := foc.mutation.CreatedAt(); !ok {
		if feeorder.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultCreatedAt()
		foc.mutation.SetCreatedAt(v)
	}
	if _, ok := foc.mutation.UpdatedAt(); !ok {
		if feeorder.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultUpdatedAt()
		foc.mutation.SetUpdatedAt(v)
	}
	if _, ok := foc.mutation.DeletedAt(); !ok {
		if feeorder.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultDeletedAt()
		foc.mutation.SetDeletedAt(v)
	}
	if _, ok := foc.mutation.EntID(); !ok {
		if feeorder.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultEntID()
		foc.mutation.SetEntID(v)
	}
	if _, ok := foc.mutation.OrderID(); !ok {
		if feeorder.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultOrderID()
		foc.mutation.SetOrderID(v)
	}
	if _, ok := foc.mutation.GoodValueUsd(); !ok {
		v := feeorder.DefaultGoodValueUsd
		foc.mutation.SetGoodValueUsd(v)
	}
	if _, ok := foc.mutation.PaymentAmountUsd(); !ok {
		v := feeorder.DefaultPaymentAmountUsd
		foc.mutation.SetPaymentAmountUsd(v)
	}
	if _, ok := foc.mutation.DiscountAmountUsd(); !ok {
		v := feeorder.DefaultDiscountAmountUsd
		foc.mutation.SetDiscountAmountUsd(v)
	}
	if _, ok := foc.mutation.PromotionID(); !ok {
		if feeorder.DefaultPromotionID == nil {
			return fmt.Errorf("ent: uninitialized feeorder.DefaultPromotionID (forgotten import ent/runtime?)")
		}
		v := feeorder.DefaultPromotionID()
		foc.mutation.SetPromotionID(v)
	}
	if _, ok := foc.mutation.DurationSeconds(); !ok {
		v := feeorder.DefaultDurationSeconds
		foc.mutation.SetDurationSeconds(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (foc *FeeOrderCreate) check() error {
	if _, ok := foc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeeOrder.created_at"`)}
	}
	if _, ok := foc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeeOrder.updated_at"`)}
	}
	if _, ok := foc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FeeOrder.deleted_at"`)}
	}
	if _, ok := foc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "FeeOrder.ent_id"`)}
	}
	return nil
}

func (foc *FeeOrderCreate) sqlSave(ctx context.Context) (*FeeOrder, error) {
	_node, _spec := foc.createSpec()
	if err := sqlgraph.CreateNode(ctx, foc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (foc *FeeOrderCreate) createSpec() (*FeeOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &FeeOrder{config: foc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feeorder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: feeorder.FieldID,
			},
		}
	)
	_spec.OnConflict = foc.conflict
	if id, ok := foc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := foc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := foc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := foc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorder.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := foc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorder.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := foc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorder.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := foc.mutation.GoodValueUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: feeorder.FieldGoodValueUsd,
		})
		_node.GoodValueUsd = value
	}
	if value, ok := foc.mutation.PaymentAmountUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: feeorder.FieldPaymentAmountUsd,
		})
		_node.PaymentAmountUsd = value
	}
	if value, ok := foc.mutation.DiscountAmountUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: feeorder.FieldDiscountAmountUsd,
		})
		_node.DiscountAmountUsd = value
	}
	if value, ok := foc.mutation.PromotionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeorder.FieldPromotionID,
		})
		_node.PromotionID = value
	}
	if value, ok := foc.mutation.DurationSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeorder.FieldDurationSeconds,
		})
		_node.DurationSeconds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeeOrder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (foc *FeeOrderCreate) OnConflict(opts ...sql.ConflictOption) *FeeOrderUpsertOne {
	foc.conflict = opts
	return &FeeOrderUpsertOne{
		create: foc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (foc *FeeOrderCreate) OnConflictColumns(columns ...string) *FeeOrderUpsertOne {
	foc.conflict = append(foc.conflict, sql.ConflictColumns(columns...))
	return &FeeOrderUpsertOne{
		create: foc,
	}
}

type (
	// FeeOrderUpsertOne is the builder for "upsert"-ing
	//  one FeeOrder node.
	FeeOrderUpsertOne struct {
		create *FeeOrderCreate
	}

	// FeeOrderUpsert is the "OnConflict" setter.
	FeeOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderUpsert) SetCreatedAt(v uint32) *FeeOrderUpsert {
	u.Set(feeorder.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateCreatedAt() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderUpsert) AddCreatedAt(v uint32) *FeeOrderUpsert {
	u.Add(feeorder.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderUpsert) SetUpdatedAt(v uint32) *FeeOrderUpsert {
	u.Set(feeorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateUpdatedAt() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderUpsert) AddUpdatedAt(v uint32) *FeeOrderUpsert {
	u.Add(feeorder.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderUpsert) SetDeletedAt(v uint32) *FeeOrderUpsert {
	u.Set(feeorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateDeletedAt() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderUpsert) AddDeletedAt(v uint32) *FeeOrderUpsert {
	u.Add(feeorder.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderUpsert) SetEntID(v uuid.UUID) *FeeOrderUpsert {
	u.Set(feeorder.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateEntID() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderUpsert) SetOrderID(v uuid.UUID) *FeeOrderUpsert {
	u.Set(feeorder.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateOrderID() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderUpsert) ClearOrderID() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldOrderID)
	return u
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *FeeOrderUpsert) SetGoodValueUsd(v decimal.Decimal) *FeeOrderUpsert {
	u.Set(feeorder.FieldGoodValueUsd, v)
	return u
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateGoodValueUsd() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldGoodValueUsd)
	return u
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *FeeOrderUpsert) ClearGoodValueUsd() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldGoodValueUsd)
	return u
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *FeeOrderUpsert) SetPaymentAmountUsd(v decimal.Decimal) *FeeOrderUpsert {
	u.Set(feeorder.FieldPaymentAmountUsd, v)
	return u
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdatePaymentAmountUsd() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldPaymentAmountUsd)
	return u
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *FeeOrderUpsert) ClearPaymentAmountUsd() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldPaymentAmountUsd)
	return u
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *FeeOrderUpsert) SetDiscountAmountUsd(v decimal.Decimal) *FeeOrderUpsert {
	u.Set(feeorder.FieldDiscountAmountUsd, v)
	return u
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateDiscountAmountUsd() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldDiscountAmountUsd)
	return u
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *FeeOrderUpsert) ClearDiscountAmountUsd() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldDiscountAmountUsd)
	return u
}

// SetPromotionID sets the "promotion_id" field.
func (u *FeeOrderUpsert) SetPromotionID(v uuid.UUID) *FeeOrderUpsert {
	u.Set(feeorder.FieldPromotionID, v)
	return u
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdatePromotionID() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldPromotionID)
	return u
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *FeeOrderUpsert) ClearPromotionID() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldPromotionID)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FeeOrderUpsert) SetDurationSeconds(v uint32) *FeeOrderUpsert {
	u.Set(feeorder.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FeeOrderUpsert) UpdateDurationSeconds() *FeeOrderUpsert {
	u.SetExcluded(feeorder.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FeeOrderUpsert) AddDurationSeconds(v uint32) *FeeOrderUpsert {
	u.Add(feeorder.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FeeOrderUpsert) ClearDurationSeconds() *FeeOrderUpsert {
	u.SetNull(feeorder.FieldDurationSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FeeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeOrderUpsertOne) UpdateNewValues() *FeeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feeorder.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FeeOrder.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FeeOrderUpsertOne) Ignore() *FeeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeOrderUpsertOne) DoNothing() *FeeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeOrderCreate.OnConflict
// documentation for more info.
func (u *FeeOrderUpsertOne) Update(set func(*FeeOrderUpsert)) *FeeOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderUpsertOne) SetCreatedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderUpsertOne) AddCreatedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateCreatedAt() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderUpsertOne) SetUpdatedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderUpsertOne) AddUpdatedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateUpdatedAt() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderUpsertOne) SetDeletedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderUpsertOne) AddDeletedAt(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateDeletedAt() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderUpsertOne) SetEntID(v uuid.UUID) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateEntID() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderUpsertOne) SetOrderID(v uuid.UUID) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateOrderID() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderUpsertOne) ClearOrderID() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearOrderID()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *FeeOrderUpsertOne) SetGoodValueUsd(v decimal.Decimal) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateGoodValueUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *FeeOrderUpsertOne) ClearGoodValueUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *FeeOrderUpsertOne) SetPaymentAmountUsd(v decimal.Decimal) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdatePaymentAmountUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *FeeOrderUpsertOne) ClearPaymentAmountUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *FeeOrderUpsertOne) SetDiscountAmountUsd(v decimal.Decimal) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateDiscountAmountUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *FeeOrderUpsertOne) ClearDiscountAmountUsd() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *FeeOrderUpsertOne) SetPromotionID(v uuid.UUID) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdatePromotionID() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *FeeOrderUpsertOne) ClearPromotionID() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FeeOrderUpsertOne) SetDurationSeconds(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FeeOrderUpsertOne) AddDurationSeconds(v uint32) *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FeeOrderUpsertOne) UpdateDurationSeconds() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FeeOrderUpsertOne) ClearDurationSeconds() *FeeOrderUpsertOne {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *FeeOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeeOrderUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeeOrderUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeeOrderCreateBulk is the builder for creating many FeeOrder entities in bulk.
type FeeOrderCreateBulk struct {
	config
	builders []*FeeOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the FeeOrder entities in the database.
func (focb *FeeOrderCreateBulk) Save(ctx context.Context) ([]*FeeOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(focb.builders))
	nodes := make([]*FeeOrder, len(focb.builders))
	mutators := make([]Mutator, len(focb.builders))
	for i := range focb.builders {
		func(i int, root context.Context) {
			builder := focb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, focb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = focb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, focb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, focb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (focb *FeeOrderCreateBulk) SaveX(ctx context.Context) []*FeeOrder {
	v, err := focb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (focb *FeeOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := focb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (focb *FeeOrderCreateBulk) ExecX(ctx context.Context) {
	if err := focb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeeOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (focb *FeeOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeeOrderUpsertBulk {
	focb.conflict = opts
	return &FeeOrderUpsertBulk{
		create: focb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeeOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (focb *FeeOrderCreateBulk) OnConflictColumns(columns ...string) *FeeOrderUpsertBulk {
	focb.conflict = append(focb.conflict, sql.ConflictColumns(columns...))
	return &FeeOrderUpsertBulk{
		create: focb,
	}
}

// FeeOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of FeeOrder nodes.
type FeeOrderUpsertBulk struct {
	create *FeeOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeeOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feeorder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeOrderUpsertBulk) UpdateNewValues() *FeeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feeorder.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeeOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FeeOrderUpsertBulk) Ignore() *FeeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeOrderUpsertBulk) DoNothing() *FeeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeOrderCreateBulk.OnConflict
// documentation for more info.
func (u *FeeOrderUpsertBulk) Update(set func(*FeeOrderUpsert)) *FeeOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeeOrderUpsertBulk) SetCreatedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FeeOrderUpsertBulk) AddCreatedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateCreatedAt() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeeOrderUpsertBulk) SetUpdatedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FeeOrderUpsertBulk) AddUpdatedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateUpdatedAt() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FeeOrderUpsertBulk) SetDeletedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FeeOrderUpsertBulk) AddDeletedAt(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateDeletedAt() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FeeOrderUpsertBulk) SetEntID(v uuid.UUID) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateEntID() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *FeeOrderUpsertBulk) SetOrderID(v uuid.UUID) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateOrderID() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *FeeOrderUpsertBulk) ClearOrderID() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearOrderID()
	})
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (u *FeeOrderUpsertBulk) SetGoodValueUsd(v decimal.Decimal) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetGoodValueUsd(v)
	})
}

// UpdateGoodValueUsd sets the "good_value_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateGoodValueUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateGoodValueUsd()
	})
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (u *FeeOrderUpsertBulk) ClearGoodValueUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearGoodValueUsd()
	})
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (u *FeeOrderUpsertBulk) SetPaymentAmountUsd(v decimal.Decimal) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetPaymentAmountUsd(v)
	})
}

// UpdatePaymentAmountUsd sets the "payment_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdatePaymentAmountUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdatePaymentAmountUsd()
	})
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (u *FeeOrderUpsertBulk) ClearPaymentAmountUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearPaymentAmountUsd()
	})
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (u *FeeOrderUpsertBulk) SetDiscountAmountUsd(v decimal.Decimal) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDiscountAmountUsd(v)
	})
}

// UpdateDiscountAmountUsd sets the "discount_amount_usd" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateDiscountAmountUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDiscountAmountUsd()
	})
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (u *FeeOrderUpsertBulk) ClearDiscountAmountUsd() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearDiscountAmountUsd()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *FeeOrderUpsertBulk) SetPromotionID(v uuid.UUID) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdatePromotionID() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *FeeOrderUpsertBulk) ClearPromotionID() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FeeOrderUpsertBulk) SetDurationSeconds(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FeeOrderUpsertBulk) AddDurationSeconds(v uint32) *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FeeOrderUpsertBulk) UpdateDurationSeconds() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FeeOrderUpsertBulk) ClearDurationSeconds() *FeeOrderUpsertBulk {
	return u.Update(func(s *FeeOrderUpsert) {
		s.ClearDurationSeconds()
	})
}

// Exec executes the query.
func (u *FeeOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeeOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
