// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// PaymentBaseUpdate is the builder for updating PaymentBase entities.
type PaymentBaseUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentBaseUpdate builder.
func (pbu *PaymentBaseUpdate) Where(ps ...predicate.PaymentBase) *PaymentBaseUpdate {
	pbu.mutation.Where(ps...)
	return pbu
}

// SetCreatedAt sets the "created_at" field.
func (pbu *PaymentBaseUpdate) SetCreatedAt(u uint32) *PaymentBaseUpdate {
	pbu.mutation.ResetCreatedAt()
	pbu.mutation.SetCreatedAt(u)
	return pbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbu *PaymentBaseUpdate) SetNillableCreatedAt(u *uint32) *PaymentBaseUpdate {
	if u != nil {
		pbu.SetCreatedAt(*u)
	}
	return pbu
}

// AddCreatedAt adds u to the "created_at" field.
func (pbu *PaymentBaseUpdate) AddCreatedAt(u int32) *PaymentBaseUpdate {
	pbu.mutation.AddCreatedAt(u)
	return pbu
}

// SetUpdatedAt sets the "updated_at" field.
func (pbu *PaymentBaseUpdate) SetUpdatedAt(u uint32) *PaymentBaseUpdate {
	pbu.mutation.ResetUpdatedAt()
	pbu.mutation.SetUpdatedAt(u)
	return pbu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pbu *PaymentBaseUpdate) AddUpdatedAt(u int32) *PaymentBaseUpdate {
	pbu.mutation.AddUpdatedAt(u)
	return pbu
}

// SetDeletedAt sets the "deleted_at" field.
func (pbu *PaymentBaseUpdate) SetDeletedAt(u uint32) *PaymentBaseUpdate {
	pbu.mutation.ResetDeletedAt()
	pbu.mutation.SetDeletedAt(u)
	return pbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbu *PaymentBaseUpdate) SetNillableDeletedAt(u *uint32) *PaymentBaseUpdate {
	if u != nil {
		pbu.SetDeletedAt(*u)
	}
	return pbu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pbu *PaymentBaseUpdate) AddDeletedAt(u int32) *PaymentBaseUpdate {
	pbu.mutation.AddDeletedAt(u)
	return pbu
}

// SetEntID sets the "ent_id" field.
func (pbu *PaymentBaseUpdate) SetEntID(u uuid.UUID) *PaymentBaseUpdate {
	pbu.mutation.SetEntID(u)
	return pbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pbu *PaymentBaseUpdate) SetNillableEntID(u *uuid.UUID) *PaymentBaseUpdate {
	if u != nil {
		pbu.SetEntID(*u)
	}
	return pbu
}

// SetOrderID sets the "order_id" field.
func (pbu *PaymentBaseUpdate) SetOrderID(u uuid.UUID) *PaymentBaseUpdate {
	pbu.mutation.SetOrderID(u)
	return pbu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pbu *PaymentBaseUpdate) SetNillableOrderID(u *uuid.UUID) *PaymentBaseUpdate {
	if u != nil {
		pbu.SetOrderID(*u)
	}
	return pbu
}

// ClearOrderID clears the value of the "order_id" field.
func (pbu *PaymentBaseUpdate) ClearOrderID() *PaymentBaseUpdate {
	pbu.mutation.ClearOrderID()
	return pbu
}

// SetObseleteState sets the "obselete_state" field.
func (pbu *PaymentBaseUpdate) SetObseleteState(s string) *PaymentBaseUpdate {
	pbu.mutation.SetObseleteState(s)
	return pbu
}

// SetNillableObseleteState sets the "obselete_state" field if the given value is not nil.
func (pbu *PaymentBaseUpdate) SetNillableObseleteState(s *string) *PaymentBaseUpdate {
	if s != nil {
		pbu.SetObseleteState(*s)
	}
	return pbu
}

// ClearObseleteState clears the value of the "obselete_state" field.
func (pbu *PaymentBaseUpdate) ClearObseleteState() *PaymentBaseUpdate {
	pbu.mutation.ClearObseleteState()
	return pbu
}

// Mutation returns the PaymentBaseMutation object of the builder.
func (pbu *PaymentBaseUpdate) Mutation() *PaymentBaseMutation {
	return pbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbu *PaymentBaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pbu.defaults(); err != nil {
		return 0, err
	}
	if len(pbu.hooks) == 0 {
		affected, err = pbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pbu.mutation = mutation
			affected, err = pbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pbu.hooks) - 1; i >= 0; i-- {
			if pbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbu *PaymentBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := pbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbu *PaymentBaseUpdate) Exec(ctx context.Context) error {
	_, err := pbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbu *PaymentBaseUpdate) ExecX(ctx context.Context) {
	if err := pbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbu *PaymentBaseUpdate) defaults() error {
	if _, ok := pbu.mutation.UpdatedAt(); !ok {
		if paymentbase.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymentbase.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := paymentbase.UpdateDefaultUpdatedAt()
		pbu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pbu *PaymentBaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentBaseUpdate {
	pbu.modifiers = append(pbu.modifiers, modifiers...)
	return pbu
}

func (pbu *PaymentBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentbase.Table,
			Columns: paymentbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymentbase.FieldID,
			},
		},
	}
	if ps := pbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldCreatedAt,
		})
	}
	if value, ok := pbu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldCreatedAt,
		})
	}
	if value, ok := pbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldUpdatedAt,
		})
	}
	if value, ok := pbu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldUpdatedAt,
		})
	}
	if value, ok := pbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldDeletedAt,
		})
	}
	if value, ok := pbu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldDeletedAt,
		})
	}
	if value, ok := pbu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbase.FieldEntID,
		})
	}
	if value, ok := pbu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbase.FieldOrderID,
		})
	}
	if pbu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: paymentbase.FieldOrderID,
		})
	}
	if value, ok := pbu.mutation.ObseleteState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbase.FieldObseleteState,
		})
	}
	if pbu.mutation.ObseleteStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbase.FieldObseleteState,
		})
	}
	_spec.Modifiers = pbu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentBaseUpdateOne is the builder for updating a single PaymentBase entity.
type PaymentBaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentBaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (pbuo *PaymentBaseUpdateOne) SetCreatedAt(u uint32) *PaymentBaseUpdateOne {
	pbuo.mutation.ResetCreatedAt()
	pbuo.mutation.SetCreatedAt(u)
	return pbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbuo *PaymentBaseUpdateOne) SetNillableCreatedAt(u *uint32) *PaymentBaseUpdateOne {
	if u != nil {
		pbuo.SetCreatedAt(*u)
	}
	return pbuo
}

// AddCreatedAt adds u to the "created_at" field.
func (pbuo *PaymentBaseUpdateOne) AddCreatedAt(u int32) *PaymentBaseUpdateOne {
	pbuo.mutation.AddCreatedAt(u)
	return pbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pbuo *PaymentBaseUpdateOne) SetUpdatedAt(u uint32) *PaymentBaseUpdateOne {
	pbuo.mutation.ResetUpdatedAt()
	pbuo.mutation.SetUpdatedAt(u)
	return pbuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pbuo *PaymentBaseUpdateOne) AddUpdatedAt(u int32) *PaymentBaseUpdateOne {
	pbuo.mutation.AddUpdatedAt(u)
	return pbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pbuo *PaymentBaseUpdateOne) SetDeletedAt(u uint32) *PaymentBaseUpdateOne {
	pbuo.mutation.ResetDeletedAt()
	pbuo.mutation.SetDeletedAt(u)
	return pbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbuo *PaymentBaseUpdateOne) SetNillableDeletedAt(u *uint32) *PaymentBaseUpdateOne {
	if u != nil {
		pbuo.SetDeletedAt(*u)
	}
	return pbuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pbuo *PaymentBaseUpdateOne) AddDeletedAt(u int32) *PaymentBaseUpdateOne {
	pbuo.mutation.AddDeletedAt(u)
	return pbuo
}

// SetEntID sets the "ent_id" field.
func (pbuo *PaymentBaseUpdateOne) SetEntID(u uuid.UUID) *PaymentBaseUpdateOne {
	pbuo.mutation.SetEntID(u)
	return pbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pbuo *PaymentBaseUpdateOne) SetNillableEntID(u *uuid.UUID) *PaymentBaseUpdateOne {
	if u != nil {
		pbuo.SetEntID(*u)
	}
	return pbuo
}

// SetOrderID sets the "order_id" field.
func (pbuo *PaymentBaseUpdateOne) SetOrderID(u uuid.UUID) *PaymentBaseUpdateOne {
	pbuo.mutation.SetOrderID(u)
	return pbuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pbuo *PaymentBaseUpdateOne) SetNillableOrderID(u *uuid.UUID) *PaymentBaseUpdateOne {
	if u != nil {
		pbuo.SetOrderID(*u)
	}
	return pbuo
}

// ClearOrderID clears the value of the "order_id" field.
func (pbuo *PaymentBaseUpdateOne) ClearOrderID() *PaymentBaseUpdateOne {
	pbuo.mutation.ClearOrderID()
	return pbuo
}

// SetObseleteState sets the "obselete_state" field.
func (pbuo *PaymentBaseUpdateOne) SetObseleteState(s string) *PaymentBaseUpdateOne {
	pbuo.mutation.SetObseleteState(s)
	return pbuo
}

// SetNillableObseleteState sets the "obselete_state" field if the given value is not nil.
func (pbuo *PaymentBaseUpdateOne) SetNillableObseleteState(s *string) *PaymentBaseUpdateOne {
	if s != nil {
		pbuo.SetObseleteState(*s)
	}
	return pbuo
}

// ClearObseleteState clears the value of the "obselete_state" field.
func (pbuo *PaymentBaseUpdateOne) ClearObseleteState() *PaymentBaseUpdateOne {
	pbuo.mutation.ClearObseleteState()
	return pbuo
}

// Mutation returns the PaymentBaseMutation object of the builder.
func (pbuo *PaymentBaseUpdateOne) Mutation() *PaymentBaseMutation {
	return pbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbuo *PaymentBaseUpdateOne) Select(field string, fields ...string) *PaymentBaseUpdateOne {
	pbuo.fields = append([]string{field}, fields...)
	return pbuo
}

// Save executes the query and returns the updated PaymentBase entity.
func (pbuo *PaymentBaseUpdateOne) Save(ctx context.Context) (*PaymentBase, error) {
	var (
		err  error
		node *PaymentBase
	)
	if err := pbuo.defaults(); err != nil {
		return nil, err
	}
	if len(pbuo.hooks) == 0 {
		node, err = pbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pbuo.mutation = mutation
			node, err = pbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pbuo.hooks) - 1; i >= 0; i-- {
			if pbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PaymentBase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentBaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbuo *PaymentBaseUpdateOne) SaveX(ctx context.Context) *PaymentBase {
	node, err := pbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbuo *PaymentBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := pbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbuo *PaymentBaseUpdateOne) ExecX(ctx context.Context) {
	if err := pbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbuo *PaymentBaseUpdateOne) defaults() error {
	if _, ok := pbuo.mutation.UpdatedAt(); !ok {
		if paymentbase.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized paymentbase.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := paymentbase.UpdateDefaultUpdatedAt()
		pbuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pbuo *PaymentBaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentBaseUpdateOne {
	pbuo.modifiers = append(pbuo.modifiers, modifiers...)
	return pbuo
}

func (pbuo *PaymentBaseUpdateOne) sqlSave(ctx context.Context) (_node *PaymentBase, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentbase.Table,
			Columns: paymentbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymentbase.FieldID,
			},
		},
	}
	id, ok := pbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentbase.FieldID)
		for _, f := range fields {
			if !paymentbase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldCreatedAt,
		})
	}
	if value, ok := pbuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldCreatedAt,
		})
	}
	if value, ok := pbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldUpdatedAt,
		})
	}
	if value, ok := pbuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldUpdatedAt,
		})
	}
	if value, ok := pbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldDeletedAt,
		})
	}
	if value, ok := pbuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: paymentbase.FieldDeletedAt,
		})
	}
	if value, ok := pbuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbase.FieldEntID,
		})
	}
	if value, ok := pbuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: paymentbase.FieldOrderID,
		})
	}
	if pbuo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: paymentbase.FieldOrderID,
		})
	}
	if value, ok := pbuo.mutation.ObseleteState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbase.FieldObseleteState,
		})
	}
	if pbuo.mutation.ObseleteStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbase.FieldObseleteState,
		})
	}
	_spec.Modifiers = pbuo.modifiers
	_node = &PaymentBase{config: pbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
