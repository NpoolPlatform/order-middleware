// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 6)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   compensate.Table,
			Columns: compensate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: compensate.FieldID,
			},
		},
		Type: "Compensate",
		Fields: map[string]*sqlgraph.FieldSpec{
			compensate.FieldCreatedAt:      {Type: field.TypeUint32, Column: compensate.FieldCreatedAt},
			compensate.FieldUpdatedAt:      {Type: field.TypeUint32, Column: compensate.FieldUpdatedAt},
			compensate.FieldDeletedAt:      {Type: field.TypeUint32, Column: compensate.FieldDeletedAt},
			compensate.FieldEntID:          {Type: field.TypeUUID, Column: compensate.FieldEntID},
			compensate.FieldOrderID:        {Type: field.TypeUUID, Column: compensate.FieldOrderID},
			compensate.FieldStartAt:        {Type: field.TypeUint32, Column: compensate.FieldStartAt},
			compensate.FieldEndAt:          {Type: field.TypeUint32, Column: compensate.FieldEndAt},
			compensate.FieldCompensateType: {Type: field.TypeString, Column: compensate.FieldCompensateType},
			compensate.FieldTitle:          {Type: field.TypeString, Column: compensate.FieldTitle},
			compensate.FieldMessage:        {Type: field.TypeString, Column: compensate.FieldMessage},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:            {Type: field.TypeUint32, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:            {Type: field.TypeUint32, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:            {Type: field.TypeUint32, Column: order.FieldDeletedAt},
			order.FieldEntID:                {Type: field.TypeUUID, Column: order.FieldEntID},
			order.FieldAppID:                {Type: field.TypeUUID, Column: order.FieldAppID},
			order.FieldUserID:               {Type: field.TypeUUID, Column: order.FieldUserID},
			order.FieldGoodID:               {Type: field.TypeUUID, Column: order.FieldGoodID},
			order.FieldAppGoodID:            {Type: field.TypeUUID, Column: order.FieldAppGoodID},
			order.FieldPaymentID:            {Type: field.TypeUUID, Column: order.FieldPaymentID},
			order.FieldParentOrderID:        {Type: field.TypeUUID, Column: order.FieldParentOrderID},
			order.FieldUnitsV1:              {Type: field.TypeOther, Column: order.FieldUnitsV1},
			order.FieldGoodValue:            {Type: field.TypeOther, Column: order.FieldGoodValue},
			order.FieldGoodValueUsd:         {Type: field.TypeOther, Column: order.FieldGoodValueUsd},
			order.FieldPaymentAmount:        {Type: field.TypeOther, Column: order.FieldPaymentAmount},
			order.FieldDiscountAmount:       {Type: field.TypeOther, Column: order.FieldDiscountAmount},
			order.FieldPromotionID:          {Type: field.TypeUUID, Column: order.FieldPromotionID},
			order.FieldDuration:             {Type: field.TypeUint32, Column: order.FieldDuration},
			order.FieldOrderType:            {Type: field.TypeString, Column: order.FieldOrderType},
			order.FieldInvestmentType:       {Type: field.TypeString, Column: order.FieldInvestmentType},
			order.FieldCouponIds:            {Type: field.TypeJSON, Column: order.FieldCouponIds},
			order.FieldPaymentType:          {Type: field.TypeString, Column: order.FieldPaymentType},
			order.FieldCoinTypeID:           {Type: field.TypeUUID, Column: order.FieldCoinTypeID},
			order.FieldPaymentCoinTypeID:    {Type: field.TypeUUID, Column: order.FieldPaymentCoinTypeID},
			order.FieldTransferAmount:       {Type: field.TypeOther, Column: order.FieldTransferAmount},
			order.FieldBalanceAmount:        {Type: field.TypeOther, Column: order.FieldBalanceAmount},
			order.FieldCoinUsdCurrency:      {Type: field.TypeOther, Column: order.FieldCoinUsdCurrency},
			order.FieldLocalCoinUsdCurrency: {Type: field.TypeOther, Column: order.FieldLocalCoinUsdCurrency},
			order.FieldLiveCoinUsdCurrency:  {Type: field.TypeOther, Column: order.FieldLiveCoinUsdCurrency},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderlock.Table,
			Columns: orderlock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderlock.FieldID,
			},
		},
		Type: "OrderLock",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderlock.FieldCreatedAt: {Type: field.TypeUint32, Column: orderlock.FieldCreatedAt},
			orderlock.FieldUpdatedAt: {Type: field.TypeUint32, Column: orderlock.FieldUpdatedAt},
			orderlock.FieldDeletedAt: {Type: field.TypeUint32, Column: orderlock.FieldDeletedAt},
			orderlock.FieldEntID:     {Type: field.TypeUUID, Column: orderlock.FieldEntID},
			orderlock.FieldAppID:     {Type: field.TypeUUID, Column: orderlock.FieldAppID},
			orderlock.FieldUserID:    {Type: field.TypeUUID, Column: orderlock.FieldUserID},
			orderlock.FieldOrderID:   {Type: field.TypeUUID, Column: orderlock.FieldOrderID},
			orderlock.FieldLockType:  {Type: field.TypeString, Column: orderlock.FieldLockType},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderstate.Table,
			Columns: orderstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderstate.FieldID,
			},
		},
		Type: "OrderState",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderstate.FieldCreatedAt:            {Type: field.TypeUint32, Column: orderstate.FieldCreatedAt},
			orderstate.FieldUpdatedAt:            {Type: field.TypeUint32, Column: orderstate.FieldUpdatedAt},
			orderstate.FieldDeletedAt:            {Type: field.TypeUint32, Column: orderstate.FieldDeletedAt},
			orderstate.FieldEntID:                {Type: field.TypeUUID, Column: orderstate.FieldEntID},
			orderstate.FieldOrderID:              {Type: field.TypeUUID, Column: orderstate.FieldOrderID},
			orderstate.FieldOrderState:           {Type: field.TypeString, Column: orderstate.FieldOrderState},
			orderstate.FieldCancelState:          {Type: field.TypeString, Column: orderstate.FieldCancelState},
			orderstate.FieldStartMode:            {Type: field.TypeString, Column: orderstate.FieldStartMode},
			orderstate.FieldStartAt:              {Type: field.TypeUint32, Column: orderstate.FieldStartAt},
			orderstate.FieldEndAt:                {Type: field.TypeUint32, Column: orderstate.FieldEndAt},
			orderstate.FieldPaidAt:               {Type: field.TypeUint32, Column: orderstate.FieldPaidAt},
			orderstate.FieldLastBenefitAt:        {Type: field.TypeUint32, Column: orderstate.FieldLastBenefitAt},
			orderstate.FieldBenefitState:         {Type: field.TypeString, Column: orderstate.FieldBenefitState},
			orderstate.FieldUserSetPaid:          {Type: field.TypeBool, Column: orderstate.FieldUserSetPaid},
			orderstate.FieldUserSetCanceled:      {Type: field.TypeBool, Column: orderstate.FieldUserSetCanceled},
			orderstate.FieldAdminSetCanceled:     {Type: field.TypeBool, Column: orderstate.FieldAdminSetCanceled},
			orderstate.FieldPaymentTransactionID: {Type: field.TypeString, Column: orderstate.FieldPaymentTransactionID},
			orderstate.FieldPaymentFinishAmount:  {Type: field.TypeOther, Column: orderstate.FieldPaymentFinishAmount},
			orderstate.FieldPaymentState:         {Type: field.TypeString, Column: orderstate.FieldPaymentState},
			orderstate.FieldOutofgasHours:        {Type: field.TypeUint32, Column: orderstate.FieldOutofgasHours},
			orderstate.FieldCompensateHours:      {Type: field.TypeUint32, Column: orderstate.FieldCompensateHours},
			orderstate.FieldRenewState:           {Type: field.TypeString, Column: orderstate.FieldRenewState},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   outofgas.Table,
			Columns: outofgas.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: outofgas.FieldID,
			},
		},
		Type: "OutOfGas",
		Fields: map[string]*sqlgraph.FieldSpec{
			outofgas.FieldCreatedAt: {Type: field.TypeUint32, Column: outofgas.FieldCreatedAt},
			outofgas.FieldUpdatedAt: {Type: field.TypeUint32, Column: outofgas.FieldUpdatedAt},
			outofgas.FieldDeletedAt: {Type: field.TypeUint32, Column: outofgas.FieldDeletedAt},
			outofgas.FieldEntID:     {Type: field.TypeUUID, Column: outofgas.FieldEntID},
			outofgas.FieldOrderID:   {Type: field.TypeUUID, Column: outofgas.FieldOrderID},
			outofgas.FieldStartAt:   {Type: field.TypeUint32, Column: outofgas.FieldStartAt},
			outofgas.FieldEndAt:     {Type: field.TypeUint32, Column: outofgas.FieldEndAt},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: payment.FieldID,
			},
		},
		Type: "Payment",
		Fields: map[string]*sqlgraph.FieldSpec{
			payment.FieldCreatedAt:   {Type: field.TypeUint32, Column: payment.FieldCreatedAt},
			payment.FieldUpdatedAt:   {Type: field.TypeUint32, Column: payment.FieldUpdatedAt},
			payment.FieldDeletedAt:   {Type: field.TypeUint32, Column: payment.FieldDeletedAt},
			payment.FieldEntID:       {Type: field.TypeUUID, Column: payment.FieldEntID},
			payment.FieldAppID:       {Type: field.TypeUUID, Column: payment.FieldAppID},
			payment.FieldUserID:      {Type: field.TypeUUID, Column: payment.FieldUserID},
			payment.FieldGoodID:      {Type: field.TypeUUID, Column: payment.FieldGoodID},
			payment.FieldOrderID:     {Type: field.TypeUUID, Column: payment.FieldOrderID},
			payment.FieldAccountID:   {Type: field.TypeUUID, Column: payment.FieldAccountID},
			payment.FieldCoinTypeID:  {Type: field.TypeUUID, Column: payment.FieldCoinTypeID},
			payment.FieldCoinInfoID:  {Type: field.TypeUUID, Column: payment.FieldCoinInfoID},
			payment.FieldStartAmount: {Type: field.TypeOther, Column: payment.FieldStartAmount},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CompensateQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CompensateQuery builder.
func (cq *CompensateQuery) Filter() *CompensateFilter {
	return &CompensateFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CompensateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CompensateMutation builder.
func (m *CompensateMutation) Filter() *CompensateFilter {
	return &CompensateFilter{config: m.config, predicateAdder: m}
}

// CompensateFilter provides a generic filtering capability at runtime for CompensateQuery.
type CompensateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CompensateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CompensateFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CompensateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CompensateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CompensateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CompensateFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CompensateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CompensateFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CompensateFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldEndAt))
}

// WhereCompensateType applies the entql string predicate on the compensate_type field.
func (f *CompensateFilter) WhereCompensateType(p entql.StringP) {
	f.Where(p.Field(compensate.FieldCompensateType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *CompensateFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(compensate.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CompensateFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(compensate.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(order.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(order.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(order.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *OrderFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(order.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *OrderFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(order.FieldAppGoodID))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *OrderFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPaymentID))
}

// WhereParentOrderID applies the entql [16]byte predicate on the parent_order_id field.
func (f *OrderFilter) WhereParentOrderID(p entql.ValueP) {
	f.Where(p.Field(order.FieldParentOrderID))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *OrderFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(order.FieldUnitsV1))
}

// WhereGoodValue applies the entql other predicate on the good_value field.
func (f *OrderFilter) WhereGoodValue(p entql.OtherP) {
	f.Where(p.Field(order.FieldGoodValue))
}

// WhereGoodValueUsd applies the entql other predicate on the good_value_usd field.
func (f *OrderFilter) WhereGoodValueUsd(p entql.OtherP) {
	f.Where(p.Field(order.FieldGoodValueUsd))
}

// WherePaymentAmount applies the entql other predicate on the payment_amount field.
func (f *OrderFilter) WherePaymentAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldPaymentAmount))
}

// WhereDiscountAmount applies the entql other predicate on the discount_amount field.
func (f *OrderFilter) WhereDiscountAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldDiscountAmount))
}

// WherePromotionID applies the entql [16]byte predicate on the promotion_id field.
func (f *OrderFilter) WherePromotionID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPromotionID))
}

// WhereDuration applies the entql uint32 predicate on the duration field.
func (f *OrderFilter) WhereDuration(p entql.Uint32P) {
	f.Where(p.Field(order.FieldDuration))
}

// WhereOrderType applies the entql string predicate on the order_type field.
func (f *OrderFilter) WhereOrderType(p entql.StringP) {
	f.Where(p.Field(order.FieldOrderType))
}

// WhereInvestmentType applies the entql string predicate on the investment_type field.
func (f *OrderFilter) WhereInvestmentType(p entql.StringP) {
	f.Where(p.Field(order.FieldInvestmentType))
}

// WhereCouponIds applies the entql json.RawMessage predicate on the coupon_ids field.
func (f *OrderFilter) WhereCouponIds(p entql.BytesP) {
	f.Where(p.Field(order.FieldCouponIds))
}

// WherePaymentType applies the entql string predicate on the payment_type field.
func (f *OrderFilter) WherePaymentType(p entql.StringP) {
	f.Where(p.Field(order.FieldPaymentType))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *OrderFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(order.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *OrderFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPaymentCoinTypeID))
}

// WhereTransferAmount applies the entql other predicate on the transfer_amount field.
func (f *OrderFilter) WhereTransferAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldTransferAmount))
}

// WhereBalanceAmount applies the entql other predicate on the balance_amount field.
func (f *OrderFilter) WhereBalanceAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldBalanceAmount))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *OrderFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldCoinUsdCurrency))
}

// WhereLocalCoinUsdCurrency applies the entql other predicate on the local_coin_usd_currency field.
func (f *OrderFilter) WhereLocalCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldLocalCoinUsdCurrency))
}

// WhereLiveCoinUsdCurrency applies the entql other predicate on the live_coin_usd_currency field.
func (f *OrderFilter) WhereLiveCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldLiveCoinUsdCurrency))
}

// addPredicate implements the predicateAdder interface.
func (olq *OrderLockQuery) addPredicate(pred func(s *sql.Selector)) {
	olq.predicates = append(olq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderLockQuery builder.
func (olq *OrderLockQuery) Filter() *OrderLockFilter {
	return &OrderLockFilter{config: olq.config, predicateAdder: olq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderLockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderLockMutation builder.
func (m *OrderLockMutation) Filter() *OrderLockFilter {
	return &OrderLockFilter{config: m.config, predicateAdder: m}
}

// OrderLockFilter provides a generic filtering capability at runtime for OrderLockQuery.
type OrderLockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderLockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderLockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderLockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderLockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderLockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderLockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderLockFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderLockFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldUserID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderLockFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldOrderID))
}

// WhereLockType applies the entql string predicate on the lock_type field.
func (f *OrderLockFilter) WhereLockType(p entql.StringP) {
	f.Where(p.Field(orderlock.FieldLockType))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrderStateQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderStateQuery builder.
func (osq *OrderStateQuery) Filter() *OrderStateFilter {
	return &OrderStateFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderStateMutation builder.
func (m *OrderStateMutation) Filter() *OrderStateFilter {
	return &OrderStateFilter{config: m.config, predicateAdder: m}
}

// OrderStateFilter provides a generic filtering capability at runtime for OrderStateQuery.
type OrderStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderStateFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderStateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderStateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderStateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderStateFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderstate.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderStateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderstate.FieldOrderID))
}

// WhereOrderState applies the entql string predicate on the order_state field.
func (f *OrderStateFilter) WhereOrderState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldOrderState))
}

// WhereCancelState applies the entql string predicate on the cancel_state field.
func (f *OrderStateFilter) WhereCancelState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldCancelState))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *OrderStateFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldStartMode))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OrderStateFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *OrderStateFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldEndAt))
}

// WherePaidAt applies the entql uint32 predicate on the paid_at field.
func (f *OrderStateFilter) WherePaidAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldPaidAt))
}

// WhereLastBenefitAt applies the entql uint32 predicate on the last_benefit_at field.
func (f *OrderStateFilter) WhereLastBenefitAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldLastBenefitAt))
}

// WhereBenefitState applies the entql string predicate on the benefit_state field.
func (f *OrderStateFilter) WhereBenefitState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldBenefitState))
}

// WhereUserSetPaid applies the entql bool predicate on the user_set_paid field.
func (f *OrderStateFilter) WhereUserSetPaid(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldUserSetPaid))
}

// WhereUserSetCanceled applies the entql bool predicate on the user_set_canceled field.
func (f *OrderStateFilter) WhereUserSetCanceled(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldUserSetCanceled))
}

// WhereAdminSetCanceled applies the entql bool predicate on the admin_set_canceled field.
func (f *OrderStateFilter) WhereAdminSetCanceled(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldAdminSetCanceled))
}

// WherePaymentTransactionID applies the entql string predicate on the payment_transaction_id field.
func (f *OrderStateFilter) WherePaymentTransactionID(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldPaymentTransactionID))
}

// WherePaymentFinishAmount applies the entql other predicate on the payment_finish_amount field.
func (f *OrderStateFilter) WherePaymentFinishAmount(p entql.OtherP) {
	f.Where(p.Field(orderstate.FieldPaymentFinishAmount))
}

// WherePaymentState applies the entql string predicate on the payment_state field.
func (f *OrderStateFilter) WherePaymentState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldPaymentState))
}

// WhereOutofgasHours applies the entql uint32 predicate on the outofgas_hours field.
func (f *OrderStateFilter) WhereOutofgasHours(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldOutofgasHours))
}

// WhereCompensateHours applies the entql uint32 predicate on the compensate_hours field.
func (f *OrderStateFilter) WhereCompensateHours(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldCompensateHours))
}

// WhereRenewState applies the entql string predicate on the renew_state field.
func (f *OrderStateFilter) WhereRenewState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldRenewState))
}

// addPredicate implements the predicateAdder interface.
func (oogq *OutOfGasQuery) addPredicate(pred func(s *sql.Selector)) {
	oogq.predicates = append(oogq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OutOfGasQuery builder.
func (oogq *OutOfGasQuery) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: oogq.config, predicateAdder: oogq}
}

// addPredicate implements the predicateAdder interface.
func (m *OutOfGasMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OutOfGasMutation builder.
func (m *OutOfGasMutation) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: m.config, predicateAdder: m}
}

// OutOfGasFilter provides a generic filtering capability at runtime for OutOfGasQuery.
type OutOfGasFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OutOfGasFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OutOfGasFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OutOfGasFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OutOfGasFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OutOfGasFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OutOfGasFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OutOfGasFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OutOfGasFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *OutOfGasFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (pq *PaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentQuery builder.
func (pq *PaymentQuery) Filter() *PaymentFilter {
	return &PaymentFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentMutation builder.
func (m *PaymentMutation) Filter() *PaymentFilter {
	return &PaymentFilter{config: m.config, predicateAdder: m}
}

// PaymentFilter provides a generic filtering capability at runtime for PaymentQuery.
type PaymentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *PaymentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *PaymentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *PaymentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldOrderID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PaymentFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAccountID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *PaymentFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCoinTypeID))
}

// WhereCoinInfoID applies the entql [16]byte predicate on the coin_info_id field.
func (f *PaymentFilter) WhereCoinInfoID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCoinInfoID))
}

// WhereStartAmount applies the entql other predicate on the start_amount field.
func (f *PaymentFilter) WhereStartAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldStartAmount))
}
