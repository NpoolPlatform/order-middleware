// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   compensate.Table,
			Columns: compensate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: compensate.FieldID,
			},
		},
		Type: "Compensate",
		Fields: map[string]*sqlgraph.FieldSpec{
			compensate.FieldCreatedAt: {Type: field.TypeUint32, Column: compensate.FieldCreatedAt},
			compensate.FieldUpdatedAt: {Type: field.TypeUint32, Column: compensate.FieldUpdatedAt},
			compensate.FieldDeletedAt: {Type: field.TypeUint32, Column: compensate.FieldDeletedAt},
			compensate.FieldOrderID:   {Type: field.TypeUUID, Column: compensate.FieldOrderID},
			compensate.FieldStart:     {Type: field.TypeUint32, Column: compensate.FieldStart},
			compensate.FieldEnd:       {Type: field.TypeUint32, Column: compensate.FieldEnd},
			compensate.FieldMessage:   {Type: field.TypeString, Column: compensate.FieldMessage},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:              {Type: field.TypeUint32, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:              {Type: field.TypeUint32, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:              {Type: field.TypeUint32, Column: order.FieldDeletedAt},
			order.FieldGoodID:                 {Type: field.TypeUUID, Column: order.FieldGoodID},
			order.FieldAppID:                  {Type: field.TypeUUID, Column: order.FieldAppID},
			order.FieldUserID:                 {Type: field.TypeUUID, Column: order.FieldUserID},
			order.FieldParentOrderID:          {Type: field.TypeUUID, Column: order.FieldParentOrderID},
			order.FieldPayWithParent:          {Type: field.TypeBool, Column: order.FieldPayWithParent},
			order.FieldUnits:                  {Type: field.TypeUint32, Column: order.FieldUnits},
			order.FieldUnitsV1:                {Type: field.TypeOther, Column: order.FieldUnitsV1},
			order.FieldPromotionID:            {Type: field.TypeUUID, Column: order.FieldPromotionID},
			order.FieldDiscountCouponID:       {Type: field.TypeUUID, Column: order.FieldDiscountCouponID},
			order.FieldUserSpecialReductionID: {Type: field.TypeUUID, Column: order.FieldUserSpecialReductionID},
			order.FieldStartAt:                {Type: field.TypeUint32, Column: order.FieldStartAt},
			order.FieldEndAt:                  {Type: field.TypeUint32, Column: order.FieldEndAt},
			order.FieldFixAmountCouponID:      {Type: field.TypeUUID, Column: order.FieldFixAmountCouponID},
			order.FieldType:                   {Type: field.TypeString, Column: order.FieldType},
			order.FieldState:                  {Type: field.TypeString, Column: order.FieldState},
			order.FieldCouponIds:              {Type: field.TypeJSON, Column: order.FieldCouponIds},
			order.FieldLastBenefitAt:          {Type: field.TypeUint32, Column: order.FieldLastBenefitAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   outofgas.Table,
			Columns: outofgas.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: outofgas.FieldID,
			},
		},
		Type: "OutOfGas",
		Fields: map[string]*sqlgraph.FieldSpec{
			outofgas.FieldCreatedAt: {Type: field.TypeUint32, Column: outofgas.FieldCreatedAt},
			outofgas.FieldUpdatedAt: {Type: field.TypeUint32, Column: outofgas.FieldUpdatedAt},
			outofgas.FieldDeletedAt: {Type: field.TypeUint32, Column: outofgas.FieldDeletedAt},
			outofgas.FieldOrderID:   {Type: field.TypeUUID, Column: outofgas.FieldOrderID},
			outofgas.FieldStart:     {Type: field.TypeUint32, Column: outofgas.FieldStart},
			outofgas.FieldEnd:       {Type: field.TypeUint32, Column: outofgas.FieldEnd},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		},
		Type: "Payment",
		Fields: map[string]*sqlgraph.FieldSpec{
			payment.FieldCreatedAt:            {Type: field.TypeUint32, Column: payment.FieldCreatedAt},
			payment.FieldUpdatedAt:            {Type: field.TypeUint32, Column: payment.FieldUpdatedAt},
			payment.FieldDeletedAt:            {Type: field.TypeUint32, Column: payment.FieldDeletedAt},
			payment.FieldAppID:                {Type: field.TypeUUID, Column: payment.FieldAppID},
			payment.FieldUserID:               {Type: field.TypeUUID, Column: payment.FieldUserID},
			payment.FieldGoodID:               {Type: field.TypeUUID, Column: payment.FieldGoodID},
			payment.FieldOrderID:              {Type: field.TypeUUID, Column: payment.FieldOrderID},
			payment.FieldAccountID:            {Type: field.TypeUUID, Column: payment.FieldAccountID},
			payment.FieldStartAmount:          {Type: field.TypeOther, Column: payment.FieldStartAmount},
			payment.FieldAmount:               {Type: field.TypeOther, Column: payment.FieldAmount},
			payment.FieldPayWithBalanceAmount: {Type: field.TypeOther, Column: payment.FieldPayWithBalanceAmount},
			payment.FieldFinishAmount:         {Type: field.TypeOther, Column: payment.FieldFinishAmount},
			payment.FieldCoinUsdCurrency:      {Type: field.TypeOther, Column: payment.FieldCoinUsdCurrency},
			payment.FieldLocalCoinUsdCurrency: {Type: field.TypeOther, Column: payment.FieldLocalCoinUsdCurrency},
			payment.FieldLiveCoinUsdCurrency:  {Type: field.TypeOther, Column: payment.FieldLiveCoinUsdCurrency},
			payment.FieldCoinInfoID:           {Type: field.TypeUUID, Column: payment.FieldCoinInfoID},
			payment.FieldState:                {Type: field.TypeString, Column: payment.FieldState},
			payment.FieldChainTransactionID:   {Type: field.TypeString, Column: payment.FieldChainTransactionID},
			payment.FieldUserSetPaid:          {Type: field.TypeBool, Column: payment.FieldUserSetPaid},
			payment.FieldUserSetCanceled:      {Type: field.TypeBool, Column: payment.FieldUserSetCanceled},
			payment.FieldFakePayment:          {Type: field.TypeBool, Column: payment.FieldFakePayment},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CompensateQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CompensateQuery builder.
func (cq *CompensateQuery) Filter() *CompensateFilter {
	return &CompensateFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CompensateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CompensateMutation builder.
func (m *CompensateMutation) Filter() *CompensateFilter {
	return &CompensateFilter{config: m.config, predicateAdder: m}
}

// CompensateFilter provides a generic filtering capability at runtime for CompensateQuery.
type CompensateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CompensateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CompensateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CompensateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CompensateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CompensateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldDeletedAt))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CompensateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldOrderID))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *CompensateFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldStart))
}

// WhereEnd applies the entql uint32 predicate on the end field.
func (f *CompensateFilter) WhereEnd(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldEnd))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CompensateFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(compensate.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OrderFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *OrderFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(order.FieldGoodID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(order.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(order.FieldUserID))
}

// WhereParentOrderID applies the entql [16]byte predicate on the parent_order_id field.
func (f *OrderFilter) WhereParentOrderID(p entql.ValueP) {
	f.Where(p.Field(order.FieldParentOrderID))
}

// WherePayWithParent applies the entql bool predicate on the pay_with_parent field.
func (f *OrderFilter) WherePayWithParent(p entql.BoolP) {
	f.Where(p.Field(order.FieldPayWithParent))
}

// WhereUnits applies the entql uint32 predicate on the units field.
func (f *OrderFilter) WhereUnits(p entql.Uint32P) {
	f.Where(p.Field(order.FieldUnits))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *OrderFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(order.FieldUnitsV1))
}

// WherePromotionID applies the entql [16]byte predicate on the promotion_id field.
func (f *OrderFilter) WherePromotionID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPromotionID))
}

// WhereDiscountCouponID applies the entql [16]byte predicate on the discount_coupon_id field.
func (f *OrderFilter) WhereDiscountCouponID(p entql.ValueP) {
	f.Where(p.Field(order.FieldDiscountCouponID))
}

// WhereUserSpecialReductionID applies the entql [16]byte predicate on the user_special_reduction_id field.
func (f *OrderFilter) WhereUserSpecialReductionID(p entql.ValueP) {
	f.Where(p.Field(order.FieldUserSpecialReductionID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OrderFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *OrderFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldEndAt))
}

// WhereFixAmountCouponID applies the entql [16]byte predicate on the fix_amount_coupon_id field.
func (f *OrderFilter) WhereFixAmountCouponID(p entql.ValueP) {
	f.Where(p.Field(order.FieldFixAmountCouponID))
}

// WhereType applies the entql string predicate on the type field.
func (f *OrderFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(order.FieldType))
}

// WhereState applies the entql string predicate on the state field.
func (f *OrderFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(order.FieldState))
}

// WhereCouponIds applies the entql json.RawMessage predicate on the coupon_ids field.
func (f *OrderFilter) WhereCouponIds(p entql.BytesP) {
	f.Where(p.Field(order.FieldCouponIds))
}

// WhereLastBenefitAt applies the entql uint32 predicate on the last_benefit_at field.
func (f *OrderFilter) WhereLastBenefitAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldLastBenefitAt))
}

// addPredicate implements the predicateAdder interface.
func (oogq *OutOfGasQuery) addPredicate(pred func(s *sql.Selector)) {
	oogq.predicates = append(oogq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OutOfGasQuery builder.
func (oogq *OutOfGasQuery) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: oogq.config, predicateAdder: oogq}
}

// addPredicate implements the predicateAdder interface.
func (m *OutOfGasMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OutOfGasMutation builder.
func (m *OutOfGasMutation) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: m.config, predicateAdder: m}
}

// OutOfGasFilter provides a generic filtering capability at runtime for OutOfGasQuery.
type OutOfGasFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OutOfGasFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OutOfGasFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OutOfGasFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OutOfGasFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OutOfGasFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldDeletedAt))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OutOfGasFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldOrderID))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *OutOfGasFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldStart))
}

// WhereEnd applies the entql uint32 predicate on the end field.
func (f *OutOfGasFilter) WhereEnd(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldEnd))
}

// addPredicate implements the predicateAdder interface.
func (pq *PaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentQuery builder.
func (pq *PaymentQuery) Filter() *PaymentFilter {
	return &PaymentFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentMutation builder.
func (m *PaymentMutation) Filter() *PaymentFilter {
	return &PaymentFilter{config: m.config, predicateAdder: m}
}

// PaymentFilter provides a generic filtering capability at runtime for PaymentQuery.
type PaymentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PaymentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *PaymentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *PaymentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *PaymentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldOrderID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PaymentFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAccountID))
}

// WhereStartAmount applies the entql other predicate on the start_amount field.
func (f *PaymentFilter) WhereStartAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldStartAmount))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *PaymentFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldAmount))
}

// WherePayWithBalanceAmount applies the entql other predicate on the pay_with_balance_amount field.
func (f *PaymentFilter) WherePayWithBalanceAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldPayWithBalanceAmount))
}

// WhereFinishAmount applies the entql other predicate on the finish_amount field.
func (f *PaymentFilter) WhereFinishAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldFinishAmount))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *PaymentFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(payment.FieldCoinUsdCurrency))
}

// WhereLocalCoinUsdCurrency applies the entql other predicate on the local_coin_usd_currency field.
func (f *PaymentFilter) WhereLocalCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(payment.FieldLocalCoinUsdCurrency))
}

// WhereLiveCoinUsdCurrency applies the entql other predicate on the live_coin_usd_currency field.
func (f *PaymentFilter) WhereLiveCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(payment.FieldLiveCoinUsdCurrency))
}

// WhereCoinInfoID applies the entql [16]byte predicate on the coin_info_id field.
func (f *PaymentFilter) WhereCoinInfoID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCoinInfoID))
}

// WhereState applies the entql string predicate on the state field.
func (f *PaymentFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(payment.FieldState))
}

// WhereChainTransactionID applies the entql string predicate on the chain_transaction_id field.
func (f *PaymentFilter) WhereChainTransactionID(p entql.StringP) {
	f.Where(p.Field(payment.FieldChainTransactionID))
}

// WhereUserSetPaid applies the entql bool predicate on the user_set_paid field.
func (f *PaymentFilter) WhereUserSetPaid(p entql.BoolP) {
	f.Where(p.Field(payment.FieldUserSetPaid))
}

// WhereUserSetCanceled applies the entql bool predicate on the user_set_canceled field.
func (f *PaymentFilter) WhereUserSetCanceled(p entql.BoolP) {
	f.Where(p.Field(payment.FieldUserSetCanceled))
}

// WhereFakePayment applies the entql bool predicate on the fake_payment field.
func (f *PaymentFilter) WhereFakePayment(p entql.BoolP) {
	f.Where(p.Field(payment.FieldFakePayment))
}
