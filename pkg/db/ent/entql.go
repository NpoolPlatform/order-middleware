// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/appconfig"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/ordercoupon"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstatebase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentbalance"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymentcontract"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/paymenttransfer"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrentalstate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 15)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appconfig.Table,
			Columns: appconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appconfig.FieldID,
			},
		},
		Type: "AppConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			appconfig.FieldCreatedAt:                              {Type: field.TypeUint32, Column: appconfig.FieldCreatedAt},
			appconfig.FieldUpdatedAt:                              {Type: field.TypeUint32, Column: appconfig.FieldUpdatedAt},
			appconfig.FieldDeletedAt:                              {Type: field.TypeUint32, Column: appconfig.FieldDeletedAt},
			appconfig.FieldEntID:                                  {Type: field.TypeUUID, Column: appconfig.FieldEntID},
			appconfig.FieldAppID:                                  {Type: field.TypeUUID, Column: appconfig.FieldAppID},
			appconfig.FieldSimulateOrderCouponMode:                {Type: field.TypeString, Column: appconfig.FieldSimulateOrderCouponMode},
			appconfig.FieldSimulateOrderCouponProbability:         {Type: field.TypeOther, Column: appconfig.FieldSimulateOrderCouponProbability},
			appconfig.FieldSimulateOrderCashableProfitProbability: {Type: field.TypeOther, Column: appconfig.FieldSimulateOrderCashableProfitProbability},
			appconfig.FieldEnableSimulateOrder:                    {Type: field.TypeBool, Column: appconfig.FieldEnableSimulateOrder},
			appconfig.FieldMaxUnpaidOrders:                        {Type: field.TypeUint32, Column: appconfig.FieldMaxUnpaidOrders},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   compensate.Table,
			Columns: compensate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: compensate.FieldID,
			},
		},
		Type: "Compensate",
		Fields: map[string]*sqlgraph.FieldSpec{
			compensate.FieldCreatedAt:      {Type: field.TypeUint32, Column: compensate.FieldCreatedAt},
			compensate.FieldUpdatedAt:      {Type: field.TypeUint32, Column: compensate.FieldUpdatedAt},
			compensate.FieldDeletedAt:      {Type: field.TypeUint32, Column: compensate.FieldDeletedAt},
			compensate.FieldEntID:          {Type: field.TypeUUID, Column: compensate.FieldEntID},
			compensate.FieldOrderID:        {Type: field.TypeUUID, Column: compensate.FieldOrderID},
			compensate.FieldStartAt:        {Type: field.TypeUint32, Column: compensate.FieldStartAt},
			compensate.FieldEndAt:          {Type: field.TypeUint32, Column: compensate.FieldEndAt},
			compensate.FieldCompensateType: {Type: field.TypeString, Column: compensate.FieldCompensateType},
			compensate.FieldTitle:          {Type: field.TypeString, Column: compensate.FieldTitle},
			compensate.FieldMessage:        {Type: field.TypeString, Column: compensate.FieldMessage},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:            {Type: field.TypeUint32, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:            {Type: field.TypeUint32, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:            {Type: field.TypeUint32, Column: order.FieldDeletedAt},
			order.FieldEntID:                {Type: field.TypeUUID, Column: order.FieldEntID},
			order.FieldAppID:                {Type: field.TypeUUID, Column: order.FieldAppID},
			order.FieldUserID:               {Type: field.TypeUUID, Column: order.FieldUserID},
			order.FieldGoodID:               {Type: field.TypeUUID, Column: order.FieldGoodID},
			order.FieldAppGoodID:            {Type: field.TypeUUID, Column: order.FieldAppGoodID},
			order.FieldPaymentID:            {Type: field.TypeUUID, Column: order.FieldPaymentID},
			order.FieldParentOrderID:        {Type: field.TypeUUID, Column: order.FieldParentOrderID},
			order.FieldUnitsV1:              {Type: field.TypeOther, Column: order.FieldUnitsV1},
			order.FieldGoodValue:            {Type: field.TypeOther, Column: order.FieldGoodValue},
			order.FieldGoodValueUsd:         {Type: field.TypeOther, Column: order.FieldGoodValueUsd},
			order.FieldPaymentAmount:        {Type: field.TypeOther, Column: order.FieldPaymentAmount},
			order.FieldDiscountAmount:       {Type: field.TypeOther, Column: order.FieldDiscountAmount},
			order.FieldPromotionID:          {Type: field.TypeUUID, Column: order.FieldPromotionID},
			order.FieldDuration:             {Type: field.TypeUint32, Column: order.FieldDuration},
			order.FieldOrderType:            {Type: field.TypeString, Column: order.FieldOrderType},
			order.FieldInvestmentType:       {Type: field.TypeString, Column: order.FieldInvestmentType},
			order.FieldCouponIds:            {Type: field.TypeJSON, Column: order.FieldCouponIds},
			order.FieldPaymentType:          {Type: field.TypeString, Column: order.FieldPaymentType},
			order.FieldCoinTypeID:           {Type: field.TypeUUID, Column: order.FieldCoinTypeID},
			order.FieldPaymentCoinTypeID:    {Type: field.TypeUUID, Column: order.FieldPaymentCoinTypeID},
			order.FieldTransferAmount:       {Type: field.TypeOther, Column: order.FieldTransferAmount},
			order.FieldBalanceAmount:        {Type: field.TypeOther, Column: order.FieldBalanceAmount},
			order.FieldCoinUsdCurrency:      {Type: field.TypeOther, Column: order.FieldCoinUsdCurrency},
			order.FieldLocalCoinUsdCurrency: {Type: field.TypeOther, Column: order.FieldLocalCoinUsdCurrency},
			order.FieldLiveCoinUsdCurrency:  {Type: field.TypeOther, Column: order.FieldLiveCoinUsdCurrency},
			order.FieldSimulate:             {Type: field.TypeBool, Column: order.FieldSimulate},
			order.FieldCreateMethod:         {Type: field.TypeString, Column: order.FieldCreateMethod},
			order.FieldMultiPaymentCoins:    {Type: field.TypeBool, Column: order.FieldMultiPaymentCoins},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderbase.Table,
			Columns: orderbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderbase.FieldID,
			},
		},
		Type: "OrderBase",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderbase.FieldCreatedAt:     {Type: field.TypeUint32, Column: orderbase.FieldCreatedAt},
			orderbase.FieldUpdatedAt:     {Type: field.TypeUint32, Column: orderbase.FieldUpdatedAt},
			orderbase.FieldDeletedAt:     {Type: field.TypeUint32, Column: orderbase.FieldDeletedAt},
			orderbase.FieldEntID:         {Type: field.TypeUUID, Column: orderbase.FieldEntID},
			orderbase.FieldAppID:         {Type: field.TypeUUID, Column: orderbase.FieldAppID},
			orderbase.FieldUserID:        {Type: field.TypeUUID, Column: orderbase.FieldUserID},
			orderbase.FieldGoodID:        {Type: field.TypeUUID, Column: orderbase.FieldGoodID},
			orderbase.FieldAppGoodID:     {Type: field.TypeUUID, Column: orderbase.FieldAppGoodID},
			orderbase.FieldParentOrderID: {Type: field.TypeUUID, Column: orderbase.FieldParentOrderID},
			orderbase.FieldOrderType:     {Type: field.TypeString, Column: orderbase.FieldOrderType},
			orderbase.FieldPaymentType:   {Type: field.TypeString, Column: orderbase.FieldPaymentType},
			orderbase.FieldCreateMethod:  {Type: field.TypeString, Column: orderbase.FieldCreateMethod},
			orderbase.FieldSimulate:      {Type: field.TypeBool, Column: orderbase.FieldSimulate},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ordercoupon.Table,
			Columns: ordercoupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: ordercoupon.FieldID,
			},
		},
		Type: "OrderCoupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			ordercoupon.FieldCreatedAt: {Type: field.TypeUint32, Column: ordercoupon.FieldCreatedAt},
			ordercoupon.FieldUpdatedAt: {Type: field.TypeUint32, Column: ordercoupon.FieldUpdatedAt},
			ordercoupon.FieldDeletedAt: {Type: field.TypeUint32, Column: ordercoupon.FieldDeletedAt},
			ordercoupon.FieldEntID:     {Type: field.TypeUUID, Column: ordercoupon.FieldEntID},
			ordercoupon.FieldOrderID:   {Type: field.TypeUUID, Column: ordercoupon.FieldOrderID},
			ordercoupon.FieldCouponID:  {Type: field.TypeUUID, Column: ordercoupon.FieldCouponID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderlock.Table,
			Columns: orderlock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderlock.FieldID,
			},
		},
		Type: "OrderLock",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderlock.FieldCreatedAt: {Type: field.TypeUint32, Column: orderlock.FieldCreatedAt},
			orderlock.FieldUpdatedAt: {Type: field.TypeUint32, Column: orderlock.FieldUpdatedAt},
			orderlock.FieldDeletedAt: {Type: field.TypeUint32, Column: orderlock.FieldDeletedAt},
			orderlock.FieldEntID:     {Type: field.TypeUUID, Column: orderlock.FieldEntID},
			orderlock.FieldOrderID:   {Type: field.TypeUUID, Column: orderlock.FieldOrderID},
			orderlock.FieldLockType:  {Type: field.TypeString, Column: orderlock.FieldLockType},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderstate.Table,
			Columns: orderstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderstate.FieldID,
			},
		},
		Type: "OrderState",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderstate.FieldCreatedAt:            {Type: field.TypeUint32, Column: orderstate.FieldCreatedAt},
			orderstate.FieldUpdatedAt:            {Type: field.TypeUint32, Column: orderstate.FieldUpdatedAt},
			orderstate.FieldDeletedAt:            {Type: field.TypeUint32, Column: orderstate.FieldDeletedAt},
			orderstate.FieldEntID:                {Type: field.TypeUUID, Column: orderstate.FieldEntID},
			orderstate.FieldOrderID:              {Type: field.TypeUUID, Column: orderstate.FieldOrderID},
			orderstate.FieldOrderState:           {Type: field.TypeString, Column: orderstate.FieldOrderState},
			orderstate.FieldCancelState:          {Type: field.TypeString, Column: orderstate.FieldCancelState},
			orderstate.FieldStartMode:            {Type: field.TypeString, Column: orderstate.FieldStartMode},
			orderstate.FieldStartAt:              {Type: field.TypeUint32, Column: orderstate.FieldStartAt},
			orderstate.FieldEndAt:                {Type: field.TypeUint32, Column: orderstate.FieldEndAt},
			orderstate.FieldPaidAt:               {Type: field.TypeUint32, Column: orderstate.FieldPaidAt},
			orderstate.FieldLastBenefitAt:        {Type: field.TypeUint32, Column: orderstate.FieldLastBenefitAt},
			orderstate.FieldBenefitState:         {Type: field.TypeString, Column: orderstate.FieldBenefitState},
			orderstate.FieldUserSetPaid:          {Type: field.TypeBool, Column: orderstate.FieldUserSetPaid},
			orderstate.FieldUserSetCanceled:      {Type: field.TypeBool, Column: orderstate.FieldUserSetCanceled},
			orderstate.FieldAdminSetCanceled:     {Type: field.TypeBool, Column: orderstate.FieldAdminSetCanceled},
			orderstate.FieldPaymentTransactionID: {Type: field.TypeString, Column: orderstate.FieldPaymentTransactionID},
			orderstate.FieldPaymentFinishAmount:  {Type: field.TypeOther, Column: orderstate.FieldPaymentFinishAmount},
			orderstate.FieldPaymentState:         {Type: field.TypeString, Column: orderstate.FieldPaymentState},
			orderstate.FieldOutofgasHours:        {Type: field.TypeUint32, Column: orderstate.FieldOutofgasHours},
			orderstate.FieldCompensateHours:      {Type: field.TypeUint32, Column: orderstate.FieldCompensateHours},
			orderstate.FieldRenewState:           {Type: field.TypeString, Column: orderstate.FieldRenewState},
			orderstate.FieldRenewNotifyAt:        {Type: field.TypeUint32, Column: orderstate.FieldRenewNotifyAt},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderstatebase.Table,
			Columns: orderstatebase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderstatebase.FieldID,
			},
		},
		Type: "OrderStateBase",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderstatebase.FieldCreatedAt:     {Type: field.TypeUint32, Column: orderstatebase.FieldCreatedAt},
			orderstatebase.FieldUpdatedAt:     {Type: field.TypeUint32, Column: orderstatebase.FieldUpdatedAt},
			orderstatebase.FieldDeletedAt:     {Type: field.TypeUint32, Column: orderstatebase.FieldDeletedAt},
			orderstatebase.FieldEntID:         {Type: field.TypeUUID, Column: orderstatebase.FieldEntID},
			orderstatebase.FieldOrderID:       {Type: field.TypeUUID, Column: orderstatebase.FieldOrderID},
			orderstatebase.FieldOrderState:    {Type: field.TypeString, Column: orderstatebase.FieldOrderState},
			orderstatebase.FieldStartMode:     {Type: field.TypeString, Column: orderstatebase.FieldStartMode},
			orderstatebase.FieldStartAt:       {Type: field.TypeUint32, Column: orderstatebase.FieldStartAt},
			orderstatebase.FieldLastBenefitAt: {Type: field.TypeUint32, Column: orderstatebase.FieldLastBenefitAt},
			orderstatebase.FieldBenefitState:  {Type: field.TypeString, Column: orderstatebase.FieldBenefitState},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   outofgas.Table,
			Columns: outofgas.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: outofgas.FieldID,
			},
		},
		Type: "OutOfGas",
		Fields: map[string]*sqlgraph.FieldSpec{
			outofgas.FieldCreatedAt: {Type: field.TypeUint32, Column: outofgas.FieldCreatedAt},
			outofgas.FieldUpdatedAt: {Type: field.TypeUint32, Column: outofgas.FieldUpdatedAt},
			outofgas.FieldDeletedAt: {Type: field.TypeUint32, Column: outofgas.FieldDeletedAt},
			outofgas.FieldEntID:     {Type: field.TypeUUID, Column: outofgas.FieldEntID},
			outofgas.FieldOrderID:   {Type: field.TypeUUID, Column: outofgas.FieldOrderID},
			outofgas.FieldStartAt:   {Type: field.TypeUint32, Column: outofgas.FieldStartAt},
			outofgas.FieldEndAt:     {Type: field.TypeUint32, Column: outofgas.FieldEndAt},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: payment.FieldID,
			},
		},
		Type: "Payment",
		Fields: map[string]*sqlgraph.FieldSpec{
			payment.FieldCreatedAt:   {Type: field.TypeUint32, Column: payment.FieldCreatedAt},
			payment.FieldUpdatedAt:   {Type: field.TypeUint32, Column: payment.FieldUpdatedAt},
			payment.FieldDeletedAt:   {Type: field.TypeUint32, Column: payment.FieldDeletedAt},
			payment.FieldEntID:       {Type: field.TypeUUID, Column: payment.FieldEntID},
			payment.FieldAppID:       {Type: field.TypeUUID, Column: payment.FieldAppID},
			payment.FieldUserID:      {Type: field.TypeUUID, Column: payment.FieldUserID},
			payment.FieldGoodID:      {Type: field.TypeUUID, Column: payment.FieldGoodID},
			payment.FieldOrderID:     {Type: field.TypeUUID, Column: payment.FieldOrderID},
			payment.FieldAccountID:   {Type: field.TypeUUID, Column: payment.FieldAccountID},
			payment.FieldCoinTypeID:  {Type: field.TypeUUID, Column: payment.FieldCoinTypeID},
			payment.FieldCoinInfoID:  {Type: field.TypeUUID, Column: payment.FieldCoinInfoID},
			payment.FieldStartAmount: {Type: field.TypeOther, Column: payment.FieldStartAmount},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   paymentbalance.Table,
			Columns: paymentbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymentbalance.FieldID,
			},
		},
		Type: "PaymentBalance",
		Fields: map[string]*sqlgraph.FieldSpec{
			paymentbalance.FieldCreatedAt:            {Type: field.TypeUint32, Column: paymentbalance.FieldCreatedAt},
			paymentbalance.FieldUpdatedAt:            {Type: field.TypeUint32, Column: paymentbalance.FieldUpdatedAt},
			paymentbalance.FieldDeletedAt:            {Type: field.TypeUint32, Column: paymentbalance.FieldDeletedAt},
			paymentbalance.FieldEntID:                {Type: field.TypeUUID, Column: paymentbalance.FieldEntID},
			paymentbalance.FieldOrderID:              {Type: field.TypeUUID, Column: paymentbalance.FieldOrderID},
			paymentbalance.FieldCoinTypeID:           {Type: field.TypeUUID, Column: paymentbalance.FieldCoinTypeID},
			paymentbalance.FieldAmount:               {Type: field.TypeOther, Column: paymentbalance.FieldAmount},
			paymentbalance.FieldCoinUsdCurrency:      {Type: field.TypeOther, Column: paymentbalance.FieldCoinUsdCurrency},
			paymentbalance.FieldLocalCoinUsdCurrency: {Type: field.TypeOther, Column: paymentbalance.FieldLocalCoinUsdCurrency},
			paymentbalance.FieldLiveCoinUsdCurrency:  {Type: field.TypeOther, Column: paymentbalance.FieldLiveCoinUsdCurrency},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   paymentcontract.Table,
			Columns: paymentcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymentcontract.FieldID,
			},
		},
		Type: "PaymentContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			paymentcontract.FieldCreatedAt:  {Type: field.TypeUint32, Column: paymentcontract.FieldCreatedAt},
			paymentcontract.FieldUpdatedAt:  {Type: field.TypeUint32, Column: paymentcontract.FieldUpdatedAt},
			paymentcontract.FieldDeletedAt:  {Type: field.TypeUint32, Column: paymentcontract.FieldDeletedAt},
			paymentcontract.FieldEntID:      {Type: field.TypeUUID, Column: paymentcontract.FieldEntID},
			paymentcontract.FieldOrderID:    {Type: field.TypeUUID, Column: paymentcontract.FieldOrderID},
			paymentcontract.FieldCoinTypeID: {Type: field.TypeUUID, Column: paymentcontract.FieldCoinTypeID},
			paymentcontract.FieldAmount:     {Type: field.TypeOther, Column: paymentcontract.FieldAmount},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   paymenttransfer.Table,
			Columns: paymenttransfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: paymenttransfer.FieldID,
			},
		},
		Type: "PaymentTransfer",
		Fields: map[string]*sqlgraph.FieldSpec{
			paymenttransfer.FieldCreatedAt:            {Type: field.TypeUint32, Column: paymenttransfer.FieldCreatedAt},
			paymenttransfer.FieldUpdatedAt:            {Type: field.TypeUint32, Column: paymenttransfer.FieldUpdatedAt},
			paymenttransfer.FieldDeletedAt:            {Type: field.TypeUint32, Column: paymenttransfer.FieldDeletedAt},
			paymenttransfer.FieldEntID:                {Type: field.TypeUUID, Column: paymenttransfer.FieldEntID},
			paymenttransfer.FieldOrderID:              {Type: field.TypeUUID, Column: paymenttransfer.FieldOrderID},
			paymenttransfer.FieldCoinTypeID:           {Type: field.TypeUUID, Column: paymenttransfer.FieldCoinTypeID},
			paymenttransfer.FieldAccountID:            {Type: field.TypeUUID, Column: paymenttransfer.FieldAccountID},
			paymenttransfer.FieldAmount:               {Type: field.TypeOther, Column: paymenttransfer.FieldAmount},
			paymenttransfer.FieldStartAmount:          {Type: field.TypeOther, Column: paymenttransfer.FieldStartAmount},
			paymenttransfer.FieldTransactionID:        {Type: field.TypeString, Column: paymenttransfer.FieldTransactionID},
			paymenttransfer.FieldFinishAmount:         {Type: field.TypeOther, Column: paymenttransfer.FieldFinishAmount},
			paymenttransfer.FieldCoinUsdCurrency:      {Type: field.TypeOther, Column: paymenttransfer.FieldCoinUsdCurrency},
			paymenttransfer.FieldLocalCoinUsdCurrency: {Type: field.TypeOther, Column: paymenttransfer.FieldLocalCoinUsdCurrency},
			paymenttransfer.FieldLiveCoinUsdCurrency:  {Type: field.TypeOther, Column: paymenttransfer.FieldLiveCoinUsdCurrency},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   powerrental.Table,
			Columns: powerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrental.FieldID,
			},
		},
		Type: "PowerRental",
		Fields: map[string]*sqlgraph.FieldSpec{
			powerrental.FieldCreatedAt:         {Type: field.TypeUint32, Column: powerrental.FieldCreatedAt},
			powerrental.FieldUpdatedAt:         {Type: field.TypeUint32, Column: powerrental.FieldUpdatedAt},
			powerrental.FieldDeletedAt:         {Type: field.TypeUint32, Column: powerrental.FieldDeletedAt},
			powerrental.FieldEntID:             {Type: field.TypeUUID, Column: powerrental.FieldEntID},
			powerrental.FieldOrderID:           {Type: field.TypeUUID, Column: powerrental.FieldOrderID},
			powerrental.FieldUnits:             {Type: field.TypeOther, Column: powerrental.FieldUnits},
			powerrental.FieldGoodValueUsd:      {Type: field.TypeOther, Column: powerrental.FieldGoodValueUsd},
			powerrental.FieldPaymentAmountUsd:  {Type: field.TypeOther, Column: powerrental.FieldPaymentAmountUsd},
			powerrental.FieldDiscountAmountUsd: {Type: field.TypeOther, Column: powerrental.FieldDiscountAmountUsd},
			powerrental.FieldPromotionID:       {Type: field.TypeUUID, Column: powerrental.FieldPromotionID},
			powerrental.FieldDuration:          {Type: field.TypeUint32, Column: powerrental.FieldDuration},
			powerrental.FieldInvestmentType:    {Type: field.TypeString, Column: powerrental.FieldInvestmentType},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   powerrentalstate.Table,
			Columns: powerrentalstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrentalstate.FieldID,
			},
		},
		Type: "PowerRentalState",
		Fields: map[string]*sqlgraph.FieldSpec{
			powerrentalstate.FieldCreatedAt:        {Type: field.TypeUint32, Column: powerrentalstate.FieldCreatedAt},
			powerrentalstate.FieldUpdatedAt:        {Type: field.TypeUint32, Column: powerrentalstate.FieldUpdatedAt},
			powerrentalstate.FieldDeletedAt:        {Type: field.TypeUint32, Column: powerrentalstate.FieldDeletedAt},
			powerrentalstate.FieldEntID:            {Type: field.TypeUUID, Column: powerrentalstate.FieldEntID},
			powerrentalstate.FieldOrderID:          {Type: field.TypeUUID, Column: powerrentalstate.FieldOrderID},
			powerrentalstate.FieldCancelState:      {Type: field.TypeString, Column: powerrentalstate.FieldCancelState},
			powerrentalstate.FieldEndAt:            {Type: field.TypeUint32, Column: powerrentalstate.FieldEndAt},
			powerrentalstate.FieldPaidAt:           {Type: field.TypeUint32, Column: powerrentalstate.FieldPaidAt},
			powerrentalstate.FieldUserSetPaid:      {Type: field.TypeBool, Column: powerrentalstate.FieldUserSetPaid},
			powerrentalstate.FieldUserSetCanceled:  {Type: field.TypeBool, Column: powerrentalstate.FieldUserSetCanceled},
			powerrentalstate.FieldAdminSetCanceled: {Type: field.TypeBool, Column: powerrentalstate.FieldAdminSetCanceled},
			powerrentalstate.FieldPaymentState:     {Type: field.TypeString, Column: powerrentalstate.FieldPaymentState},
			powerrentalstate.FieldOutofgasHours:    {Type: field.TypeUint32, Column: powerrentalstate.FieldOutofgasHours},
			powerrentalstate.FieldCompensateHours:  {Type: field.TypeUint32, Column: powerrentalstate.FieldCompensateHours},
			powerrentalstate.FieldRenewState:       {Type: field.TypeString, Column: powerrentalstate.FieldRenewState},
			powerrentalstate.FieldRenewNotifyAt:    {Type: field.TypeUint32, Column: powerrentalstate.FieldRenewNotifyAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (acq *AppConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	acq.predicates = append(acq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppConfigQuery builder.
func (acq *AppConfigQuery) Filter() *AppConfigFilter {
	return &AppConfigFilter{config: acq.config, predicateAdder: acq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppConfigMutation builder.
func (m *AppConfigMutation) Filter() *AppConfigFilter {
	return &AppConfigFilter{config: m.config, predicateAdder: m}
}

// AppConfigFilter provides a generic filtering capability at runtime for AppConfigQuery.
type AppConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppConfigFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppConfigFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppConfigFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppConfigFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppConfigFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appconfig.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppConfigFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appconfig.FieldAppID))
}

// WhereSimulateOrderCouponMode applies the entql string predicate on the simulate_order_coupon_mode field.
func (f *AppConfigFilter) WhereSimulateOrderCouponMode(p entql.StringP) {
	f.Where(p.Field(appconfig.FieldSimulateOrderCouponMode))
}

// WhereSimulateOrderCouponProbability applies the entql other predicate on the simulate_order_coupon_probability field.
func (f *AppConfigFilter) WhereSimulateOrderCouponProbability(p entql.OtherP) {
	f.Where(p.Field(appconfig.FieldSimulateOrderCouponProbability))
}

// WhereSimulateOrderCashableProfitProbability applies the entql other predicate on the simulate_order_cashable_profit_probability field.
func (f *AppConfigFilter) WhereSimulateOrderCashableProfitProbability(p entql.OtherP) {
	f.Where(p.Field(appconfig.FieldSimulateOrderCashableProfitProbability))
}

// WhereEnableSimulateOrder applies the entql bool predicate on the enable_simulate_order field.
func (f *AppConfigFilter) WhereEnableSimulateOrder(p entql.BoolP) {
	f.Where(p.Field(appconfig.FieldEnableSimulateOrder))
}

// WhereMaxUnpaidOrders applies the entql uint32 predicate on the max_unpaid_orders field.
func (f *AppConfigFilter) WhereMaxUnpaidOrders(p entql.Uint32P) {
	f.Where(p.Field(appconfig.FieldMaxUnpaidOrders))
}

// addPredicate implements the predicateAdder interface.
func (cq *CompensateQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CompensateQuery builder.
func (cq *CompensateQuery) Filter() *CompensateFilter {
	return &CompensateFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CompensateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CompensateMutation builder.
func (m *CompensateMutation) Filter() *CompensateFilter {
	return &CompensateFilter{config: m.config, predicateAdder: m}
}

// CompensateFilter provides a generic filtering capability at runtime for CompensateQuery.
type CompensateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CompensateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CompensateFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CompensateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CompensateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CompensateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CompensateFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CompensateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(compensate.FieldOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CompensateFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *CompensateFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(compensate.FieldEndAt))
}

// WhereCompensateType applies the entql string predicate on the compensate_type field.
func (f *CompensateFilter) WhereCompensateType(p entql.StringP) {
	f.Where(p.Field(compensate.FieldCompensateType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *CompensateFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(compensate.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CompensateFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(compensate.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(order.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(order.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(order.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *OrderFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(order.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *OrderFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(order.FieldAppGoodID))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *OrderFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPaymentID))
}

// WhereParentOrderID applies the entql [16]byte predicate on the parent_order_id field.
func (f *OrderFilter) WhereParentOrderID(p entql.ValueP) {
	f.Where(p.Field(order.FieldParentOrderID))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *OrderFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(order.FieldUnitsV1))
}

// WhereGoodValue applies the entql other predicate on the good_value field.
func (f *OrderFilter) WhereGoodValue(p entql.OtherP) {
	f.Where(p.Field(order.FieldGoodValue))
}

// WhereGoodValueUsd applies the entql other predicate on the good_value_usd field.
func (f *OrderFilter) WhereGoodValueUsd(p entql.OtherP) {
	f.Where(p.Field(order.FieldGoodValueUsd))
}

// WherePaymentAmount applies the entql other predicate on the payment_amount field.
func (f *OrderFilter) WherePaymentAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldPaymentAmount))
}

// WhereDiscountAmount applies the entql other predicate on the discount_amount field.
func (f *OrderFilter) WhereDiscountAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldDiscountAmount))
}

// WherePromotionID applies the entql [16]byte predicate on the promotion_id field.
func (f *OrderFilter) WherePromotionID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPromotionID))
}

// WhereDuration applies the entql uint32 predicate on the duration field.
func (f *OrderFilter) WhereDuration(p entql.Uint32P) {
	f.Where(p.Field(order.FieldDuration))
}

// WhereOrderType applies the entql string predicate on the order_type field.
func (f *OrderFilter) WhereOrderType(p entql.StringP) {
	f.Where(p.Field(order.FieldOrderType))
}

// WhereInvestmentType applies the entql string predicate on the investment_type field.
func (f *OrderFilter) WhereInvestmentType(p entql.StringP) {
	f.Where(p.Field(order.FieldInvestmentType))
}

// WhereCouponIds applies the entql json.RawMessage predicate on the coupon_ids field.
func (f *OrderFilter) WhereCouponIds(p entql.BytesP) {
	f.Where(p.Field(order.FieldCouponIds))
}

// WherePaymentType applies the entql string predicate on the payment_type field.
func (f *OrderFilter) WherePaymentType(p entql.StringP) {
	f.Where(p.Field(order.FieldPaymentType))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *OrderFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(order.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *OrderFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(order.FieldPaymentCoinTypeID))
}

// WhereTransferAmount applies the entql other predicate on the transfer_amount field.
func (f *OrderFilter) WhereTransferAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldTransferAmount))
}

// WhereBalanceAmount applies the entql other predicate on the balance_amount field.
func (f *OrderFilter) WhereBalanceAmount(p entql.OtherP) {
	f.Where(p.Field(order.FieldBalanceAmount))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *OrderFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldCoinUsdCurrency))
}

// WhereLocalCoinUsdCurrency applies the entql other predicate on the local_coin_usd_currency field.
func (f *OrderFilter) WhereLocalCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldLocalCoinUsdCurrency))
}

// WhereLiveCoinUsdCurrency applies the entql other predicate on the live_coin_usd_currency field.
func (f *OrderFilter) WhereLiveCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(order.FieldLiveCoinUsdCurrency))
}

// WhereSimulate applies the entql bool predicate on the simulate field.
func (f *OrderFilter) WhereSimulate(p entql.BoolP) {
	f.Where(p.Field(order.FieldSimulate))
}

// WhereCreateMethod applies the entql string predicate on the create_method field.
func (f *OrderFilter) WhereCreateMethod(p entql.StringP) {
	f.Where(p.Field(order.FieldCreateMethod))
}

// WhereMultiPaymentCoins applies the entql bool predicate on the multi_payment_coins field.
func (f *OrderFilter) WhereMultiPaymentCoins(p entql.BoolP) {
	f.Where(p.Field(order.FieldMultiPaymentCoins))
}

// addPredicate implements the predicateAdder interface.
func (obq *OrderBaseQuery) addPredicate(pred func(s *sql.Selector)) {
	obq.predicates = append(obq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderBaseQuery builder.
func (obq *OrderBaseQuery) Filter() *OrderBaseFilter {
	return &OrderBaseFilter{config: obq.config, predicateAdder: obq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderBaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderBaseMutation builder.
func (m *OrderBaseMutation) Filter() *OrderBaseFilter {
	return &OrderBaseFilter{config: m.config, predicateAdder: m}
}

// OrderBaseFilter provides a generic filtering capability at runtime for OrderBaseQuery.
type OrderBaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderBaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderBaseFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderbase.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderBaseFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbase.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderBaseFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbase.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderBaseFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderbase.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderBaseFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderBaseFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderBaseFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *OrderBaseFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *OrderBaseFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldAppGoodID))
}

// WhereParentOrderID applies the entql [16]byte predicate on the parent_order_id field.
func (f *OrderBaseFilter) WhereParentOrderID(p entql.ValueP) {
	f.Where(p.Field(orderbase.FieldParentOrderID))
}

// WhereOrderType applies the entql string predicate on the order_type field.
func (f *OrderBaseFilter) WhereOrderType(p entql.StringP) {
	f.Where(p.Field(orderbase.FieldOrderType))
}

// WherePaymentType applies the entql string predicate on the payment_type field.
func (f *OrderBaseFilter) WherePaymentType(p entql.StringP) {
	f.Where(p.Field(orderbase.FieldPaymentType))
}

// WhereCreateMethod applies the entql string predicate on the create_method field.
func (f *OrderBaseFilter) WhereCreateMethod(p entql.StringP) {
	f.Where(p.Field(orderbase.FieldCreateMethod))
}

// WhereSimulate applies the entql bool predicate on the simulate field.
func (f *OrderBaseFilter) WhereSimulate(p entql.BoolP) {
	f.Where(p.Field(orderbase.FieldSimulate))
}

// addPredicate implements the predicateAdder interface.
func (ocq *OrderCouponQuery) addPredicate(pred func(s *sql.Selector)) {
	ocq.predicates = append(ocq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderCouponQuery builder.
func (ocq *OrderCouponQuery) Filter() *OrderCouponFilter {
	return &OrderCouponFilter{config: ocq.config, predicateAdder: ocq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderCouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderCouponMutation builder.
func (m *OrderCouponMutation) Filter() *OrderCouponFilter {
	return &OrderCouponFilter{config: m.config, predicateAdder: m}
}

// OrderCouponFilter provides a generic filtering capability at runtime for OrderCouponQuery.
type OrderCouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderCouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderCouponFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(ordercoupon.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderCouponFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(ordercoupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderCouponFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(ordercoupon.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderCouponFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(ordercoupon.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderCouponFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(ordercoupon.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderCouponFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(ordercoupon.FieldOrderID))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *OrderCouponFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(ordercoupon.FieldCouponID))
}

// addPredicate implements the predicateAdder interface.
func (olq *OrderLockQuery) addPredicate(pred func(s *sql.Selector)) {
	olq.predicates = append(olq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderLockQuery builder.
func (olq *OrderLockQuery) Filter() *OrderLockFilter {
	return &OrderLockFilter{config: olq.config, predicateAdder: olq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderLockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderLockMutation builder.
func (m *OrderLockMutation) Filter() *OrderLockFilter {
	return &OrderLockFilter{config: m.config, predicateAdder: m}
}

// OrderLockFilter provides a generic filtering capability at runtime for OrderLockQuery.
type OrderLockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderLockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderLockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderLockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderLockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderLockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderlock.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderLockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderLockFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderlock.FieldOrderID))
}

// WhereLockType applies the entql string predicate on the lock_type field.
func (f *OrderLockFilter) WhereLockType(p entql.StringP) {
	f.Where(p.Field(orderlock.FieldLockType))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrderStateQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderStateQuery builder.
func (osq *OrderStateQuery) Filter() *OrderStateFilter {
	return &OrderStateFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderStateMutation builder.
func (m *OrderStateMutation) Filter() *OrderStateFilter {
	return &OrderStateFilter{config: m.config, predicateAdder: m}
}

// OrderStateFilter provides a generic filtering capability at runtime for OrderStateQuery.
type OrderStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderStateFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderStateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderStateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderStateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderStateFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderstate.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderStateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderstate.FieldOrderID))
}

// WhereOrderState applies the entql string predicate on the order_state field.
func (f *OrderStateFilter) WhereOrderState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldOrderState))
}

// WhereCancelState applies the entql string predicate on the cancel_state field.
func (f *OrderStateFilter) WhereCancelState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldCancelState))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *OrderStateFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldStartMode))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OrderStateFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *OrderStateFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldEndAt))
}

// WherePaidAt applies the entql uint32 predicate on the paid_at field.
func (f *OrderStateFilter) WherePaidAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldPaidAt))
}

// WhereLastBenefitAt applies the entql uint32 predicate on the last_benefit_at field.
func (f *OrderStateFilter) WhereLastBenefitAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldLastBenefitAt))
}

// WhereBenefitState applies the entql string predicate on the benefit_state field.
func (f *OrderStateFilter) WhereBenefitState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldBenefitState))
}

// WhereUserSetPaid applies the entql bool predicate on the user_set_paid field.
func (f *OrderStateFilter) WhereUserSetPaid(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldUserSetPaid))
}

// WhereUserSetCanceled applies the entql bool predicate on the user_set_canceled field.
func (f *OrderStateFilter) WhereUserSetCanceled(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldUserSetCanceled))
}

// WhereAdminSetCanceled applies the entql bool predicate on the admin_set_canceled field.
func (f *OrderStateFilter) WhereAdminSetCanceled(p entql.BoolP) {
	f.Where(p.Field(orderstate.FieldAdminSetCanceled))
}

// WherePaymentTransactionID applies the entql string predicate on the payment_transaction_id field.
func (f *OrderStateFilter) WherePaymentTransactionID(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldPaymentTransactionID))
}

// WherePaymentFinishAmount applies the entql other predicate on the payment_finish_amount field.
func (f *OrderStateFilter) WherePaymentFinishAmount(p entql.OtherP) {
	f.Where(p.Field(orderstate.FieldPaymentFinishAmount))
}

// WherePaymentState applies the entql string predicate on the payment_state field.
func (f *OrderStateFilter) WherePaymentState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldPaymentState))
}

// WhereOutofgasHours applies the entql uint32 predicate on the outofgas_hours field.
func (f *OrderStateFilter) WhereOutofgasHours(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldOutofgasHours))
}

// WhereCompensateHours applies the entql uint32 predicate on the compensate_hours field.
func (f *OrderStateFilter) WhereCompensateHours(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldCompensateHours))
}

// WhereRenewState applies the entql string predicate on the renew_state field.
func (f *OrderStateFilter) WhereRenewState(p entql.StringP) {
	f.Where(p.Field(orderstate.FieldRenewState))
}

// WhereRenewNotifyAt applies the entql uint32 predicate on the renew_notify_at field.
func (f *OrderStateFilter) WhereRenewNotifyAt(p entql.Uint32P) {
	f.Where(p.Field(orderstate.FieldRenewNotifyAt))
}

// addPredicate implements the predicateAdder interface.
func (osbq *OrderStateBaseQuery) addPredicate(pred func(s *sql.Selector)) {
	osbq.predicates = append(osbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderStateBaseQuery builder.
func (osbq *OrderStateBaseQuery) Filter() *OrderStateBaseFilter {
	return &OrderStateBaseFilter{config: osbq.config, predicateAdder: osbq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderStateBaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderStateBaseMutation builder.
func (m *OrderStateBaseMutation) Filter() *OrderStateBaseFilter {
	return &OrderStateBaseFilter{config: m.config, predicateAdder: m}
}

// OrderStateBaseFilter provides a generic filtering capability at runtime for OrderStateBaseQuery.
type OrderStateBaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderStateBaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderStateBaseFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderStateBaseFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderStateBaseFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderStateBaseFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderStateBaseFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderstatebase.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OrderStateBaseFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(orderstatebase.FieldOrderID))
}

// WhereOrderState applies the entql string predicate on the order_state field.
func (f *OrderStateBaseFilter) WhereOrderState(p entql.StringP) {
	f.Where(p.Field(orderstatebase.FieldOrderState))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *OrderStateBaseFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(orderstatebase.FieldStartMode))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OrderStateBaseFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldStartAt))
}

// WhereLastBenefitAt applies the entql uint32 predicate on the last_benefit_at field.
func (f *OrderStateBaseFilter) WhereLastBenefitAt(p entql.Uint32P) {
	f.Where(p.Field(orderstatebase.FieldLastBenefitAt))
}

// WhereBenefitState applies the entql string predicate on the benefit_state field.
func (f *OrderStateBaseFilter) WhereBenefitState(p entql.StringP) {
	f.Where(p.Field(orderstatebase.FieldBenefitState))
}

// addPredicate implements the predicateAdder interface.
func (oogq *OutOfGasQuery) addPredicate(pred func(s *sql.Selector)) {
	oogq.predicates = append(oogq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OutOfGasQuery builder.
func (oogq *OutOfGasQuery) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: oogq.config, predicateAdder: oogq}
}

// addPredicate implements the predicateAdder interface.
func (m *OutOfGasMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OutOfGasMutation builder.
func (m *OutOfGasMutation) Filter() *OutOfGasFilter {
	return &OutOfGasFilter{config: m.config, predicateAdder: m}
}

// OutOfGasFilter provides a generic filtering capability at runtime for OutOfGasQuery.
type OutOfGasFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OutOfGasFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OutOfGasFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OutOfGasFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OutOfGasFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OutOfGasFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OutOfGasFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *OutOfGasFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(outofgas.FieldOrderID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *OutOfGasFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *OutOfGasFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(outofgas.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (pq *PaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentQuery builder.
func (pq *PaymentQuery) Filter() *PaymentFilter {
	return &PaymentFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentMutation builder.
func (m *PaymentMutation) Filter() *PaymentFilter {
	return &PaymentFilter{config: m.config, predicateAdder: m}
}

// PaymentFilter provides a generic filtering capability at runtime for PaymentQuery.
type PaymentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(payment.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *PaymentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *PaymentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *PaymentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldOrderID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PaymentFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldAccountID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *PaymentFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCoinTypeID))
}

// WhereCoinInfoID applies the entql [16]byte predicate on the coin_info_id field.
func (f *PaymentFilter) WhereCoinInfoID(p entql.ValueP) {
	f.Where(p.Field(payment.FieldCoinInfoID))
}

// WhereStartAmount applies the entql other predicate on the start_amount field.
func (f *PaymentFilter) WhereStartAmount(p entql.OtherP) {
	f.Where(p.Field(payment.FieldStartAmount))
}

// addPredicate implements the predicateAdder interface.
func (pbq *PaymentBalanceQuery) addPredicate(pred func(s *sql.Selector)) {
	pbq.predicates = append(pbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentBalanceQuery builder.
func (pbq *PaymentBalanceQuery) Filter() *PaymentBalanceFilter {
	return &PaymentBalanceFilter{config: pbq.config, predicateAdder: pbq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentBalanceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentBalanceMutation builder.
func (m *PaymentBalanceMutation) Filter() *PaymentBalanceFilter {
	return &PaymentBalanceFilter{config: m.config, predicateAdder: m}
}

// PaymentBalanceFilter provides a generic filtering capability at runtime for PaymentBalanceQuery.
type PaymentBalanceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentBalanceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentBalanceFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(paymentbalance.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentBalanceFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentbalance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentBalanceFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentbalance.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentBalanceFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentbalance.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentBalanceFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(paymentbalance.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentBalanceFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(paymentbalance.FieldOrderID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *PaymentBalanceFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(paymentbalance.FieldCoinTypeID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *PaymentBalanceFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(paymentbalance.FieldAmount))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *PaymentBalanceFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymentbalance.FieldCoinUsdCurrency))
}

// WhereLocalCoinUsdCurrency applies the entql other predicate on the local_coin_usd_currency field.
func (f *PaymentBalanceFilter) WhereLocalCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymentbalance.FieldLocalCoinUsdCurrency))
}

// WhereLiveCoinUsdCurrency applies the entql other predicate on the live_coin_usd_currency field.
func (f *PaymentBalanceFilter) WhereLiveCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymentbalance.FieldLiveCoinUsdCurrency))
}

// addPredicate implements the predicateAdder interface.
func (pcq *PaymentContractQuery) addPredicate(pred func(s *sql.Selector)) {
	pcq.predicates = append(pcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentContractQuery builder.
func (pcq *PaymentContractQuery) Filter() *PaymentContractFilter {
	return &PaymentContractFilter{config: pcq.config, predicateAdder: pcq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentContractMutation builder.
func (m *PaymentContractMutation) Filter() *PaymentContractFilter {
	return &PaymentContractFilter{config: m.config, predicateAdder: m}
}

// PaymentContractFilter provides a generic filtering capability at runtime for PaymentContractQuery.
type PaymentContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentContractFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(paymentcontract.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentContractFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentcontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentContractFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentcontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentContractFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(paymentcontract.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentContractFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(paymentcontract.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentContractFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(paymentcontract.FieldOrderID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *PaymentContractFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(paymentcontract.FieldCoinTypeID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *PaymentContractFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(paymentcontract.FieldAmount))
}

// addPredicate implements the predicateAdder interface.
func (ptq *PaymentTransferQuery) addPredicate(pred func(s *sql.Selector)) {
	ptq.predicates = append(ptq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PaymentTransferQuery builder.
func (ptq *PaymentTransferQuery) Filter() *PaymentTransferFilter {
	return &PaymentTransferFilter{config: ptq.config, predicateAdder: ptq}
}

// addPredicate implements the predicateAdder interface.
func (m *PaymentTransferMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PaymentTransferMutation builder.
func (m *PaymentTransferMutation) Filter() *PaymentTransferFilter {
	return &PaymentTransferFilter{config: m.config, predicateAdder: m}
}

// PaymentTransferFilter provides a generic filtering capability at runtime for PaymentTransferQuery.
type PaymentTransferFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PaymentTransferFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PaymentTransferFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(paymenttransfer.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PaymentTransferFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymenttransfer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PaymentTransferFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(paymenttransfer.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PaymentTransferFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(paymenttransfer.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PaymentTransferFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(paymenttransfer.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PaymentTransferFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(paymenttransfer.FieldOrderID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *PaymentTransferFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(paymenttransfer.FieldCoinTypeID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *PaymentTransferFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(paymenttransfer.FieldAccountID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *PaymentTransferFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldAmount))
}

// WhereStartAmount applies the entql other predicate on the start_amount field.
func (f *PaymentTransferFilter) WhereStartAmount(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldStartAmount))
}

// WhereTransactionID applies the entql string predicate on the transaction_id field.
func (f *PaymentTransferFilter) WhereTransactionID(p entql.StringP) {
	f.Where(p.Field(paymenttransfer.FieldTransactionID))
}

// WhereFinishAmount applies the entql other predicate on the finish_amount field.
func (f *PaymentTransferFilter) WhereFinishAmount(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldFinishAmount))
}

// WhereCoinUsdCurrency applies the entql other predicate on the coin_usd_currency field.
func (f *PaymentTransferFilter) WhereCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldCoinUsdCurrency))
}

// WhereLocalCoinUsdCurrency applies the entql other predicate on the local_coin_usd_currency field.
func (f *PaymentTransferFilter) WhereLocalCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldLocalCoinUsdCurrency))
}

// WhereLiveCoinUsdCurrency applies the entql other predicate on the live_coin_usd_currency field.
func (f *PaymentTransferFilter) WhereLiveCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(paymenttransfer.FieldLiveCoinUsdCurrency))
}

// addPredicate implements the predicateAdder interface.
func (prq *PowerRentalQuery) addPredicate(pred func(s *sql.Selector)) {
	prq.predicates = append(prq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PowerRentalQuery builder.
func (prq *PowerRentalQuery) Filter() *PowerRentalFilter {
	return &PowerRentalFilter{config: prq.config, predicateAdder: prq}
}

// addPredicate implements the predicateAdder interface.
func (m *PowerRentalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PowerRentalMutation builder.
func (m *PowerRentalMutation) Filter() *PowerRentalFilter {
	return &PowerRentalFilter{config: m.config, predicateAdder: m}
}

// PowerRentalFilter provides a generic filtering capability at runtime for PowerRentalQuery.
type PowerRentalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PowerRentalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PowerRentalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PowerRentalFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PowerRentalFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PowerRentalFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PowerRentalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PowerRentalFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldOrderID))
}

// WhereUnits applies the entql other predicate on the units field.
func (f *PowerRentalFilter) WhereUnits(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldUnits))
}

// WhereGoodValueUsd applies the entql other predicate on the good_value_usd field.
func (f *PowerRentalFilter) WhereGoodValueUsd(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldGoodValueUsd))
}

// WherePaymentAmountUsd applies the entql other predicate on the payment_amount_usd field.
func (f *PowerRentalFilter) WherePaymentAmountUsd(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldPaymentAmountUsd))
}

// WhereDiscountAmountUsd applies the entql other predicate on the discount_amount_usd field.
func (f *PowerRentalFilter) WhereDiscountAmountUsd(p entql.OtherP) {
	f.Where(p.Field(powerrental.FieldDiscountAmountUsd))
}

// WherePromotionID applies the entql [16]byte predicate on the promotion_id field.
func (f *PowerRentalFilter) WherePromotionID(p entql.ValueP) {
	f.Where(p.Field(powerrental.FieldPromotionID))
}

// WhereDuration applies the entql uint32 predicate on the duration field.
func (f *PowerRentalFilter) WhereDuration(p entql.Uint32P) {
	f.Where(p.Field(powerrental.FieldDuration))
}

// WhereInvestmentType applies the entql string predicate on the investment_type field.
func (f *PowerRentalFilter) WhereInvestmentType(p entql.StringP) {
	f.Where(p.Field(powerrental.FieldInvestmentType))
}

// addPredicate implements the predicateAdder interface.
func (prsq *PowerRentalStateQuery) addPredicate(pred func(s *sql.Selector)) {
	prsq.predicates = append(prsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PowerRentalStateQuery builder.
func (prsq *PowerRentalStateQuery) Filter() *PowerRentalStateFilter {
	return &PowerRentalStateFilter{config: prsq.config, predicateAdder: prsq}
}

// addPredicate implements the predicateAdder interface.
func (m *PowerRentalStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PowerRentalStateMutation builder.
func (m *PowerRentalStateMutation) Filter() *PowerRentalStateFilter {
	return &PowerRentalStateFilter{config: m.config, predicateAdder: m}
}

// PowerRentalStateFilter provides a generic filtering capability at runtime for PowerRentalStateQuery.
type PowerRentalStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PowerRentalStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PowerRentalStateFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PowerRentalStateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PowerRentalStateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PowerRentalStateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PowerRentalStateFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(powerrentalstate.FieldEntID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *PowerRentalStateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(powerrentalstate.FieldOrderID))
}

// WhereCancelState applies the entql string predicate on the cancel_state field.
func (f *PowerRentalStateFilter) WhereCancelState(p entql.StringP) {
	f.Where(p.Field(powerrentalstate.FieldCancelState))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *PowerRentalStateFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldEndAt))
}

// WherePaidAt applies the entql uint32 predicate on the paid_at field.
func (f *PowerRentalStateFilter) WherePaidAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldPaidAt))
}

// WhereUserSetPaid applies the entql bool predicate on the user_set_paid field.
func (f *PowerRentalStateFilter) WhereUserSetPaid(p entql.BoolP) {
	f.Where(p.Field(powerrentalstate.FieldUserSetPaid))
}

// WhereUserSetCanceled applies the entql bool predicate on the user_set_canceled field.
func (f *PowerRentalStateFilter) WhereUserSetCanceled(p entql.BoolP) {
	f.Where(p.Field(powerrentalstate.FieldUserSetCanceled))
}

// WhereAdminSetCanceled applies the entql bool predicate on the admin_set_canceled field.
func (f *PowerRentalStateFilter) WhereAdminSetCanceled(p entql.BoolP) {
	f.Where(p.Field(powerrentalstate.FieldAdminSetCanceled))
}

// WherePaymentState applies the entql string predicate on the payment_state field.
func (f *PowerRentalStateFilter) WherePaymentState(p entql.StringP) {
	f.Where(p.Field(powerrentalstate.FieldPaymentState))
}

// WhereOutofgasHours applies the entql uint32 predicate on the outofgas_hours field.
func (f *PowerRentalStateFilter) WhereOutofgasHours(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldOutofgasHours))
}

// WhereCompensateHours applies the entql uint32 predicate on the compensate_hours field.
func (f *PowerRentalStateFilter) WhereCompensateHours(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldCompensateHours))
}

// WhereRenewState applies the entql string predicate on the renew_state field.
func (f *PowerRentalStateFilter) WhereRenewState(p entql.StringP) {
	f.Where(p.Field(powerrentalstate.FieldRenewState))
}

// WhereRenewNotifyAt applies the entql uint32 predicate on the renew_notify_at field.
func (f *PowerRentalStateFilter) WhereRenewNotifyAt(p entql.Uint32P) {
	f.Where(p.Field(powerrentalstate.FieldRenewNotifyAt))
}
