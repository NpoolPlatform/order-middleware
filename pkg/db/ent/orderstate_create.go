// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderStateCreate is the builder for creating a OrderState entity.
type OrderStateCreate struct {
	config
	mutation *OrderStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrderStateCreate) SetCreatedAt(u uint32) *OrderStateCreate {
	osc.mutation.SetCreatedAt(u)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableCreatedAt(u *uint32) *OrderStateCreate {
	if u != nil {
		osc.SetCreatedAt(*u)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrderStateCreate) SetUpdatedAt(u uint32) *OrderStateCreate {
	osc.mutation.SetUpdatedAt(u)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableUpdatedAt(u *uint32) *OrderStateCreate {
	if u != nil {
		osc.SetUpdatedAt(*u)
	}
	return osc
}

// SetDeletedAt sets the "deleted_at" field.
func (osc *OrderStateCreate) SetDeletedAt(u uint32) *OrderStateCreate {
	osc.mutation.SetDeletedAt(u)
	return osc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableDeletedAt(u *uint32) *OrderStateCreate {
	if u != nil {
		osc.SetDeletedAt(*u)
	}
	return osc
}

// SetOrderID sets the "order_id" field.
func (osc *OrderStateCreate) SetOrderID(u uuid.UUID) *OrderStateCreate {
	osc.mutation.SetOrderID(u)
	return osc
}

// SetOrderState sets the "order_state" field.
func (osc *OrderStateCreate) SetOrderState(s string) *OrderStateCreate {
	osc.mutation.SetOrderState(s)
	return osc
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableOrderState(s *string) *OrderStateCreate {
	if s != nil {
		osc.SetOrderState(*s)
	}
	return osc
}

// SetEndAt sets the "end_at" field.
func (osc *OrderStateCreate) SetEndAt(u uint32) *OrderStateCreate {
	osc.mutation.SetEndAt(u)
	return osc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableEndAt(u *uint32) *OrderStateCreate {
	if u != nil {
		osc.SetEndAt(*u)
	}
	return osc
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osc *OrderStateCreate) SetLastBenefitAt(u uint32) *OrderStateCreate {
	osc.mutation.SetLastBenefitAt(u)
	return osc
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableLastBenefitAt(u *uint32) *OrderStateCreate {
	if u != nil {
		osc.SetLastBenefitAt(*u)
	}
	return osc
}

// SetBenefitState sets the "benefit_state" field.
func (osc *OrderStateCreate) SetBenefitState(s string) *OrderStateCreate {
	osc.mutation.SetBenefitState(s)
	return osc
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableBenefitState(s *string) *OrderStateCreate {
	if s != nil {
		osc.SetBenefitState(*s)
	}
	return osc
}

// SetUserSetPaid sets the "user_set_paid" field.
func (osc *OrderStateCreate) SetUserSetPaid(b bool) *OrderStateCreate {
	osc.mutation.SetUserSetPaid(b)
	return osc
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableUserSetPaid(b *bool) *OrderStateCreate {
	if b != nil {
		osc.SetUserSetPaid(*b)
	}
	return osc
}

// SetUserSetCancelled sets the "user_set_cancelled" field.
func (osc *OrderStateCreate) SetUserSetCancelled(b bool) *OrderStateCreate {
	osc.mutation.SetUserSetCancelled(b)
	return osc
}

// SetNillableUserSetCancelled sets the "user_set_cancelled" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableUserSetCancelled(b *bool) *OrderStateCreate {
	if b != nil {
		osc.SetUserSetCancelled(*b)
	}
	return osc
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (osc *OrderStateCreate) SetPaymentTransactionID(s string) *OrderStateCreate {
	osc.mutation.SetPaymentTransactionID(s)
	return osc
}

// SetNillablePaymentTransactionID sets the "payment_transaction_id" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillablePaymentTransactionID(s *string) *OrderStateCreate {
	if s != nil {
		osc.SetPaymentTransactionID(*s)
	}
	return osc
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (osc *OrderStateCreate) SetPaymentFinishAmount(d decimal.Decimal) *OrderStateCreate {
	osc.mutation.SetPaymentFinishAmount(d)
	return osc
}

// SetNillablePaymentFinishAmount sets the "payment_finish_amount" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillablePaymentFinishAmount(d *decimal.Decimal) *OrderStateCreate {
	if d != nil {
		osc.SetPaymentFinishAmount(*d)
	}
	return osc
}

// SetPaymentState sets the "payment_state" field.
func (osc *OrderStateCreate) SetPaymentState(s string) *OrderStateCreate {
	osc.mutation.SetPaymentState(s)
	return osc
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillablePaymentState(s *string) *OrderStateCreate {
	if s != nil {
		osc.SetPaymentState(*s)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OrderStateCreate) SetID(u uuid.UUID) *OrderStateCreate {
	osc.mutation.SetID(u)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OrderStateCreate) SetNillableID(u *uuid.UUID) *OrderStateCreate {
	if u != nil {
		osc.SetID(*u)
	}
	return osc
}

// Mutation returns the OrderStateMutation object of the builder.
func (osc *OrderStateCreate) Mutation() *OrderStateMutation {
	return osc.mutation
}

// Save creates the OrderState in the database.
func (osc *OrderStateCreate) Save(ctx context.Context) (*OrderState, error) {
	var (
		err  error
		node *OrderState
	)
	if err := osc.defaults(); err != nil {
		return nil, err
	}
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			if node, err = osc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			if osc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, osc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderStateCreate) SaveX(ctx context.Context) *OrderState {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderStateCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderStateCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrderStateCreate) defaults() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		if orderstate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderstate.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		if orderstate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderstate.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.DeletedAt(); !ok {
		if orderstate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderstate.DefaultDeletedAt()
		osc.mutation.SetDeletedAt(v)
	}
	if _, ok := osc.mutation.OrderState(); !ok {
		v := orderstate.DefaultOrderState
		osc.mutation.SetOrderState(v)
	}
	if _, ok := osc.mutation.EndAt(); !ok {
		v := orderstate.DefaultEndAt
		osc.mutation.SetEndAt(v)
	}
	if _, ok := osc.mutation.LastBenefitAt(); !ok {
		v := orderstate.DefaultLastBenefitAt
		osc.mutation.SetLastBenefitAt(v)
	}
	if _, ok := osc.mutation.BenefitState(); !ok {
		v := orderstate.DefaultBenefitState
		osc.mutation.SetBenefitState(v)
	}
	if _, ok := osc.mutation.UserSetPaid(); !ok {
		v := orderstate.DefaultUserSetPaid
		osc.mutation.SetUserSetPaid(v)
	}
	if _, ok := osc.mutation.UserSetCancelled(); !ok {
		v := orderstate.DefaultUserSetCancelled
		osc.mutation.SetUserSetCancelled(v)
	}
	if _, ok := osc.mutation.PaymentTransactionID(); !ok {
		v := orderstate.DefaultPaymentTransactionID
		osc.mutation.SetPaymentTransactionID(v)
	}
	if _, ok := osc.mutation.PaymentFinishAmount(); !ok {
		v := orderstate.DefaultPaymentFinishAmount
		osc.mutation.SetPaymentFinishAmount(v)
	}
	if _, ok := osc.mutation.PaymentState(); !ok {
		v := orderstate.DefaultPaymentState
		osc.mutation.SetPaymentState(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		if orderstate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized orderstate.DefaultID (forgotten import ent/runtime?)")
		}
		v := orderstate.DefaultID()
		osc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderStateCreate) check() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderState.created_at"`)}
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderState.updated_at"`)}
	}
	if _, ok := osc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderState.deleted_at"`)}
	}
	if _, ok := osc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderState.order_id"`)}
	}
	return nil
}

func (osc *OrderStateCreate) sqlSave(ctx context.Context) (*OrderState, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (osc *OrderStateCreate) createSpec() (*OrderState, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderState{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderstate.FieldID,
			},
		}
	)
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := osc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderstate.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := osc.mutation.OrderState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstate.FieldOrderState,
		})
		_node.OrderState = value
	}
	if value, ok := osc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstate.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := osc.mutation.LastBenefitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstate.FieldLastBenefitAt,
		})
		_node.LastBenefitAt = value
	}
	if value, ok := osc.mutation.BenefitState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstate.FieldBenefitState,
		})
		_node.BenefitState = value
	}
	if value, ok := osc.mutation.UserSetPaid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orderstate.FieldUserSetPaid,
		})
		_node.UserSetPaid = value
	}
	if value, ok := osc.mutation.UserSetCancelled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orderstate.FieldUserSetCancelled,
		})
		_node.UserSetCancelled = value
	}
	if value, ok := osc.mutation.PaymentTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstate.FieldPaymentTransactionID,
		})
		_node.PaymentTransactionID = value
	}
	if value, ok := osc.mutation.PaymentFinishAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderstate.FieldPaymentFinishAmount,
		})
		_node.PaymentFinishAmount = value
	}
	if value, ok := osc.mutation.PaymentState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstate.FieldPaymentState,
		})
		_node.PaymentState = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (osc *OrderStateCreate) OnConflict(opts ...sql.ConflictOption) *OrderStateUpsertOne {
	osc.conflict = opts
	return &OrderStateUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (osc *OrderStateCreate) OnConflictColumns(columns ...string) *OrderStateUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OrderStateUpsertOne{
		create: osc,
	}
}

type (
	// OrderStateUpsertOne is the builder for "upsert"-ing
	//  one OrderState node.
	OrderStateUpsertOne struct {
		create *OrderStateCreate
	}

	// OrderStateUpsert is the "OnConflict" setter.
	OrderStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateUpsert) SetCreatedAt(v uint32) *OrderStateUpsert {
	u.Set(orderstate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateCreatedAt() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateUpsert) AddCreatedAt(v uint32) *OrderStateUpsert {
	u.Add(orderstate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateUpsert) SetUpdatedAt(v uint32) *OrderStateUpsert {
	u.Set(orderstate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateUpdatedAt() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateUpsert) AddUpdatedAt(v uint32) *OrderStateUpsert {
	u.Add(orderstate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateUpsert) SetDeletedAt(v uint32) *OrderStateUpsert {
	u.Set(orderstate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateDeletedAt() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateUpsert) AddDeletedAt(v uint32) *OrderStateUpsert {
	u.Add(orderstate.FieldDeletedAt, v)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateUpsert) SetOrderID(v uuid.UUID) *OrderStateUpsert {
	u.Set(orderstate.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateOrderID() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldOrderID)
	return u
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateUpsert) SetOrderState(v string) *OrderStateUpsert {
	u.Set(orderstate.FieldOrderState, v)
	return u
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateOrderState() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldOrderState)
	return u
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateUpsert) ClearOrderState() *OrderStateUpsert {
	u.SetNull(orderstate.FieldOrderState)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OrderStateUpsert) SetEndAt(v uint32) *OrderStateUpsert {
	u.Set(orderstate.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateEndAt() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderStateUpsert) AddEndAt(v uint32) *OrderStateUpsert {
	u.Add(orderstate.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderStateUpsert) ClearEndAt() *OrderStateUpsert {
	u.SetNull(orderstate.FieldEndAt)
	return u
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateUpsert) SetLastBenefitAt(v uint32) *OrderStateUpsert {
	u.Set(orderstate.FieldLastBenefitAt, v)
	return u
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateLastBenefitAt() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldLastBenefitAt)
	return u
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateUpsert) AddLastBenefitAt(v uint32) *OrderStateUpsert {
	u.Add(orderstate.FieldLastBenefitAt, v)
	return u
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateUpsert) ClearLastBenefitAt() *OrderStateUpsert {
	u.SetNull(orderstate.FieldLastBenefitAt)
	return u
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateUpsert) SetBenefitState(v string) *OrderStateUpsert {
	u.Set(orderstate.FieldBenefitState, v)
	return u
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateBenefitState() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldBenefitState)
	return u
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateUpsert) ClearBenefitState() *OrderStateUpsert {
	u.SetNull(orderstate.FieldBenefitState)
	return u
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *OrderStateUpsert) SetUserSetPaid(v bool) *OrderStateUpsert {
	u.Set(orderstate.FieldUserSetPaid, v)
	return u
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateUserSetPaid() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldUserSetPaid)
	return u
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *OrderStateUpsert) ClearUserSetPaid() *OrderStateUpsert {
	u.SetNull(orderstate.FieldUserSetPaid)
	return u
}

// SetUserSetCancelled sets the "user_set_cancelled" field.
func (u *OrderStateUpsert) SetUserSetCancelled(v bool) *OrderStateUpsert {
	u.Set(orderstate.FieldUserSetCancelled, v)
	return u
}

// UpdateUserSetCancelled sets the "user_set_cancelled" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdateUserSetCancelled() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldUserSetCancelled)
	return u
}

// ClearUserSetCancelled clears the value of the "user_set_cancelled" field.
func (u *OrderStateUpsert) ClearUserSetCancelled() *OrderStateUpsert {
	u.SetNull(orderstate.FieldUserSetCancelled)
	return u
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderStateUpsert) SetPaymentTransactionID(v string) *OrderStateUpsert {
	u.Set(orderstate.FieldPaymentTransactionID, v)
	return u
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdatePaymentTransactionID() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldPaymentTransactionID)
	return u
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderStateUpsert) ClearPaymentTransactionID() *OrderStateUpsert {
	u.SetNull(orderstate.FieldPaymentTransactionID)
	return u
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderStateUpsert) SetPaymentFinishAmount(v decimal.Decimal) *OrderStateUpsert {
	u.Set(orderstate.FieldPaymentFinishAmount, v)
	return u
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdatePaymentFinishAmount() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldPaymentFinishAmount)
	return u
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderStateUpsert) ClearPaymentFinishAmount() *OrderStateUpsert {
	u.SetNull(orderstate.FieldPaymentFinishAmount)
	return u
}

// SetPaymentState sets the "payment_state" field.
func (u *OrderStateUpsert) SetPaymentState(v string) *OrderStateUpsert {
	u.Set(orderstate.FieldPaymentState, v)
	return u
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *OrderStateUpsert) UpdatePaymentState() *OrderStateUpsert {
	u.SetExcluded(orderstate.FieldPaymentState)
	return u
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *OrderStateUpsert) ClearPaymentState() *OrderStateUpsert {
	u.SetNull(orderstate.FieldPaymentState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderStateUpsertOne) UpdateNewValues() *OrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderState.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderStateUpsertOne) Ignore() *OrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStateUpsertOne) DoNothing() *OrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStateCreate.OnConflict
// documentation for more info.
func (u *OrderStateUpsertOne) Update(set func(*OrderStateUpsert)) *OrderStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateUpsertOne) SetCreatedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateUpsertOne) AddCreatedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateCreatedAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateUpsertOne) SetUpdatedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateUpsertOne) AddUpdatedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateUpdatedAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateUpsertOne) SetDeletedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateUpsertOne) AddDeletedAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateDeletedAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateUpsertOne) SetOrderID(v uuid.UUID) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateOrderID() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateUpsertOne) SetOrderState(v string) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetOrderState(v)
	})
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateOrderState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateOrderState()
	})
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateUpsertOne) ClearOrderState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearOrderState()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderStateUpsertOne) SetEndAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderStateUpsertOne) AddEndAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateEndAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderStateUpsertOne) ClearEndAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearEndAt()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateUpsertOne) SetLastBenefitAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateUpsertOne) AddLastBenefitAt(v uint32) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateLastBenefitAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateUpsertOne) ClearLastBenefitAt() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateUpsertOne) SetBenefitState(v string) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateBenefitState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateUpsertOne) ClearBenefitState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearBenefitState()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *OrderStateUpsertOne) SetUserSetPaid(v bool) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateUserSetPaid() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *OrderStateUpsertOne) ClearUserSetPaid() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCancelled sets the "user_set_cancelled" field.
func (u *OrderStateUpsertOne) SetUserSetCancelled(v bool) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUserSetCancelled(v)
	})
}

// UpdateUserSetCancelled sets the "user_set_cancelled" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdateUserSetCancelled() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUserSetCancelled()
	})
}

// ClearUserSetCancelled clears the value of the "user_set_cancelled" field.
func (u *OrderStateUpsertOne) ClearUserSetCancelled() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearUserSetCancelled()
	})
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderStateUpsertOne) SetPaymentTransactionID(v string) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentTransactionID(v)
	})
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdatePaymentTransactionID() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentTransactionID()
	})
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderStateUpsertOne) ClearPaymentTransactionID() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentTransactionID()
	})
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderStateUpsertOne) SetPaymentFinishAmount(v decimal.Decimal) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentFinishAmount(v)
	})
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdatePaymentFinishAmount() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentFinishAmount()
	})
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderStateUpsertOne) ClearPaymentFinishAmount() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentFinishAmount()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *OrderStateUpsertOne) SetPaymentState(v string) *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *OrderStateUpsertOne) UpdatePaymentState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *OrderStateUpsertOne) ClearPaymentState() *OrderStateUpsertOne {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// Exec executes the query.
func (u *OrderStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderStateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderStateUpsertOne.ID is not supported by MySQL driver. Use OrderStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderStateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderStateCreateBulk is the builder for creating many OrderState entities in bulk.
type OrderStateCreateBulk struct {
	config
	builders []*OrderStateCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderState entities in the database.
func (oscb *OrderStateCreateBulk) Save(ctx context.Context) ([]*OrderState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderState, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderStateCreateBulk) SaveX(ctx context.Context) []*OrderState {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderStateCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderStateCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oscb *OrderStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderStateUpsertBulk {
	oscb.conflict = opts
	return &OrderStateUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oscb *OrderStateCreateBulk) OnConflictColumns(columns ...string) *OrderStateUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OrderStateUpsertBulk{
		create: oscb,
	}
}

// OrderStateUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderState nodes.
type OrderStateUpsertBulk struct {
	create *OrderStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderStateUpsertBulk) UpdateNewValues() *OrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderstate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderStateUpsertBulk) Ignore() *OrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStateUpsertBulk) DoNothing() *OrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStateCreateBulk.OnConflict
// documentation for more info.
func (u *OrderStateUpsertBulk) Update(set func(*OrderStateUpsert)) *OrderStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateUpsertBulk) SetCreatedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateUpsertBulk) AddCreatedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateCreatedAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateUpsertBulk) SetUpdatedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateUpsertBulk) AddUpdatedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateUpdatedAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateUpsertBulk) SetDeletedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateUpsertBulk) AddDeletedAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateDeletedAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateUpsertBulk) SetOrderID(v uuid.UUID) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateOrderID() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateOrderID()
	})
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateUpsertBulk) SetOrderState(v string) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetOrderState(v)
	})
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateOrderState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateOrderState()
	})
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateUpsertBulk) ClearOrderState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearOrderState()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderStateUpsertBulk) SetEndAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderStateUpsertBulk) AddEndAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateEndAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderStateUpsertBulk) ClearEndAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearEndAt()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateUpsertBulk) SetLastBenefitAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateUpsertBulk) AddLastBenefitAt(v uint32) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateLastBenefitAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateUpsertBulk) ClearLastBenefitAt() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateUpsertBulk) SetBenefitState(v string) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateBenefitState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateUpsertBulk) ClearBenefitState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearBenefitState()
	})
}

// SetUserSetPaid sets the "user_set_paid" field.
func (u *OrderStateUpsertBulk) SetUserSetPaid(v bool) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUserSetPaid(v)
	})
}

// UpdateUserSetPaid sets the "user_set_paid" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateUserSetPaid() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUserSetPaid()
	})
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (u *OrderStateUpsertBulk) ClearUserSetPaid() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearUserSetPaid()
	})
}

// SetUserSetCancelled sets the "user_set_cancelled" field.
func (u *OrderStateUpsertBulk) SetUserSetCancelled(v bool) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetUserSetCancelled(v)
	})
}

// UpdateUserSetCancelled sets the "user_set_cancelled" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdateUserSetCancelled() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdateUserSetCancelled()
	})
}

// ClearUserSetCancelled clears the value of the "user_set_cancelled" field.
func (u *OrderStateUpsertBulk) ClearUserSetCancelled() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearUserSetCancelled()
	})
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderStateUpsertBulk) SetPaymentTransactionID(v string) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentTransactionID(v)
	})
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdatePaymentTransactionID() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentTransactionID()
	})
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderStateUpsertBulk) ClearPaymentTransactionID() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentTransactionID()
	})
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderStateUpsertBulk) SetPaymentFinishAmount(v decimal.Decimal) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentFinishAmount(v)
	})
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdatePaymentFinishAmount() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentFinishAmount()
	})
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderStateUpsertBulk) ClearPaymentFinishAmount() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentFinishAmount()
	})
}

// SetPaymentState sets the "payment_state" field.
func (u *OrderStateUpsertBulk) SetPaymentState(v string) *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.SetPaymentState(v)
	})
}

// UpdatePaymentState sets the "payment_state" field to the value that was provided on create.
func (u *OrderStateUpsertBulk) UpdatePaymentState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.UpdatePaymentState()
	})
}

// ClearPaymentState clears the value of the "payment_state" field.
func (u *OrderStateUpsertBulk) ClearPaymentState() *OrderStateUpsertBulk {
	return u.Update(func(s *OrderStateUpsert) {
		s.ClearPaymentState()
	})
}

// Exec executes the query.
func (u *OrderStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
