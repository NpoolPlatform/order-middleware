// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(u uint32) *OrderCreate {
	oc.mutation.SetCreatedAt(u)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetCreatedAt(*u)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(u uint32) *OrderCreate {
	oc.mutation.SetUpdatedAt(u)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetUpdatedAt(*u)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrderCreate) SetDeletedAt(u uint32) *OrderCreate {
	oc.mutation.SetDeletedAt(u)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeletedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetDeletedAt(*u)
	}
	return oc
}

// SetGoodID sets the "good_id" field.
func (oc *OrderCreate) SetGoodID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetGoodID(u)
	return oc
}

// SetAppID sets the "app_id" field.
func (oc *OrderCreate) SetAppID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetAppID(u)
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetUserID(u)
	return oc
}

// SetParentOrderID sets the "parent_order_id" field.
func (oc *OrderCreate) SetParentOrderID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetParentOrderID(u)
	return oc
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableParentOrderID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetParentOrderID(*u)
	}
	return oc
}

// SetPayWithParent sets the "pay_with_parent" field.
func (oc *OrderCreate) SetPayWithParent(b bool) *OrderCreate {
	oc.mutation.SetPayWithParent(b)
	return oc
}

// SetNillablePayWithParent sets the "pay_with_parent" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePayWithParent(b *bool) *OrderCreate {
	if b != nil {
		oc.SetPayWithParent(*b)
	}
	return oc
}

// SetUnits sets the "units" field.
func (oc *OrderCreate) SetUnits(u uint32) *OrderCreate {
	oc.mutation.SetUnits(u)
	return oc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUnits(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetUnits(*u)
	}
	return oc
}

// SetUnitsV1 sets the "units_v1" field.
func (oc *OrderCreate) SetUnitsV1(d decimal.Decimal) *OrderCreate {
	oc.mutation.SetUnitsV1(d)
	return oc
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUnitsV1(d *decimal.Decimal) *OrderCreate {
	if d != nil {
		oc.SetUnitsV1(*d)
	}
	return oc
}

// SetPromotionID sets the "promotion_id" field.
func (oc *OrderCreate) SetPromotionID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetPromotionID(u)
	return oc
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePromotionID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetPromotionID(*u)
	}
	return oc
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (oc *OrderCreate) SetDiscountCouponID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetDiscountCouponID(u)
	return oc
}

// SetNillableDiscountCouponID sets the "discount_coupon_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDiscountCouponID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetDiscountCouponID(*u)
	}
	return oc
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (oc *OrderCreate) SetUserSpecialReductionID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetUserSpecialReductionID(u)
	return oc
}

// SetNillableUserSpecialReductionID sets the "user_special_reduction_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUserSpecialReductionID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetUserSpecialReductionID(*u)
	}
	return oc
}

// SetStartAt sets the "start_at" field.
func (oc *OrderCreate) SetStartAt(u uint32) *OrderCreate {
	oc.mutation.SetStartAt(u)
	return oc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStartAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetStartAt(*u)
	}
	return oc
}

// SetEndAt sets the "end_at" field.
func (oc *OrderCreate) SetEndAt(u uint32) *OrderCreate {
	oc.mutation.SetEndAt(u)
	return oc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableEndAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetEndAt(*u)
	}
	return oc
}

// SetFixAmountCouponID sets the "fix_amount_coupon_id" field.
func (oc *OrderCreate) SetFixAmountCouponID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetFixAmountCouponID(u)
	return oc
}

// SetNillableFixAmountCouponID sets the "fix_amount_coupon_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableFixAmountCouponID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetFixAmountCouponID(*u)
	}
	return oc
}

// SetType sets the "type" field.
func (oc *OrderCreate) SetType(s string) *OrderCreate {
	oc.mutation.SetType(s)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableType(s *string) *OrderCreate {
	if s != nil {
		oc.SetType(*s)
	}
	return oc
}

// SetState sets the "state" field.
func (oc *OrderCreate) SetState(s string) *OrderCreate {
	oc.mutation.SetState(s)
	return oc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oc *OrderCreate) SetNillableState(s *string) *OrderCreate {
	if s != nil {
		oc.SetState(*s)
	}
	return oc
}

// SetStateV1 sets the "state_v1" field.
func (oc *OrderCreate) SetStateV1(s string) *OrderCreate {
	oc.mutation.SetStateV1(s)
	return oc
}

// SetNillableStateV1 sets the "state_v1" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStateV1(s *string) *OrderCreate {
	if s != nil {
		oc.SetStateV1(*s)
	}
	return oc
}

// SetInvestmentType sets the "investment_type" field.
func (oc *OrderCreate) SetInvestmentType(s string) *OrderCreate {
	oc.mutation.SetInvestmentType(s)
	return oc
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableInvestmentType(s *string) *OrderCreate {
	if s != nil {
		oc.SetInvestmentType(*s)
	}
	return oc
}

// SetCouponIds sets the "coupon_ids" field.
func (oc *OrderCreate) SetCouponIds(u []uuid.UUID) *OrderCreate {
	oc.mutation.SetCouponIds(u)
	return oc
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (oc *OrderCreate) SetLastBenefitAt(u uint32) *OrderCreate {
	oc.mutation.SetLastBenefitAt(u)
	return oc
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableLastBenefitAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetLastBenefitAt(*u)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if order.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		if order.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.DeletedAt(); !ok {
		if order.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultDeletedAt()
		oc.mutation.SetDeletedAt(v)
	}
	if _, ok := oc.mutation.ParentOrderID(); !ok {
		if order.DefaultParentOrderID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultParentOrderID (forgotten import ent/runtime?)")
		}
		v := order.DefaultParentOrderID()
		oc.mutation.SetParentOrderID(v)
	}
	if _, ok := oc.mutation.PayWithParent(); !ok {
		v := order.DefaultPayWithParent
		oc.mutation.SetPayWithParent(v)
	}
	if _, ok := oc.mutation.Units(); !ok {
		v := order.DefaultUnits
		oc.mutation.SetUnits(v)
	}
	if _, ok := oc.mutation.UnitsV1(); !ok {
		v := order.DefaultUnitsV1
		oc.mutation.SetUnitsV1(v)
	}
	if _, ok := oc.mutation.PromotionID(); !ok {
		if order.DefaultPromotionID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultPromotionID (forgotten import ent/runtime?)")
		}
		v := order.DefaultPromotionID()
		oc.mutation.SetPromotionID(v)
	}
	if _, ok := oc.mutation.DiscountCouponID(); !ok {
		if order.DefaultDiscountCouponID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultDiscountCouponID (forgotten import ent/runtime?)")
		}
		v := order.DefaultDiscountCouponID()
		oc.mutation.SetDiscountCouponID(v)
	}
	if _, ok := oc.mutation.UserSpecialReductionID(); !ok {
		if order.DefaultUserSpecialReductionID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultUserSpecialReductionID (forgotten import ent/runtime?)")
		}
		v := order.DefaultUserSpecialReductionID()
		oc.mutation.SetUserSpecialReductionID(v)
	}
	if _, ok := oc.mutation.StartAt(); !ok {
		v := order.DefaultStartAt
		oc.mutation.SetStartAt(v)
	}
	if _, ok := oc.mutation.EndAt(); !ok {
		v := order.DefaultEndAt
		oc.mutation.SetEndAt(v)
	}
	if _, ok := oc.mutation.FixAmountCouponID(); !ok {
		if order.DefaultFixAmountCouponID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultFixAmountCouponID (forgotten import ent/runtime?)")
		}
		v := order.DefaultFixAmountCouponID()
		oc.mutation.SetFixAmountCouponID(v)
	}
	if _, ok := oc.mutation.GetType(); !ok {
		v := order.DefaultType
		oc.mutation.SetType(v)
	}
	if _, ok := oc.mutation.State(); !ok {
		v := order.DefaultState
		oc.mutation.SetState(v)
	}
	if _, ok := oc.mutation.StateV1(); !ok {
		v := order.DefaultStateV1
		oc.mutation.SetStateV1(v)
	}
	if _, ok := oc.mutation.InvestmentType(); !ok {
		v := order.DefaultInvestmentType
		oc.mutation.SetInvestmentType(v)
	}
	if _, ok := oc.mutation.CouponIds(); !ok {
		if order.DefaultCouponIds == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCouponIds (forgotten import ent/runtime?)")
		}
		v := order.DefaultCouponIds()
		oc.mutation.SetCouponIds(v)
	}
	if _, ok := oc.mutation.LastBenefitAt(); !ok {
		v := order.DefaultLastBenefitAt
		oc.mutation.SetLastBenefitAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		if order.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultID (forgotten import ent/runtime?)")
		}
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Order.deleted_at"`)}
	}
	if _, ok := oc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "Order.good_id"`)}
	}
	if _, ok := oc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Order.app_id"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Order.user_id"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: order.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := oc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := oc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := oc.mutation.ParentOrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldParentOrderID,
		})
		_node.ParentOrderID = value
	}
	if value, ok := oc.mutation.PayWithParent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: order.FieldPayWithParent,
		})
		_node.PayWithParent = value
	}
	if value, ok := oc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := oc.mutation.UnitsV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: order.FieldUnitsV1,
		})
		_node.UnitsV1 = value
	}
	if value, ok := oc.mutation.PromotionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldPromotionID,
		})
		_node.PromotionID = value
	}
	if value, ok := oc.mutation.DiscountCouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldDiscountCouponID,
		})
		_node.DiscountCouponID = value
	}
	if value, ok := oc.mutation.UserSpecialReductionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldUserSpecialReductionID,
		})
		_node.UserSpecialReductionID = value
	}
	if value, ok := oc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := oc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := oc.mutation.FixAmountCouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldFixAmountCouponID,
		})
		_node.FixAmountCouponID = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldType,
		})
		_node.Type = value
	}
	if value, ok := oc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldState,
		})
		_node.State = value
	}
	if value, ok := oc.mutation.StateV1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStateV1,
		})
		_node.StateV1 = value
	}
	if value, ok := oc.mutation.InvestmentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldInvestmentType,
		})
		_node.InvestmentType = value
	}
	if value, ok := oc.mutation.CouponIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldCouponIds,
		})
		_node.CouponIds = value
	}
	if value, ok := oc.mutation.LastBenefitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldLastBenefitAt,
		})
		_node.LastBenefitAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsert) SetCreatedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsert) AddCreatedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsert) AddUpdatedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsert) SetDeletedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDeletedAt() *OrderUpsert {
	u.SetExcluded(order.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsert) AddDeletedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *OrderUpsert) SetGoodID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateGoodID() *OrderUpsert {
	u.SetExcluded(order.FieldGoodID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrderUpsert) SetAppID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateAppID() *OrderUpsert {
	u.SetExcluded(order.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsert) SetUserID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUserID() *OrderUpsert {
	u.SetExcluded(order.FieldUserID)
	return u
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderUpsert) SetParentOrderID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldParentOrderID, v)
	return u
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateParentOrderID() *OrderUpsert {
	u.SetExcluded(order.FieldParentOrderID)
	return u
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderUpsert) ClearParentOrderID() *OrderUpsert {
	u.SetNull(order.FieldParentOrderID)
	return u
}

// SetPayWithParent sets the "pay_with_parent" field.
func (u *OrderUpsert) SetPayWithParent(v bool) *OrderUpsert {
	u.Set(order.FieldPayWithParent, v)
	return u
}

// UpdatePayWithParent sets the "pay_with_parent" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePayWithParent() *OrderUpsert {
	u.SetExcluded(order.FieldPayWithParent)
	return u
}

// ClearPayWithParent clears the value of the "pay_with_parent" field.
func (u *OrderUpsert) ClearPayWithParent() *OrderUpsert {
	u.SetNull(order.FieldPayWithParent)
	return u
}

// SetUnits sets the "units" field.
func (u *OrderUpsert) SetUnits(v uint32) *OrderUpsert {
	u.Set(order.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUnits() *OrderUpsert {
	u.SetExcluded(order.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *OrderUpsert) AddUnits(v uint32) *OrderUpsert {
	u.Add(order.FieldUnits, v)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *OrderUpsert) ClearUnits() *OrderUpsert {
	u.SetNull(order.FieldUnits)
	return u
}

// SetUnitsV1 sets the "units_v1" field.
func (u *OrderUpsert) SetUnitsV1(v decimal.Decimal) *OrderUpsert {
	u.Set(order.FieldUnitsV1, v)
	return u
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUnitsV1() *OrderUpsert {
	u.SetExcluded(order.FieldUnitsV1)
	return u
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *OrderUpsert) ClearUnitsV1() *OrderUpsert {
	u.SetNull(order.FieldUnitsV1)
	return u
}

// SetPromotionID sets the "promotion_id" field.
func (u *OrderUpsert) SetPromotionID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldPromotionID, v)
	return u
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePromotionID() *OrderUpsert {
	u.SetExcluded(order.FieldPromotionID)
	return u
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *OrderUpsert) ClearPromotionID() *OrderUpsert {
	u.SetNull(order.FieldPromotionID)
	return u
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (u *OrderUpsert) SetDiscountCouponID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldDiscountCouponID, v)
	return u
}

// UpdateDiscountCouponID sets the "discount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDiscountCouponID() *OrderUpsert {
	u.SetExcluded(order.FieldDiscountCouponID)
	return u
}

// ClearDiscountCouponID clears the value of the "discount_coupon_id" field.
func (u *OrderUpsert) ClearDiscountCouponID() *OrderUpsert {
	u.SetNull(order.FieldDiscountCouponID)
	return u
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (u *OrderUpsert) SetUserSpecialReductionID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldUserSpecialReductionID, v)
	return u
}

// UpdateUserSpecialReductionID sets the "user_special_reduction_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUserSpecialReductionID() *OrderUpsert {
	u.SetExcluded(order.FieldUserSpecialReductionID)
	return u
}

// ClearUserSpecialReductionID clears the value of the "user_special_reduction_id" field.
func (u *OrderUpsert) ClearUserSpecialReductionID() *OrderUpsert {
	u.SetNull(order.FieldUserSpecialReductionID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OrderUpsert) SetStartAt(v uint32) *OrderUpsert {
	u.Set(order.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStartAt() *OrderUpsert {
	u.SetExcluded(order.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderUpsert) AddStartAt(v uint32) *OrderUpsert {
	u.Add(order.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderUpsert) ClearStartAt() *OrderUpsert {
	u.SetNull(order.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OrderUpsert) SetEndAt(v uint32) *OrderUpsert {
	u.Set(order.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateEndAt() *OrderUpsert {
	u.SetExcluded(order.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderUpsert) AddEndAt(v uint32) *OrderUpsert {
	u.Add(order.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderUpsert) ClearEndAt() *OrderUpsert {
	u.SetNull(order.FieldEndAt)
	return u
}

// SetFixAmountCouponID sets the "fix_amount_coupon_id" field.
func (u *OrderUpsert) SetFixAmountCouponID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldFixAmountCouponID, v)
	return u
}

// UpdateFixAmountCouponID sets the "fix_amount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateFixAmountCouponID() *OrderUpsert {
	u.SetExcluded(order.FieldFixAmountCouponID)
	return u
}

// ClearFixAmountCouponID clears the value of the "fix_amount_coupon_id" field.
func (u *OrderUpsert) ClearFixAmountCouponID() *OrderUpsert {
	u.SetNull(order.FieldFixAmountCouponID)
	return u
}

// SetType sets the "type" field.
func (u *OrderUpsert) SetType(v string) *OrderUpsert {
	u.Set(order.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsert) UpdateType() *OrderUpsert {
	u.SetExcluded(order.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *OrderUpsert) ClearType() *OrderUpsert {
	u.SetNull(order.FieldType)
	return u
}

// SetState sets the "state" field.
func (u *OrderUpsert) SetState(v string) *OrderUpsert {
	u.Set(order.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OrderUpsert) UpdateState() *OrderUpsert {
	u.SetExcluded(order.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *OrderUpsert) ClearState() *OrderUpsert {
	u.SetNull(order.FieldState)
	return u
}

// SetStateV1 sets the "state_v1" field.
func (u *OrderUpsert) SetStateV1(v string) *OrderUpsert {
	u.Set(order.FieldStateV1, v)
	return u
}

// UpdateStateV1 sets the "state_v1" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStateV1() *OrderUpsert {
	u.SetExcluded(order.FieldStateV1)
	return u
}

// ClearStateV1 clears the value of the "state_v1" field.
func (u *OrderUpsert) ClearStateV1() *OrderUpsert {
	u.SetNull(order.FieldStateV1)
	return u
}

// SetInvestmentType sets the "investment_type" field.
func (u *OrderUpsert) SetInvestmentType(v string) *OrderUpsert {
	u.Set(order.FieldInvestmentType, v)
	return u
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *OrderUpsert) UpdateInvestmentType() *OrderUpsert {
	u.SetExcluded(order.FieldInvestmentType)
	return u
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *OrderUpsert) ClearInvestmentType() *OrderUpsert {
	u.SetNull(order.FieldInvestmentType)
	return u
}

// SetCouponIds sets the "coupon_ids" field.
func (u *OrderUpsert) SetCouponIds(v []uuid.UUID) *OrderUpsert {
	u.Set(order.FieldCouponIds, v)
	return u
}

// UpdateCouponIds sets the "coupon_ids" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCouponIds() *OrderUpsert {
	u.SetExcluded(order.FieldCouponIds)
	return u
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (u *OrderUpsert) ClearCouponIds() *OrderUpsert {
	u.SetNull(order.FieldCouponIds)
	return u
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderUpsert) SetLastBenefitAt(v uint32) *OrderUpsert {
	u.Set(order.FieldLastBenefitAt, v)
	return u
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateLastBenefitAt() *OrderUpsert {
	u.SetExcluded(order.FieldLastBenefitAt)
	return u
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderUpsert) AddLastBenefitAt(v uint32) *OrderUpsert {
	u.Add(order.FieldLastBenefitAt, v)
	return u
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderUpsert) ClearLastBenefitAt() *OrderUpsert {
	u.SetNull(order.FieldLastBenefitAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Order.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertOne) SetCreatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsertOne) AddCreatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsertOne) AddUpdatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertOne) SetDeletedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsertOne) AddDeletedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDeletedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderUpsertOne) SetGoodID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateGoodID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderUpsertOne) SetAppID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateAppID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertOne) SetUserID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUserID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderUpsertOne) SetParentOrderID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetParentOrderID(v)
	})
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateParentOrderID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateParentOrderID()
	})
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderUpsertOne) ClearParentOrderID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearParentOrderID()
	})
}

// SetPayWithParent sets the "pay_with_parent" field.
func (u *OrderUpsertOne) SetPayWithParent(v bool) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPayWithParent(v)
	})
}

// UpdatePayWithParent sets the "pay_with_parent" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePayWithParent() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePayWithParent()
	})
}

// ClearPayWithParent clears the value of the "pay_with_parent" field.
func (u *OrderUpsertOne) ClearPayWithParent() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPayWithParent()
	})
}

// SetUnits sets the "units" field.
func (u *OrderUpsertOne) SetUnits(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *OrderUpsertOne) AddUnits(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUnits() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *OrderUpsertOne) ClearUnits() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *OrderUpsertOne) SetUnitsV1(v decimal.Decimal) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUnitsV1() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *OrderUpsertOne) ClearUnitsV1() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUnitsV1()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *OrderUpsertOne) SetPromotionID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePromotionID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *OrderUpsertOne) ClearPromotionID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (u *OrderUpsertOne) SetDiscountCouponID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDiscountCouponID(v)
	})
}

// UpdateDiscountCouponID sets the "discount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDiscountCouponID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDiscountCouponID()
	})
}

// ClearDiscountCouponID clears the value of the "discount_coupon_id" field.
func (u *OrderUpsertOne) ClearDiscountCouponID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDiscountCouponID()
	})
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (u *OrderUpsertOne) SetUserSpecialReductionID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserSpecialReductionID(v)
	})
}

// UpdateUserSpecialReductionID sets the "user_special_reduction_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUserSpecialReductionID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserSpecialReductionID()
	})
}

// ClearUserSpecialReductionID clears the value of the "user_special_reduction_id" field.
func (u *OrderUpsertOne) ClearUserSpecialReductionID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUserSpecialReductionID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderUpsertOne) SetStartAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderUpsertOne) AddStartAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStartAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderUpsertOne) ClearStartAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderUpsertOne) SetEndAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderUpsertOne) AddEndAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateEndAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderUpsertOne) ClearEndAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearEndAt()
	})
}

// SetFixAmountCouponID sets the "fix_amount_coupon_id" field.
func (u *OrderUpsertOne) SetFixAmountCouponID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetFixAmountCouponID(v)
	})
}

// UpdateFixAmountCouponID sets the "fix_amount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateFixAmountCouponID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateFixAmountCouponID()
	})
}

// ClearFixAmountCouponID clears the value of the "fix_amount_coupon_id" field.
func (u *OrderUpsertOne) ClearFixAmountCouponID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearFixAmountCouponID()
	})
}

// SetType sets the "type" field.
func (u *OrderUpsertOne) SetType(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *OrderUpsertOne) ClearType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearType()
	})
}

// SetState sets the "state" field.
func (u *OrderUpsertOne) SetState(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateState() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *OrderUpsertOne) ClearState() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearState()
	})
}

// SetStateV1 sets the "state_v1" field.
func (u *OrderUpsertOne) SetStateV1(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStateV1(v)
	})
}

// UpdateStateV1 sets the "state_v1" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStateV1() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStateV1()
	})
}

// ClearStateV1 clears the value of the "state_v1" field.
func (u *OrderUpsertOne) ClearStateV1() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStateV1()
	})
}

// SetInvestmentType sets the "investment_type" field.
func (u *OrderUpsertOne) SetInvestmentType(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetInvestmentType(v)
	})
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateInvestmentType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateInvestmentType()
	})
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *OrderUpsertOne) ClearInvestmentType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearInvestmentType()
	})
}

// SetCouponIds sets the "coupon_ids" field.
func (u *OrderUpsertOne) SetCouponIds(v []uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCouponIds(v)
	})
}

// UpdateCouponIds sets the "coupon_ids" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCouponIds() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCouponIds()
	})
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (u *OrderUpsertOne) ClearCouponIds() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCouponIds()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderUpsertOne) SetLastBenefitAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderUpsertOne) AddLastBenefitAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateLastBenefitAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderUpsertOne) ClearLastBenefitAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearLastBenefitAt()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderUpsertOne.ID is not supported by MySQL driver. Use OrderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertBulk) SetCreatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsertBulk) AddCreatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsertBulk) AddUpdatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertBulk) SetDeletedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsertBulk) AddDeletedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDeletedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderUpsertBulk) SetGoodID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateGoodID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderUpsertBulk) SetAppID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateAppID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertBulk) SetUserID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUserID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetParentOrderID sets the "parent_order_id" field.
func (u *OrderUpsertBulk) SetParentOrderID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetParentOrderID(v)
	})
}

// UpdateParentOrderID sets the "parent_order_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateParentOrderID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateParentOrderID()
	})
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (u *OrderUpsertBulk) ClearParentOrderID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearParentOrderID()
	})
}

// SetPayWithParent sets the "pay_with_parent" field.
func (u *OrderUpsertBulk) SetPayWithParent(v bool) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPayWithParent(v)
	})
}

// UpdatePayWithParent sets the "pay_with_parent" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePayWithParent() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePayWithParent()
	})
}

// ClearPayWithParent clears the value of the "pay_with_parent" field.
func (u *OrderUpsertBulk) ClearPayWithParent() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPayWithParent()
	})
}

// SetUnits sets the "units" field.
func (u *OrderUpsertBulk) SetUnits(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *OrderUpsertBulk) AddUnits(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUnits() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *OrderUpsertBulk) ClearUnits() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUnits()
	})
}

// SetUnitsV1 sets the "units_v1" field.
func (u *OrderUpsertBulk) SetUnitsV1(v decimal.Decimal) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnitsV1(v)
	})
}

// UpdateUnitsV1 sets the "units_v1" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUnitsV1() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnitsV1()
	})
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (u *OrderUpsertBulk) ClearUnitsV1() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUnitsV1()
	})
}

// SetPromotionID sets the "promotion_id" field.
func (u *OrderUpsertBulk) SetPromotionID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPromotionID(v)
	})
}

// UpdatePromotionID sets the "promotion_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePromotionID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePromotionID()
	})
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (u *OrderUpsertBulk) ClearPromotionID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPromotionID()
	})
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (u *OrderUpsertBulk) SetDiscountCouponID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDiscountCouponID(v)
	})
}

// UpdateDiscountCouponID sets the "discount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDiscountCouponID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDiscountCouponID()
	})
}

// ClearDiscountCouponID clears the value of the "discount_coupon_id" field.
func (u *OrderUpsertBulk) ClearDiscountCouponID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDiscountCouponID()
	})
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (u *OrderUpsertBulk) SetUserSpecialReductionID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserSpecialReductionID(v)
	})
}

// UpdateUserSpecialReductionID sets the "user_special_reduction_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUserSpecialReductionID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserSpecialReductionID()
	})
}

// ClearUserSpecialReductionID clears the value of the "user_special_reduction_id" field.
func (u *OrderUpsertBulk) ClearUserSpecialReductionID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUserSpecialReductionID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderUpsertBulk) SetStartAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderUpsertBulk) AddStartAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStartAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderUpsertBulk) ClearStartAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderUpsertBulk) SetEndAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderUpsertBulk) AddEndAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateEndAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderUpsertBulk) ClearEndAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearEndAt()
	})
}

// SetFixAmountCouponID sets the "fix_amount_coupon_id" field.
func (u *OrderUpsertBulk) SetFixAmountCouponID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetFixAmountCouponID(v)
	})
}

// UpdateFixAmountCouponID sets the "fix_amount_coupon_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateFixAmountCouponID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateFixAmountCouponID()
	})
}

// ClearFixAmountCouponID clears the value of the "fix_amount_coupon_id" field.
func (u *OrderUpsertBulk) ClearFixAmountCouponID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearFixAmountCouponID()
	})
}

// SetType sets the "type" field.
func (u *OrderUpsertBulk) SetType(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *OrderUpsertBulk) ClearType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearType()
	})
}

// SetState sets the "state" field.
func (u *OrderUpsertBulk) SetState(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateState() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *OrderUpsertBulk) ClearState() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearState()
	})
}

// SetStateV1 sets the "state_v1" field.
func (u *OrderUpsertBulk) SetStateV1(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStateV1(v)
	})
}

// UpdateStateV1 sets the "state_v1" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStateV1() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStateV1()
	})
}

// ClearStateV1 clears the value of the "state_v1" field.
func (u *OrderUpsertBulk) ClearStateV1() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStateV1()
	})
}

// SetInvestmentType sets the "investment_type" field.
func (u *OrderUpsertBulk) SetInvestmentType(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetInvestmentType(v)
	})
}

// UpdateInvestmentType sets the "investment_type" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateInvestmentType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateInvestmentType()
	})
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (u *OrderUpsertBulk) ClearInvestmentType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearInvestmentType()
	})
}

// SetCouponIds sets the "coupon_ids" field.
func (u *OrderUpsertBulk) SetCouponIds(v []uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCouponIds(v)
	})
}

// UpdateCouponIds sets the "coupon_ids" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCouponIds() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCouponIds()
	})
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (u *OrderUpsertBulk) ClearCouponIds() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCouponIds()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderUpsertBulk) SetLastBenefitAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderUpsertBulk) AddLastBenefitAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateLastBenefitAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderUpsertBulk) ClearLastBenefitAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearLastBenefitAt()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
