// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrentalstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// PowerRentalStateUpdate is the builder for updating PowerRentalState entities.
type PowerRentalStateUpdate struct {
	config
	hooks     []Hook
	mutation  *PowerRentalStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PowerRentalStateUpdate builder.
func (prsu *PowerRentalStateUpdate) Where(ps ...predicate.PowerRentalState) *PowerRentalStateUpdate {
	prsu.mutation.Where(ps...)
	return prsu
}

// SetCreatedAt sets the "created_at" field.
func (prsu *PowerRentalStateUpdate) SetCreatedAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetCreatedAt()
	prsu.mutation.SetCreatedAt(u)
	return prsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableCreatedAt(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetCreatedAt(*u)
	}
	return prsu
}

// AddCreatedAt adds u to the "created_at" field.
func (prsu *PowerRentalStateUpdate) AddCreatedAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddCreatedAt(u)
	return prsu
}

// SetUpdatedAt sets the "updated_at" field.
func (prsu *PowerRentalStateUpdate) SetUpdatedAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetUpdatedAt()
	prsu.mutation.SetUpdatedAt(u)
	return prsu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (prsu *PowerRentalStateUpdate) AddUpdatedAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddUpdatedAt(u)
	return prsu
}

// SetDeletedAt sets the "deleted_at" field.
func (prsu *PowerRentalStateUpdate) SetDeletedAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetDeletedAt()
	prsu.mutation.SetDeletedAt(u)
	return prsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableDeletedAt(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetDeletedAt(*u)
	}
	return prsu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (prsu *PowerRentalStateUpdate) AddDeletedAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddDeletedAt(u)
	return prsu
}

// SetEntID sets the "ent_id" field.
func (prsu *PowerRentalStateUpdate) SetEntID(u uuid.UUID) *PowerRentalStateUpdate {
	prsu.mutation.SetEntID(u)
	return prsu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableEntID(u *uuid.UUID) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetEntID(*u)
	}
	return prsu
}

// SetOrderID sets the "order_id" field.
func (prsu *PowerRentalStateUpdate) SetOrderID(u uuid.UUID) *PowerRentalStateUpdate {
	prsu.mutation.SetOrderID(u)
	return prsu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableOrderID(u *uuid.UUID) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetOrderID(*u)
	}
	return prsu
}

// ClearOrderID clears the value of the "order_id" field.
func (prsu *PowerRentalStateUpdate) ClearOrderID() *PowerRentalStateUpdate {
	prsu.mutation.ClearOrderID()
	return prsu
}

// SetCancelState sets the "cancel_state" field.
func (prsu *PowerRentalStateUpdate) SetCancelState(s string) *PowerRentalStateUpdate {
	prsu.mutation.SetCancelState(s)
	return prsu
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableCancelState(s *string) *PowerRentalStateUpdate {
	if s != nil {
		prsu.SetCancelState(*s)
	}
	return prsu
}

// ClearCancelState clears the value of the "cancel_state" field.
func (prsu *PowerRentalStateUpdate) ClearCancelState() *PowerRentalStateUpdate {
	prsu.mutation.ClearCancelState()
	return prsu
}

// SetCanceledAt sets the "canceled_at" field.
func (prsu *PowerRentalStateUpdate) SetCanceledAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetCanceledAt()
	prsu.mutation.SetCanceledAt(u)
	return prsu
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableCanceledAt(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetCanceledAt(*u)
	}
	return prsu
}

// AddCanceledAt adds u to the "canceled_at" field.
func (prsu *PowerRentalStateUpdate) AddCanceledAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddCanceledAt(u)
	return prsu
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (prsu *PowerRentalStateUpdate) ClearCanceledAt() *PowerRentalStateUpdate {
	prsu.mutation.ClearCanceledAt()
	return prsu
}

// SetPaymentID sets the "payment_id" field.
func (prsu *PowerRentalStateUpdate) SetPaymentID(u uuid.UUID) *PowerRentalStateUpdate {
	prsu.mutation.SetPaymentID(u)
	return prsu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillablePaymentID(u *uuid.UUID) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetPaymentID(*u)
	}
	return prsu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (prsu *PowerRentalStateUpdate) ClearPaymentID() *PowerRentalStateUpdate {
	prsu.mutation.ClearPaymentID()
	return prsu
}

// SetPaidAt sets the "paid_at" field.
func (prsu *PowerRentalStateUpdate) SetPaidAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetPaidAt()
	prsu.mutation.SetPaidAt(u)
	return prsu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillablePaidAt(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetPaidAt(*u)
	}
	return prsu
}

// AddPaidAt adds u to the "paid_at" field.
func (prsu *PowerRentalStateUpdate) AddPaidAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddPaidAt(u)
	return prsu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (prsu *PowerRentalStateUpdate) ClearPaidAt() *PowerRentalStateUpdate {
	prsu.mutation.ClearPaidAt()
	return prsu
}

// SetUserSetPaid sets the "user_set_paid" field.
func (prsu *PowerRentalStateUpdate) SetUserSetPaid(b bool) *PowerRentalStateUpdate {
	prsu.mutation.SetUserSetPaid(b)
	return prsu
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableUserSetPaid(b *bool) *PowerRentalStateUpdate {
	if b != nil {
		prsu.SetUserSetPaid(*b)
	}
	return prsu
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (prsu *PowerRentalStateUpdate) ClearUserSetPaid() *PowerRentalStateUpdate {
	prsu.mutation.ClearUserSetPaid()
	return prsu
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (prsu *PowerRentalStateUpdate) SetUserSetCanceled(b bool) *PowerRentalStateUpdate {
	prsu.mutation.SetUserSetCanceled(b)
	return prsu
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableUserSetCanceled(b *bool) *PowerRentalStateUpdate {
	if b != nil {
		prsu.SetUserSetCanceled(*b)
	}
	return prsu
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (prsu *PowerRentalStateUpdate) ClearUserSetCanceled() *PowerRentalStateUpdate {
	prsu.mutation.ClearUserSetCanceled()
	return prsu
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (prsu *PowerRentalStateUpdate) SetAdminSetCanceled(b bool) *PowerRentalStateUpdate {
	prsu.mutation.SetAdminSetCanceled(b)
	return prsu
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableAdminSetCanceled(b *bool) *PowerRentalStateUpdate {
	if b != nil {
		prsu.SetAdminSetCanceled(*b)
	}
	return prsu
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (prsu *PowerRentalStateUpdate) ClearAdminSetCanceled() *PowerRentalStateUpdate {
	prsu.mutation.ClearAdminSetCanceled()
	return prsu
}

// SetPaymentState sets the "payment_state" field.
func (prsu *PowerRentalStateUpdate) SetPaymentState(s string) *PowerRentalStateUpdate {
	prsu.mutation.SetPaymentState(s)
	return prsu
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillablePaymentState(s *string) *PowerRentalStateUpdate {
	if s != nil {
		prsu.SetPaymentState(*s)
	}
	return prsu
}

// ClearPaymentState clears the value of the "payment_state" field.
func (prsu *PowerRentalStateUpdate) ClearPaymentState() *PowerRentalStateUpdate {
	prsu.mutation.ClearPaymentState()
	return prsu
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (prsu *PowerRentalStateUpdate) SetOutofgasSeconds(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetOutofgasSeconds()
	prsu.mutation.SetOutofgasSeconds(u)
	return prsu
}

// SetNillableOutofgasSeconds sets the "outofgas_seconds" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableOutofgasSeconds(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetOutofgasSeconds(*u)
	}
	return prsu
}

// AddOutofgasSeconds adds u to the "outofgas_seconds" field.
func (prsu *PowerRentalStateUpdate) AddOutofgasSeconds(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddOutofgasSeconds(u)
	return prsu
}

// ClearOutofgasSeconds clears the value of the "outofgas_seconds" field.
func (prsu *PowerRentalStateUpdate) ClearOutofgasSeconds() *PowerRentalStateUpdate {
	prsu.mutation.ClearOutofgasSeconds()
	return prsu
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (prsu *PowerRentalStateUpdate) SetCompensateSeconds(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetCompensateSeconds()
	prsu.mutation.SetCompensateSeconds(u)
	return prsu
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableCompensateSeconds(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetCompensateSeconds(*u)
	}
	return prsu
}

// AddCompensateSeconds adds u to the "compensate_seconds" field.
func (prsu *PowerRentalStateUpdate) AddCompensateSeconds(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddCompensateSeconds(u)
	return prsu
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (prsu *PowerRentalStateUpdate) ClearCompensateSeconds() *PowerRentalStateUpdate {
	prsu.mutation.ClearCompensateSeconds()
	return prsu
}

// SetRenewState sets the "renew_state" field.
func (prsu *PowerRentalStateUpdate) SetRenewState(s string) *PowerRentalStateUpdate {
	prsu.mutation.SetRenewState(s)
	return prsu
}

// SetNillableRenewState sets the "renew_state" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableRenewState(s *string) *PowerRentalStateUpdate {
	if s != nil {
		prsu.SetRenewState(*s)
	}
	return prsu
}

// ClearRenewState clears the value of the "renew_state" field.
func (prsu *PowerRentalStateUpdate) ClearRenewState() *PowerRentalStateUpdate {
	prsu.mutation.ClearRenewState()
	return prsu
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (prsu *PowerRentalStateUpdate) SetRenewNotifyAt(u uint32) *PowerRentalStateUpdate {
	prsu.mutation.ResetRenewNotifyAt()
	prsu.mutation.SetRenewNotifyAt(u)
	return prsu
}

// SetNillableRenewNotifyAt sets the "renew_notify_at" field if the given value is not nil.
func (prsu *PowerRentalStateUpdate) SetNillableRenewNotifyAt(u *uint32) *PowerRentalStateUpdate {
	if u != nil {
		prsu.SetRenewNotifyAt(*u)
	}
	return prsu
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (prsu *PowerRentalStateUpdate) AddRenewNotifyAt(u int32) *PowerRentalStateUpdate {
	prsu.mutation.AddRenewNotifyAt(u)
	return prsu
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (prsu *PowerRentalStateUpdate) ClearRenewNotifyAt() *PowerRentalStateUpdate {
	prsu.mutation.ClearRenewNotifyAt()
	return prsu
}

// Mutation returns the PowerRentalStateMutation object of the builder.
func (prsu *PowerRentalStateUpdate) Mutation() *PowerRentalStateMutation {
	return prsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prsu *PowerRentalStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := prsu.defaults(); err != nil {
		return 0, err
	}
	if len(prsu.hooks) == 0 {
		affected, err = prsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			prsu.mutation = mutation
			affected, err = prsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(prsu.hooks) - 1; i >= 0; i-- {
			if prsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (prsu *PowerRentalStateUpdate) SaveX(ctx context.Context) int {
	affected, err := prsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prsu *PowerRentalStateUpdate) Exec(ctx context.Context) error {
	_, err := prsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prsu *PowerRentalStateUpdate) ExecX(ctx context.Context) {
	if err := prsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prsu *PowerRentalStateUpdate) defaults() error {
	if _, ok := prsu.mutation.UpdatedAt(); !ok {
		if powerrentalstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.UpdateDefaultUpdatedAt()
		prsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prsu *PowerRentalStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PowerRentalStateUpdate {
	prsu.modifiers = append(prsu.modifiers, modifiers...)
	return prsu
}

func (prsu *PowerRentalStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   powerrentalstate.Table,
			Columns: powerrentalstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrentalstate.FieldID,
			},
		},
	}
	if ps := prsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCreatedAt,
		})
	}
	if value, ok := prsu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCreatedAt,
		})
	}
	if value, ok := prsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldUpdatedAt,
		})
	}
	if value, ok := prsu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldUpdatedAt,
		})
	}
	if value, ok := prsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDeletedAt,
		})
	}
	if value, ok := prsu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDeletedAt,
		})
	}
	if value, ok := prsu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldEntID,
		})
	}
	if value, ok := prsu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldOrderID,
		})
	}
	if prsu.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrentalstate.FieldOrderID,
		})
	}
	if value, ok := prsu.mutation.CancelState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldCancelState,
		})
	}
	if prsu.mutation.CancelStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldCancelState,
		})
	}
	if value, ok := prsu.mutation.CanceledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if value, ok := prsu.mutation.AddedCanceledAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if prsu.mutation.CanceledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if value, ok := prsu.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldPaymentID,
		})
	}
	if prsu.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrentalstate.FieldPaymentID,
		})
	}
	if value, ok := prsu.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if value, ok := prsu.mutation.AddedPaidAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if prsu.mutation.PaidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if value, ok := prsu.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetPaid,
		})
	}
	if prsu.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldUserSetPaid,
		})
	}
	if value, ok := prsu.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetCanceled,
		})
	}
	if prsu.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldUserSetCanceled,
		})
	}
	if value, ok := prsu.mutation.AdminSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldAdminSetCanceled,
		})
	}
	if prsu.mutation.AdminSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldAdminSetCanceled,
		})
	}
	if value, ok := prsu.mutation.PaymentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldPaymentState,
		})
	}
	if prsu.mutation.PaymentStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldPaymentState,
		})
	}
	if value, ok := prsu.mutation.OutofgasSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if value, ok := prsu.mutation.AddedOutofgasSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if prsu.mutation.OutofgasSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if value, ok := prsu.mutation.CompensateSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if value, ok := prsu.mutation.AddedCompensateSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if prsu.mutation.CompensateSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if value, ok := prsu.mutation.RenewState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldRenewState,
		})
	}
	if prsu.mutation.RenewStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldRenewState,
		})
	}
	if value, ok := prsu.mutation.RenewNotifyAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	if value, ok := prsu.mutation.AddedRenewNotifyAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	if prsu.mutation.RenewNotifyAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	_spec.Modifiers = prsu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, prsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powerrentalstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PowerRentalStateUpdateOne is the builder for updating a single PowerRentalState entity.
type PowerRentalStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PowerRentalStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetCreatedAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetCreatedAt()
	prsuo.mutation.SetCreatedAt(u)
	return prsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableCreatedAt(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetCreatedAt(*u)
	}
	return prsuo
}

// AddCreatedAt adds u to the "created_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddCreatedAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddCreatedAt(u)
	return prsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetUpdatedAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetUpdatedAt()
	prsuo.mutation.SetUpdatedAt(u)
	return prsuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddUpdatedAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddUpdatedAt(u)
	return prsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetDeletedAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetDeletedAt()
	prsuo.mutation.SetDeletedAt(u)
	return prsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableDeletedAt(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetDeletedAt(*u)
	}
	return prsuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddDeletedAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddDeletedAt(u)
	return prsuo
}

// SetEntID sets the "ent_id" field.
func (prsuo *PowerRentalStateUpdateOne) SetEntID(u uuid.UUID) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetEntID(u)
	return prsuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableEntID(u *uuid.UUID) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetEntID(*u)
	}
	return prsuo
}

// SetOrderID sets the "order_id" field.
func (prsuo *PowerRentalStateUpdateOne) SetOrderID(u uuid.UUID) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetOrderID(u)
	return prsuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableOrderID(u *uuid.UUID) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetOrderID(*u)
	}
	return prsuo
}

// ClearOrderID clears the value of the "order_id" field.
func (prsuo *PowerRentalStateUpdateOne) ClearOrderID() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearOrderID()
	return prsuo
}

// SetCancelState sets the "cancel_state" field.
func (prsuo *PowerRentalStateUpdateOne) SetCancelState(s string) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetCancelState(s)
	return prsuo
}

// SetNillableCancelState sets the "cancel_state" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableCancelState(s *string) *PowerRentalStateUpdateOne {
	if s != nil {
		prsuo.SetCancelState(*s)
	}
	return prsuo
}

// ClearCancelState clears the value of the "cancel_state" field.
func (prsuo *PowerRentalStateUpdateOne) ClearCancelState() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearCancelState()
	return prsuo
}

// SetCanceledAt sets the "canceled_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetCanceledAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetCanceledAt()
	prsuo.mutation.SetCanceledAt(u)
	return prsuo
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableCanceledAt(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetCanceledAt(*u)
	}
	return prsuo
}

// AddCanceledAt adds u to the "canceled_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddCanceledAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddCanceledAt(u)
	return prsuo
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (prsuo *PowerRentalStateUpdateOne) ClearCanceledAt() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearCanceledAt()
	return prsuo
}

// SetPaymentID sets the "payment_id" field.
func (prsuo *PowerRentalStateUpdateOne) SetPaymentID(u uuid.UUID) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetPaymentID(u)
	return prsuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillablePaymentID(u *uuid.UUID) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetPaymentID(*u)
	}
	return prsuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (prsuo *PowerRentalStateUpdateOne) ClearPaymentID() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearPaymentID()
	return prsuo
}

// SetPaidAt sets the "paid_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetPaidAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetPaidAt()
	prsuo.mutation.SetPaidAt(u)
	return prsuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillablePaidAt(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetPaidAt(*u)
	}
	return prsuo
}

// AddPaidAt adds u to the "paid_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddPaidAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddPaidAt(u)
	return prsuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (prsuo *PowerRentalStateUpdateOne) ClearPaidAt() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearPaidAt()
	return prsuo
}

// SetUserSetPaid sets the "user_set_paid" field.
func (prsuo *PowerRentalStateUpdateOne) SetUserSetPaid(b bool) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetUserSetPaid(b)
	return prsuo
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableUserSetPaid(b *bool) *PowerRentalStateUpdateOne {
	if b != nil {
		prsuo.SetUserSetPaid(*b)
	}
	return prsuo
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (prsuo *PowerRentalStateUpdateOne) ClearUserSetPaid() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearUserSetPaid()
	return prsuo
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (prsuo *PowerRentalStateUpdateOne) SetUserSetCanceled(b bool) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetUserSetCanceled(b)
	return prsuo
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableUserSetCanceled(b *bool) *PowerRentalStateUpdateOne {
	if b != nil {
		prsuo.SetUserSetCanceled(*b)
	}
	return prsuo
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (prsuo *PowerRentalStateUpdateOne) ClearUserSetCanceled() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearUserSetCanceled()
	return prsuo
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (prsuo *PowerRentalStateUpdateOne) SetAdminSetCanceled(b bool) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetAdminSetCanceled(b)
	return prsuo
}

// SetNillableAdminSetCanceled sets the "admin_set_canceled" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableAdminSetCanceled(b *bool) *PowerRentalStateUpdateOne {
	if b != nil {
		prsuo.SetAdminSetCanceled(*b)
	}
	return prsuo
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (prsuo *PowerRentalStateUpdateOne) ClearAdminSetCanceled() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearAdminSetCanceled()
	return prsuo
}

// SetPaymentState sets the "payment_state" field.
func (prsuo *PowerRentalStateUpdateOne) SetPaymentState(s string) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetPaymentState(s)
	return prsuo
}

// SetNillablePaymentState sets the "payment_state" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillablePaymentState(s *string) *PowerRentalStateUpdateOne {
	if s != nil {
		prsuo.SetPaymentState(*s)
	}
	return prsuo
}

// ClearPaymentState clears the value of the "payment_state" field.
func (prsuo *PowerRentalStateUpdateOne) ClearPaymentState() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearPaymentState()
	return prsuo
}

// SetOutofgasSeconds sets the "outofgas_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) SetOutofgasSeconds(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetOutofgasSeconds()
	prsuo.mutation.SetOutofgasSeconds(u)
	return prsuo
}

// SetNillableOutofgasSeconds sets the "outofgas_seconds" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableOutofgasSeconds(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetOutofgasSeconds(*u)
	}
	return prsuo
}

// AddOutofgasSeconds adds u to the "outofgas_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) AddOutofgasSeconds(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddOutofgasSeconds(u)
	return prsuo
}

// ClearOutofgasSeconds clears the value of the "outofgas_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) ClearOutofgasSeconds() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearOutofgasSeconds()
	return prsuo
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) SetCompensateSeconds(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetCompensateSeconds()
	prsuo.mutation.SetCompensateSeconds(u)
	return prsuo
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableCompensateSeconds(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetCompensateSeconds(*u)
	}
	return prsuo
}

// AddCompensateSeconds adds u to the "compensate_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) AddCompensateSeconds(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddCompensateSeconds(u)
	return prsuo
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (prsuo *PowerRentalStateUpdateOne) ClearCompensateSeconds() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearCompensateSeconds()
	return prsuo
}

// SetRenewState sets the "renew_state" field.
func (prsuo *PowerRentalStateUpdateOne) SetRenewState(s string) *PowerRentalStateUpdateOne {
	prsuo.mutation.SetRenewState(s)
	return prsuo
}

// SetNillableRenewState sets the "renew_state" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableRenewState(s *string) *PowerRentalStateUpdateOne {
	if s != nil {
		prsuo.SetRenewState(*s)
	}
	return prsuo
}

// ClearRenewState clears the value of the "renew_state" field.
func (prsuo *PowerRentalStateUpdateOne) ClearRenewState() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearRenewState()
	return prsuo
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (prsuo *PowerRentalStateUpdateOne) SetRenewNotifyAt(u uint32) *PowerRentalStateUpdateOne {
	prsuo.mutation.ResetRenewNotifyAt()
	prsuo.mutation.SetRenewNotifyAt(u)
	return prsuo
}

// SetNillableRenewNotifyAt sets the "renew_notify_at" field if the given value is not nil.
func (prsuo *PowerRentalStateUpdateOne) SetNillableRenewNotifyAt(u *uint32) *PowerRentalStateUpdateOne {
	if u != nil {
		prsuo.SetRenewNotifyAt(*u)
	}
	return prsuo
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (prsuo *PowerRentalStateUpdateOne) AddRenewNotifyAt(u int32) *PowerRentalStateUpdateOne {
	prsuo.mutation.AddRenewNotifyAt(u)
	return prsuo
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (prsuo *PowerRentalStateUpdateOne) ClearRenewNotifyAt() *PowerRentalStateUpdateOne {
	prsuo.mutation.ClearRenewNotifyAt()
	return prsuo
}

// Mutation returns the PowerRentalStateMutation object of the builder.
func (prsuo *PowerRentalStateUpdateOne) Mutation() *PowerRentalStateMutation {
	return prsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prsuo *PowerRentalStateUpdateOne) Select(field string, fields ...string) *PowerRentalStateUpdateOne {
	prsuo.fields = append([]string{field}, fields...)
	return prsuo
}

// Save executes the query and returns the updated PowerRentalState entity.
func (prsuo *PowerRentalStateUpdateOne) Save(ctx context.Context) (*PowerRentalState, error) {
	var (
		err  error
		node *PowerRentalState
	)
	if err := prsuo.defaults(); err != nil {
		return nil, err
	}
	if len(prsuo.hooks) == 0 {
		node, err = prsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			prsuo.mutation = mutation
			node, err = prsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(prsuo.hooks) - 1; i >= 0; i-- {
			if prsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PowerRentalState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PowerRentalStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (prsuo *PowerRentalStateUpdateOne) SaveX(ctx context.Context) *PowerRentalState {
	node, err := prsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prsuo *PowerRentalStateUpdateOne) Exec(ctx context.Context) error {
	_, err := prsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prsuo *PowerRentalStateUpdateOne) ExecX(ctx context.Context) {
	if err := prsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prsuo *PowerRentalStateUpdateOne) defaults() error {
	if _, ok := prsuo.mutation.UpdatedAt(); !ok {
		if powerrentalstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrentalstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrentalstate.UpdateDefaultUpdatedAt()
		prsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prsuo *PowerRentalStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PowerRentalStateUpdateOne {
	prsuo.modifiers = append(prsuo.modifiers, modifiers...)
	return prsuo
}

func (prsuo *PowerRentalStateUpdateOne) sqlSave(ctx context.Context) (_node *PowerRentalState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   powerrentalstate.Table,
			Columns: powerrentalstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrentalstate.FieldID,
			},
		},
	}
	id, ok := prsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PowerRentalState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, powerrentalstate.FieldID)
		for _, f := range fields {
			if !powerrentalstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != powerrentalstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCreatedAt,
		})
	}
	if value, ok := prsuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCreatedAt,
		})
	}
	if value, ok := prsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldUpdatedAt,
		})
	}
	if value, ok := prsuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldUpdatedAt,
		})
	}
	if value, ok := prsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDeletedAt,
		})
	}
	if value, ok := prsuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldDeletedAt,
		})
	}
	if value, ok := prsuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldEntID,
		})
	}
	if value, ok := prsuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldOrderID,
		})
	}
	if prsuo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrentalstate.FieldOrderID,
		})
	}
	if value, ok := prsuo.mutation.CancelState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldCancelState,
		})
	}
	if prsuo.mutation.CancelStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldCancelState,
		})
	}
	if value, ok := prsuo.mutation.CanceledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if value, ok := prsuo.mutation.AddedCanceledAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if prsuo.mutation.CanceledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldCanceledAt,
		})
	}
	if value, ok := prsuo.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrentalstate.FieldPaymentID,
		})
	}
	if prsuo.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrentalstate.FieldPaymentID,
		})
	}
	if value, ok := prsuo.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if value, ok := prsuo.mutation.AddedPaidAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if prsuo.mutation.PaidAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldPaidAt,
		})
	}
	if value, ok := prsuo.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetPaid,
		})
	}
	if prsuo.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldUserSetPaid,
		})
	}
	if value, ok := prsuo.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldUserSetCanceled,
		})
	}
	if prsuo.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldUserSetCanceled,
		})
	}
	if value, ok := prsuo.mutation.AdminSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: powerrentalstate.FieldAdminSetCanceled,
		})
	}
	if prsuo.mutation.AdminSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: powerrentalstate.FieldAdminSetCanceled,
		})
	}
	if value, ok := prsuo.mutation.PaymentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldPaymentState,
		})
	}
	if prsuo.mutation.PaymentStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldPaymentState,
		})
	}
	if value, ok := prsuo.mutation.OutofgasSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if value, ok := prsuo.mutation.AddedOutofgasSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if prsuo.mutation.OutofgasSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldOutofgasSeconds,
		})
	}
	if value, ok := prsuo.mutation.CompensateSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if value, ok := prsuo.mutation.AddedCompensateSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if prsuo.mutation.CompensateSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldCompensateSeconds,
		})
	}
	if value, ok := prsuo.mutation.RenewState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrentalstate.FieldRenewState,
		})
	}
	if prsuo.mutation.RenewStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrentalstate.FieldRenewState,
		})
	}
	if value, ok := prsuo.mutation.RenewNotifyAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	if value, ok := prsuo.mutation.AddedRenewNotifyAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	if prsuo.mutation.RenewNotifyAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrentalstate.FieldRenewNotifyAt,
		})
	}
	_spec.Modifiers = prsuo.modifiers
	_node = &PowerRentalState{config: prsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powerrentalstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
