// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
)

// OrderBaseQuery is the builder for querying OrderBase entities.
type OrderBaseQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderBase
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderBaseQuery builder.
func (obq *OrderBaseQuery) Where(ps ...predicate.OrderBase) *OrderBaseQuery {
	obq.predicates = append(obq.predicates, ps...)
	return obq
}

// Limit adds a limit step to the query.
func (obq *OrderBaseQuery) Limit(limit int) *OrderBaseQuery {
	obq.limit = &limit
	return obq
}

// Offset adds an offset step to the query.
func (obq *OrderBaseQuery) Offset(offset int) *OrderBaseQuery {
	obq.offset = &offset
	return obq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (obq *OrderBaseQuery) Unique(unique bool) *OrderBaseQuery {
	obq.unique = &unique
	return obq
}

// Order adds an order step to the query.
func (obq *OrderBaseQuery) Order(o ...OrderFunc) *OrderBaseQuery {
	obq.order = append(obq.order, o...)
	return obq
}

// First returns the first OrderBase entity from the query.
// Returns a *NotFoundError when no OrderBase was found.
func (obq *OrderBaseQuery) First(ctx context.Context) (*OrderBase, error) {
	nodes, err := obq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderbase.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (obq *OrderBaseQuery) FirstX(ctx context.Context) *OrderBase {
	node, err := obq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderBase ID from the query.
// Returns a *NotFoundError when no OrderBase ID was found.
func (obq *OrderBaseQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = obq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderbase.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (obq *OrderBaseQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := obq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderBase entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderBase entity is found.
// Returns a *NotFoundError when no OrderBase entities are found.
func (obq *OrderBaseQuery) Only(ctx context.Context) (*OrderBase, error) {
	nodes, err := obq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderbase.Label}
	default:
		return nil, &NotSingularError{orderbase.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (obq *OrderBaseQuery) OnlyX(ctx context.Context) *OrderBase {
	node, err := obq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderBase ID in the query.
// Returns a *NotSingularError when more than one OrderBase ID is found.
// Returns a *NotFoundError when no entities are found.
func (obq *OrderBaseQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = obq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderbase.Label}
	default:
		err = &NotSingularError{orderbase.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (obq *OrderBaseQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := obq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderBases.
func (obq *OrderBaseQuery) All(ctx context.Context) ([]*OrderBase, error) {
	if err := obq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return obq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (obq *OrderBaseQuery) AllX(ctx context.Context) []*OrderBase {
	nodes, err := obq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderBase IDs.
func (obq *OrderBaseQuery) IDs(ctx context.Context) ([]uint32, error) {
	var ids []uint32
	if err := obq.Select(orderbase.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (obq *OrderBaseQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := obq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (obq *OrderBaseQuery) Count(ctx context.Context) (int, error) {
	if err := obq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return obq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (obq *OrderBaseQuery) CountX(ctx context.Context) int {
	count, err := obq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (obq *OrderBaseQuery) Exist(ctx context.Context) (bool, error) {
	if err := obq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return obq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (obq *OrderBaseQuery) ExistX(ctx context.Context) bool {
	exist, err := obq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderBaseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (obq *OrderBaseQuery) Clone() *OrderBaseQuery {
	if obq == nil {
		return nil
	}
	return &OrderBaseQuery{
		config:     obq.config,
		limit:      obq.limit,
		offset:     obq.offset,
		order:      append([]OrderFunc{}, obq.order...),
		predicates: append([]predicate.OrderBase{}, obq.predicates...),
		// clone intermediate query.
		sql:    obq.sql.Clone(),
		path:   obq.path,
		unique: obq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderBase.Query().
//		GroupBy(orderbase.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (obq *OrderBaseQuery) GroupBy(field string, fields ...string) *OrderBaseGroupBy {
	grbuild := &OrderBaseGroupBy{config: obq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := obq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return obq.sqlQuery(ctx), nil
	}
	grbuild.label = orderbase.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt uint32 `json:"created_at,omitempty"`
//	}
//
//	client.OrderBase.Query().
//		Select(orderbase.FieldCreatedAt).
//		Scan(ctx, &v)
func (obq *OrderBaseQuery) Select(fields ...string) *OrderBaseSelect {
	obq.fields = append(obq.fields, fields...)
	selbuild := &OrderBaseSelect{OrderBaseQuery: obq}
	selbuild.label = orderbase.Label
	selbuild.flds, selbuild.scan = &obq.fields, selbuild.Scan
	return selbuild
}

func (obq *OrderBaseQuery) prepareQuery(ctx context.Context) error {
	for _, f := range obq.fields {
		if !orderbase.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if obq.path != nil {
		prev, err := obq.path(ctx)
		if err != nil {
			return err
		}
		obq.sql = prev
	}
	if orderbase.Policy == nil {
		return errors.New("ent: uninitialized orderbase.Policy (forgotten import ent/runtime?)")
	}
	if err := orderbase.Policy.EvalQuery(ctx, obq); err != nil {
		return err
	}
	return nil
}

func (obq *OrderBaseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderBase, error) {
	var (
		nodes = []*OrderBase{}
		_spec = obq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*OrderBase).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &OrderBase{config: obq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(obq.modifiers) > 0 {
		_spec.Modifiers = obq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, obq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (obq *OrderBaseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := obq.querySpec()
	if len(obq.modifiers) > 0 {
		_spec.Modifiers = obq.modifiers
	}
	_spec.Node.Columns = obq.fields
	if len(obq.fields) > 0 {
		_spec.Unique = obq.unique != nil && *obq.unique
	}
	return sqlgraph.CountNodes(ctx, obq.driver, _spec)
}

func (obq *OrderBaseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := obq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (obq *OrderBaseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderbase.Table,
			Columns: orderbase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderbase.FieldID,
			},
		},
		From:   obq.sql,
		Unique: true,
	}
	if unique := obq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := obq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderbase.FieldID)
		for i := range fields {
			if fields[i] != orderbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := obq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := obq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := obq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := obq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (obq *OrderBaseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(obq.driver.Dialect())
	t1 := builder.Table(orderbase.Table)
	columns := obq.fields
	if len(columns) == 0 {
		columns = orderbase.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if obq.sql != nil {
		selector = obq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if obq.unique != nil && *obq.unique {
		selector.Distinct()
	}
	for _, m := range obq.modifiers {
		m(selector)
	}
	for _, p := range obq.predicates {
		p(selector)
	}
	for _, p := range obq.order {
		p(selector)
	}
	if offset := obq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := obq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (obq *OrderBaseQuery) ForUpdate(opts ...sql.LockOption) *OrderBaseQuery {
	if obq.driver.Dialect() == dialect.Postgres {
		obq.Unique(false)
	}
	obq.modifiers = append(obq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return obq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (obq *OrderBaseQuery) ForShare(opts ...sql.LockOption) *OrderBaseQuery {
	if obq.driver.Dialect() == dialect.Postgres {
		obq.Unique(false)
	}
	obq.modifiers = append(obq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return obq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (obq *OrderBaseQuery) Modify(modifiers ...func(s *sql.Selector)) *OrderBaseSelect {
	obq.modifiers = append(obq.modifiers, modifiers...)
	return obq.Select()
}

// OrderBaseGroupBy is the group-by builder for OrderBase entities.
type OrderBaseGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (obgb *OrderBaseGroupBy) Aggregate(fns ...AggregateFunc) *OrderBaseGroupBy {
	obgb.fns = append(obgb.fns, fns...)
	return obgb
}

// Scan applies the group-by query and scans the result into the given value.
func (obgb *OrderBaseGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := obgb.path(ctx)
	if err != nil {
		return err
	}
	obgb.sql = query
	return obgb.sqlScan(ctx, v)
}

func (obgb *OrderBaseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range obgb.fields {
		if !orderbase.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := obgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := obgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (obgb *OrderBaseGroupBy) sqlQuery() *sql.Selector {
	selector := obgb.sql.Select()
	aggregation := make([]string, 0, len(obgb.fns))
	for _, fn := range obgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(obgb.fields)+len(obgb.fns))
		for _, f := range obgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(obgb.fields...)...)
}

// OrderBaseSelect is the builder for selecting fields of OrderBase entities.
type OrderBaseSelect struct {
	*OrderBaseQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (obs *OrderBaseSelect) Scan(ctx context.Context, v interface{}) error {
	if err := obs.prepareQuery(ctx); err != nil {
		return err
	}
	obs.sql = obs.OrderBaseQuery.sqlQuery(ctx)
	return obs.sqlScan(ctx, v)
}

func (obs *OrderBaseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := obs.sql.Query()
	if err := obs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (obs *OrderBaseSelect) Modify(modifiers ...func(s *sql.Selector)) *OrderBaseSelect {
	obs.modifiers = append(obs.modifiers, modifiers...)
	return obs
}
