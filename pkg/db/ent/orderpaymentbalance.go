// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentbalance"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentBalance is the model entity for the OrderPaymentBalance schema.
type OrderPaymentBalance struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// CoinUsdCurrency holds the value of the "coin_usd_currency" field.
	CoinUsdCurrency decimal.Decimal `json:"coin_usd_currency,omitempty"`
	// LocalCoinUsdCurrency holds the value of the "local_coin_usd_currency" field.
	LocalCoinUsdCurrency decimal.Decimal `json:"local_coin_usd_currency,omitempty"`
	// LiveCoinUsdCurrency holds the value of the "live_coin_usd_currency" field.
	LiveCoinUsdCurrency decimal.Decimal `json:"live_coin_usd_currency,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderPaymentBalance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderpaymentbalance.FieldAmount, orderpaymentbalance.FieldCoinUsdCurrency, orderpaymentbalance.FieldLocalCoinUsdCurrency, orderpaymentbalance.FieldLiveCoinUsdCurrency:
			values[i] = new(decimal.Decimal)
		case orderpaymentbalance.FieldID, orderpaymentbalance.FieldCreatedAt, orderpaymentbalance.FieldUpdatedAt, orderpaymentbalance.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case orderpaymentbalance.FieldEntID, orderpaymentbalance.FieldOrderID, orderpaymentbalance.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderPaymentBalance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderPaymentBalance fields.
func (opb *OrderPaymentBalance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderpaymentbalance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			opb.ID = uint32(value.Int64)
		case orderpaymentbalance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				opb.CreatedAt = uint32(value.Int64)
			}
		case orderpaymentbalance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				opb.UpdatedAt = uint32(value.Int64)
			}
		case orderpaymentbalance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				opb.DeletedAt = uint32(value.Int64)
			}
		case orderpaymentbalance.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				opb.EntID = *value
			}
		case orderpaymentbalance.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				opb.OrderID = *value
			}
		case orderpaymentbalance.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				opb.CoinTypeID = *value
			}
		case orderpaymentbalance.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				opb.Amount = *value
			}
		case orderpaymentbalance.FieldCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field coin_usd_currency", values[i])
			} else if value != nil {
				opb.CoinUsdCurrency = *value
			}
		case orderpaymentbalance.FieldLocalCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field local_coin_usd_currency", values[i])
			} else if value != nil {
				opb.LocalCoinUsdCurrency = *value
			}
		case orderpaymentbalance.FieldLiveCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field live_coin_usd_currency", values[i])
			} else if value != nil {
				opb.LiveCoinUsdCurrency = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderPaymentBalance.
// Note that you need to call OrderPaymentBalance.Unwrap() before calling this method if this OrderPaymentBalance
// was returned from a transaction, and the transaction was committed or rolled back.
func (opb *OrderPaymentBalance) Update() *OrderPaymentBalanceUpdateOne {
	return (&OrderPaymentBalanceClient{config: opb.config}).UpdateOne(opb)
}

// Unwrap unwraps the OrderPaymentBalance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (opb *OrderPaymentBalance) Unwrap() *OrderPaymentBalance {
	_tx, ok := opb.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderPaymentBalance is not a transactional entity")
	}
	opb.config.driver = _tx.drv
	return opb
}

// String implements the fmt.Stringer.
func (opb *OrderPaymentBalance) String() string {
	var builder strings.Builder
	builder.WriteString("OrderPaymentBalance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", opb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", opb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", opb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", opb.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", opb.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", opb.OrderID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", opb.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", opb.Amount))
	builder.WriteString(", ")
	builder.WriteString("coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", opb.CoinUsdCurrency))
	builder.WriteString(", ")
	builder.WriteString("local_coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", opb.LocalCoinUsdCurrency))
	builder.WriteString(", ")
	builder.WriteString("live_coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", opb.LiveCoinUsdCurrency))
	builder.WriteByte(')')
	return builder.String()
}

// OrderPaymentBalances is a parsable slice of OrderPaymentBalance.
type OrderPaymentBalances []*OrderPaymentBalance

func (opb OrderPaymentBalances) config(cfg config) {
	for _i := range opb {
		opb[_i].config = cfg
	}
}
