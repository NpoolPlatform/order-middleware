// Code generated by ent, DO NOT EDIT.

package paymenttransfer

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// StartAmount applies equality check predicate on the "start_amount" field. It's identical to StartAmountEQ.
func StartAmount(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAmount), v))
	})
}

// FinishAmount applies equality check predicate on the "finish_amount" field. It's identical to FinishAmountEQ.
func FinishAmount(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishAmount), v))
	})
}

// CoinUsdCurrency applies equality check predicate on the "coin_usd_currency" field. It's identical to CoinUsdCurrencyEQ.
func CoinUsdCurrency(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrency applies equality check predicate on the "local_coin_usd_currency" field. It's identical to LocalCoinUsdCurrencyEQ.
func LocalCoinUsdCurrency(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrency applies equality check predicate on the "live_coin_usd_currency" field. It's identical to LiveCoinUsdCurrencyEQ.
func LiveCoinUsdCurrency(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// StartAmountEQ applies the EQ predicate on the "start_amount" field.
func StartAmountEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAmount), v))
	})
}

// StartAmountNEQ applies the NEQ predicate on the "start_amount" field.
func StartAmountNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAmount), v))
	})
}

// StartAmountIn applies the In predicate on the "start_amount" field.
func StartAmountIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAmount), v...))
	})
}

// StartAmountNotIn applies the NotIn predicate on the "start_amount" field.
func StartAmountNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAmount), v...))
	})
}

// StartAmountGT applies the GT predicate on the "start_amount" field.
func StartAmountGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAmount), v))
	})
}

// StartAmountGTE applies the GTE predicate on the "start_amount" field.
func StartAmountGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAmount), v))
	})
}

// StartAmountLT applies the LT predicate on the "start_amount" field.
func StartAmountLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAmount), v))
	})
}

// StartAmountLTE applies the LTE predicate on the "start_amount" field.
func StartAmountLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAmount), v))
	})
}

// StartAmountIsNil applies the IsNil predicate on the "start_amount" field.
func StartAmountIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAmount)))
	})
}

// StartAmountNotNil applies the NotNil predicate on the "start_amount" field.
func StartAmountNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAmount)))
	})
}

// FinishAmountEQ applies the EQ predicate on the "finish_amount" field.
func FinishAmountEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountNEQ applies the NEQ predicate on the "finish_amount" field.
func FinishAmountNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountIn applies the In predicate on the "finish_amount" field.
func FinishAmountIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFinishAmount), v...))
	})
}

// FinishAmountNotIn applies the NotIn predicate on the "finish_amount" field.
func FinishAmountNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFinishAmount), v...))
	})
}

// FinishAmountGT applies the GT predicate on the "finish_amount" field.
func FinishAmountGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountGTE applies the GTE predicate on the "finish_amount" field.
func FinishAmountGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountLT applies the LT predicate on the "finish_amount" field.
func FinishAmountLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountLTE applies the LTE predicate on the "finish_amount" field.
func FinishAmountLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishAmount), v))
	})
}

// FinishAmountIsNil applies the IsNil predicate on the "finish_amount" field.
func FinishAmountIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinishAmount)))
	})
}

// FinishAmountNotNil applies the NotNil predicate on the "finish_amount" field.
func FinishAmountNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinishAmount)))
	})
}

// CoinUsdCurrencyEQ applies the EQ predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyNEQ applies the NEQ predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyIn applies the In predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinUsdCurrency), v...))
	})
}

// CoinUsdCurrencyNotIn applies the NotIn predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinUsdCurrency), v...))
	})
}

// CoinUsdCurrencyGT applies the GT predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyGTE applies the GTE predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyLT applies the LT predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyLTE applies the LTE predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinUsdCurrency), v))
	})
}

// CoinUsdCurrencyIsNil applies the IsNil predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinUsdCurrency)))
	})
}

// CoinUsdCurrencyNotNil applies the NotNil predicate on the "coin_usd_currency" field.
func CoinUsdCurrencyNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinUsdCurrency)))
	})
}

// LocalCoinUsdCurrencyEQ applies the EQ predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyNEQ applies the NEQ predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyIn applies the In predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocalCoinUsdCurrency), v...))
	})
}

// LocalCoinUsdCurrencyNotIn applies the NotIn predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocalCoinUsdCurrency), v...))
	})
}

// LocalCoinUsdCurrencyGT applies the GT predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyGTE applies the GTE predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyLT applies the LT predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyLTE applies the LTE predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocalCoinUsdCurrency), v))
	})
}

// LocalCoinUsdCurrencyIsNil applies the IsNil predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocalCoinUsdCurrency)))
	})
}

// LocalCoinUsdCurrencyNotNil applies the NotNil predicate on the "local_coin_usd_currency" field.
func LocalCoinUsdCurrencyNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocalCoinUsdCurrency)))
	})
}

// LiveCoinUsdCurrencyEQ applies the EQ predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyNEQ applies the NEQ predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNEQ(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyIn applies the In predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiveCoinUsdCurrency), v...))
	})
}

// LiveCoinUsdCurrencyNotIn applies the NotIn predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNotIn(vs ...decimal.Decimal) predicate.PaymentTransfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiveCoinUsdCurrency), v...))
	})
}

// LiveCoinUsdCurrencyGT applies the GT predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyGT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyGTE applies the GTE predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyGTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyLT applies the LT predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyLT(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyLTE applies the LTE predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyLTE(v decimal.Decimal) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveCoinUsdCurrency), v))
	})
}

// LiveCoinUsdCurrencyIsNil applies the IsNil predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyIsNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLiveCoinUsdCurrency)))
	})
}

// LiveCoinUsdCurrencyNotNil applies the NotNil predicate on the "live_coin_usd_currency" field.
func LiveCoinUsdCurrencyNotNil() predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLiveCoinUsdCurrency)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentTransfer) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentTransfer) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentTransfer) predicate.PaymentTransfer {
	return predicate.PaymentTransfer(func(s *sql.Selector) {
		p(s.Not())
	})
}
