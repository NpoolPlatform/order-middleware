// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// StartAmount holds the value of the "start_amount" field.
	StartAmount decimal.Decimal `json:"start_amount,omitempty"`
	// TransferAmount holds the value of the "transfer_amount" field.
	TransferAmount decimal.Decimal `json:"transfer_amount,omitempty"`
	// BalanceAmount holds the value of the "balance_amount" field.
	BalanceAmount decimal.Decimal `json:"balance_amount,omitempty"`
	// CoinUsdCurrency holds the value of the "coin_usd_currency" field.
	CoinUsdCurrency decimal.Decimal `json:"coin_usd_currency,omitempty"`
	// LocalCoinUsdCurrency holds the value of the "local_coin_usd_currency" field.
	LocalCoinUsdCurrency decimal.Decimal `json:"local_coin_usd_currency,omitempty"`
	// LiveCoinUsdCurrency holds the value of the "live_coin_usd_currency" field.
	LiveCoinUsdCurrency decimal.Decimal `json:"live_coin_usd_currency,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case payment.FieldStartAmount, payment.FieldTransferAmount, payment.FieldBalanceAmount, payment.FieldCoinUsdCurrency, payment.FieldLocalCoinUsdCurrency, payment.FieldLiveCoinUsdCurrency:
			values[i] = new(decimal.Decimal)
		case payment.FieldCreatedAt, payment.FieldUpdatedAt, payment.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case payment.FieldID, payment.FieldAppID, payment.FieldUserID, payment.FieldGoodID, payment.FieldOrderID, payment.FieldAccountID, payment.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Payment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case payment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = uint32(value.Int64)
			}
		case payment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = uint32(value.Int64)
			}
		case payment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pa.DeletedAt = uint32(value.Int64)
			}
		case payment.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				pa.AppID = *value
			}
		case payment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pa.UserID = *value
			}
		case payment.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				pa.GoodID = *value
			}
		case payment.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				pa.OrderID = *value
			}
		case payment.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				pa.AccountID = *value
			}
		case payment.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				pa.CoinTypeID = *value
			}
		case payment.FieldStartAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field start_amount", values[i])
			} else if value != nil {
				pa.StartAmount = *value
			}
		case payment.FieldTransferAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_amount", values[i])
			} else if value != nil {
				pa.TransferAmount = *value
			}
		case payment.FieldBalanceAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field balance_amount", values[i])
			} else if value != nil {
				pa.BalanceAmount = *value
			}
		case payment.FieldCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field coin_usd_currency", values[i])
			} else if value != nil {
				pa.CoinUsdCurrency = *value
			}
		case payment.FieldLocalCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field local_coin_usd_currency", values[i])
			} else if value != nil {
				pa.LocalCoinUsdCurrency = *value
			}
		case payment.FieldLiveCoinUsdCurrency:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field live_coin_usd_currency", values[i])
			} else if value != nil {
				pa.LiveCoinUsdCurrency = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Payment.
// Note that you need to call Payment.Unwrap() before calling this method if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return (&PaymentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Payment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pa.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pa.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pa.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.GoodID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.OrderID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.AccountID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("start_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.StartAmount))
	builder.WriteString(", ")
	builder.WriteString("transfer_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.TransferAmount))
	builder.WriteString(", ")
	builder.WriteString("balance_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.BalanceAmount))
	builder.WriteString(", ")
	builder.WriteString("coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", pa.CoinUsdCurrency))
	builder.WriteString(", ")
	builder.WriteString("local_coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", pa.LocalCoinUsdCurrency))
	builder.WriteString(", ")
	builder.WriteString("live_coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", pa.LiveCoinUsdCurrency))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment

func (pa Payments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
