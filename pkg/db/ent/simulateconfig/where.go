// Code generated by ent, DO NOT EDIT.

package simulateconfig

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// SendCouponMode applies equality check predicate on the "send_coupon_mode" field. It's identical to SendCouponModeEQ.
func SendCouponMode(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponProbability applies equality check predicate on the "send_coupon_probability" field. It's identical to SendCouponProbabilityEQ.
func SendCouponProbability(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendCouponProbability), v))
	})
}

// EnabledProfitTx applies equality check predicate on the "enabled_profit_tx" field. It's identical to EnabledProfitTxEQ.
func EnabledProfitTx(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnabledProfitTx), v))
	})
}

// ProfitTxProbability applies equality check predicate on the "profit_tx_probability" field. It's identical to ProfitTxProbabilityEQ.
func ProfitTxProbability(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfitTxProbability), v))
	})
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnabled), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// SendCouponModeEQ applies the EQ predicate on the "send_coupon_mode" field.
func SendCouponModeEQ(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeNEQ applies the NEQ predicate on the "send_coupon_mode" field.
func SendCouponModeNEQ(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeIn applies the In predicate on the "send_coupon_mode" field.
func SendCouponModeIn(vs ...string) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSendCouponMode), v...))
	})
}

// SendCouponModeNotIn applies the NotIn predicate on the "send_coupon_mode" field.
func SendCouponModeNotIn(vs ...string) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSendCouponMode), v...))
	})
}

// SendCouponModeGT applies the GT predicate on the "send_coupon_mode" field.
func SendCouponModeGT(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeGTE applies the GTE predicate on the "send_coupon_mode" field.
func SendCouponModeGTE(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeLT applies the LT predicate on the "send_coupon_mode" field.
func SendCouponModeLT(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeLTE applies the LTE predicate on the "send_coupon_mode" field.
func SendCouponModeLTE(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeContains applies the Contains predicate on the "send_coupon_mode" field.
func SendCouponModeContains(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeHasPrefix applies the HasPrefix predicate on the "send_coupon_mode" field.
func SendCouponModeHasPrefix(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeHasSuffix applies the HasSuffix predicate on the "send_coupon_mode" field.
func SendCouponModeHasSuffix(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeIsNil applies the IsNil predicate on the "send_coupon_mode" field.
func SendCouponModeIsNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSendCouponMode)))
	})
}

// SendCouponModeNotNil applies the NotNil predicate on the "send_coupon_mode" field.
func SendCouponModeNotNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSendCouponMode)))
	})
}

// SendCouponModeEqualFold applies the EqualFold predicate on the "send_coupon_mode" field.
func SendCouponModeEqualFold(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponModeContainsFold applies the ContainsFold predicate on the "send_coupon_mode" field.
func SendCouponModeContainsFold(v string) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSendCouponMode), v))
	})
}

// SendCouponProbabilityEQ applies the EQ predicate on the "send_coupon_probability" field.
func SendCouponProbabilityEQ(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityNEQ applies the NEQ predicate on the "send_coupon_probability" field.
func SendCouponProbabilityNEQ(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityIn applies the In predicate on the "send_coupon_probability" field.
func SendCouponProbabilityIn(vs ...decimal.Decimal) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSendCouponProbability), v...))
	})
}

// SendCouponProbabilityNotIn applies the NotIn predicate on the "send_coupon_probability" field.
func SendCouponProbabilityNotIn(vs ...decimal.Decimal) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSendCouponProbability), v...))
	})
}

// SendCouponProbabilityGT applies the GT predicate on the "send_coupon_probability" field.
func SendCouponProbabilityGT(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityGTE applies the GTE predicate on the "send_coupon_probability" field.
func SendCouponProbabilityGTE(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityLT applies the LT predicate on the "send_coupon_probability" field.
func SendCouponProbabilityLT(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityLTE applies the LTE predicate on the "send_coupon_probability" field.
func SendCouponProbabilityLTE(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSendCouponProbability), v))
	})
}

// SendCouponProbabilityIsNil applies the IsNil predicate on the "send_coupon_probability" field.
func SendCouponProbabilityIsNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSendCouponProbability)))
	})
}

// SendCouponProbabilityNotNil applies the NotNil predicate on the "send_coupon_probability" field.
func SendCouponProbabilityNotNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSendCouponProbability)))
	})
}

// EnabledProfitTxEQ applies the EQ predicate on the "enabled_profit_tx" field.
func EnabledProfitTxEQ(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnabledProfitTx), v))
	})
}

// EnabledProfitTxNEQ applies the NEQ predicate on the "enabled_profit_tx" field.
func EnabledProfitTxNEQ(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnabledProfitTx), v))
	})
}

// EnabledProfitTxIsNil applies the IsNil predicate on the "enabled_profit_tx" field.
func EnabledProfitTxIsNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnabledProfitTx)))
	})
}

// EnabledProfitTxNotNil applies the NotNil predicate on the "enabled_profit_tx" field.
func EnabledProfitTxNotNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnabledProfitTx)))
	})
}

// ProfitTxProbabilityEQ applies the EQ predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityEQ(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityNEQ applies the NEQ predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityNEQ(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityIn applies the In predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityIn(vs ...decimal.Decimal) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProfitTxProbability), v...))
	})
}

// ProfitTxProbabilityNotIn applies the NotIn predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityNotIn(vs ...decimal.Decimal) predicate.SimulateConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProfitTxProbability), v...))
	})
}

// ProfitTxProbabilityGT applies the GT predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityGT(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityGTE applies the GTE predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityGTE(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityLT applies the LT predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityLT(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityLTE applies the LTE predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityLTE(v decimal.Decimal) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfitTxProbability), v))
	})
}

// ProfitTxProbabilityIsNil applies the IsNil predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityIsNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProfitTxProbability)))
	})
}

// ProfitTxProbabilityNotNil applies the NotNil predicate on the "profit_tx_probability" field.
func ProfitTxProbabilityNotNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProfitTxProbability)))
	})
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnabled), v))
	})
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnabled), v))
	})
}

// EnabledIsNil applies the IsNil predicate on the "enabled" field.
func EnabledIsNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnabled)))
	})
}

// EnabledNotNil applies the NotNil predicate on the "enabled" field.
func EnabledNotNil() predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnabled)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SimulateConfig) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SimulateConfig) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SimulateConfig) predicate.SimulateConfig {
	return predicate.SimulateConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
