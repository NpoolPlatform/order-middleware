// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks     []Hook
	mutation  *PaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PaymentUpdate) SetCreatedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetCreatedAt()
	pu.mutation.SetCreatedAt(u)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCreatedAt(u *uint32) *PaymentUpdate {
	if u != nil {
		pu.SetCreatedAt(*u)
	}
	return pu
}

// AddCreatedAt adds u to the "created_at" field.
func (pu *PaymentUpdate) AddCreatedAt(u int32) *PaymentUpdate {
	pu.mutation.AddCreatedAt(u)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PaymentUpdate) SetUpdatedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(u)
	return pu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pu *PaymentUpdate) AddUpdatedAt(u int32) *PaymentUpdate {
	pu.mutation.AddUpdatedAt(u)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PaymentUpdate) SetDeletedAt(u uint32) *PaymentUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(u)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableDeletedAt(u *uint32) *PaymentUpdate {
	if u != nil {
		pu.SetDeletedAt(*u)
	}
	return pu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pu *PaymentUpdate) AddDeletedAt(u int32) *PaymentUpdate {
	pu.mutation.AddDeletedAt(u)
	return pu
}

// SetAppID sets the "app_id" field.
func (pu *PaymentUpdate) SetAppID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetAppID(u)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PaymentUpdate) SetUserID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetGoodID sets the "good_id" field.
func (pu *PaymentUpdate) SetGoodID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetGoodID(u)
	return pu
}

// SetOrderID sets the "order_id" field.
func (pu *PaymentUpdate) SetOrderID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetOrderID(u)
	return pu
}

// SetAccountID sets the "account_id" field.
func (pu *PaymentUpdate) SetAccountID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetAccountID(u)
	return pu
}

// SetStartAmount sets the "start_amount" field.
func (pu *PaymentUpdate) SetStartAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetStartAmount(d)
	return pu
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableStartAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetStartAmount(*d)
	}
	return pu
}

// ClearStartAmount clears the value of the "start_amount" field.
func (pu *PaymentUpdate) ClearStartAmount() *PaymentUpdate {
	pu.mutation.ClearStartAmount()
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PaymentUpdate) SetAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetAmount(d)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetAmount(*d)
	}
	return pu
}

// ClearAmount clears the value of the "amount" field.
func (pu *PaymentUpdate) ClearAmount() *PaymentUpdate {
	pu.mutation.ClearAmount()
	return pu
}

// SetPayWithBalanceAmount sets the "pay_with_balance_amount" field.
func (pu *PaymentUpdate) SetPayWithBalanceAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetPayWithBalanceAmount(d)
	return pu
}

// SetNillablePayWithBalanceAmount sets the "pay_with_balance_amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePayWithBalanceAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetPayWithBalanceAmount(*d)
	}
	return pu
}

// ClearPayWithBalanceAmount clears the value of the "pay_with_balance_amount" field.
func (pu *PaymentUpdate) ClearPayWithBalanceAmount() *PaymentUpdate {
	pu.mutation.ClearPayWithBalanceAmount()
	return pu
}

// SetFinishAmount sets the "finish_amount" field.
func (pu *PaymentUpdate) SetFinishAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetFinishAmount(d)
	return pu
}

// SetNillableFinishAmount sets the "finish_amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableFinishAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetFinishAmount(*d)
	}
	return pu
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (pu *PaymentUpdate) ClearFinishAmount() *PaymentUpdate {
	pu.mutation.ClearFinishAmount()
	return pu
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (pu *PaymentUpdate) SetCoinUsdCurrency(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetCoinUsdCurrency(d)
	return pu
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetCoinUsdCurrency(*d)
	}
	return pu
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (pu *PaymentUpdate) ClearCoinUsdCurrency() *PaymentUpdate {
	pu.mutation.ClearCoinUsdCurrency()
	return pu
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (pu *PaymentUpdate) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetLocalCoinUsdCurrency(d)
	return pu
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetLocalCoinUsdCurrency(*d)
	}
	return pu
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (pu *PaymentUpdate) ClearLocalCoinUsdCurrency() *PaymentUpdate {
	pu.mutation.ClearLocalCoinUsdCurrency()
	return pu
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (pu *PaymentUpdate) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetLiveCoinUsdCurrency(d)
	return pu
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetLiveCoinUsdCurrency(*d)
	}
	return pu
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (pu *PaymentUpdate) ClearLiveCoinUsdCurrency() *PaymentUpdate {
	pu.mutation.ClearLiveCoinUsdCurrency()
	return pu
}

// SetCoinInfoID sets the "coin_info_id" field.
func (pu *PaymentUpdate) SetCoinInfoID(u uuid.UUID) *PaymentUpdate {
	pu.mutation.SetCoinInfoID(u)
	return pu
}

// SetState sets the "state" field.
func (pu *PaymentUpdate) SetState(s string) *PaymentUpdate {
	pu.mutation.SetState(s)
	return pu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableState(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetState(*s)
	}
	return pu
}

// ClearState clears the value of the "state" field.
func (pu *PaymentUpdate) ClearState() *PaymentUpdate {
	pu.mutation.ClearState()
	return pu
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (pu *PaymentUpdate) SetChainTransactionID(s string) *PaymentUpdate {
	pu.mutation.SetChainTransactionID(s)
	return pu
}

// SetNillableChainTransactionID sets the "chain_transaction_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableChainTransactionID(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetChainTransactionID(*s)
	}
	return pu
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (pu *PaymentUpdate) ClearChainTransactionID() *PaymentUpdate {
	pu.mutation.ClearChainTransactionID()
	return pu
}

// SetUserSetPaid sets the "user_set_paid" field.
func (pu *PaymentUpdate) SetUserSetPaid(b bool) *PaymentUpdate {
	pu.mutation.SetUserSetPaid(b)
	return pu
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableUserSetPaid(b *bool) *PaymentUpdate {
	if b != nil {
		pu.SetUserSetPaid(*b)
	}
	return pu
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (pu *PaymentUpdate) ClearUserSetPaid() *PaymentUpdate {
	pu.mutation.ClearUserSetPaid()
	return pu
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (pu *PaymentUpdate) SetUserSetCanceled(b bool) *PaymentUpdate {
	pu.mutation.SetUserSetCanceled(b)
	return pu
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableUserSetCanceled(b *bool) *PaymentUpdate {
	if b != nil {
		pu.SetUserSetCanceled(*b)
	}
	return pu
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (pu *PaymentUpdate) ClearUserSetCanceled() *PaymentUpdate {
	pu.mutation.ClearUserSetCanceled()
	return pu
}

// SetFakePayment sets the "fake_payment" field.
func (pu *PaymentUpdate) SetFakePayment(b bool) *PaymentUpdate {
	pu.mutation.SetFakePayment(b)
	return pu
}

// SetNillableFakePayment sets the "fake_payment" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableFakePayment(b *bool) *PaymentUpdate {
	if b != nil {
		pu.SetFakePayment(*b)
	}
	return pu
}

// ClearFakePayment clears the value of the "fake_payment" field.
func (pu *PaymentUpdate) ClearFakePayment() *PaymentUpdate {
	pu.mutation.ClearFakePayment()
	return pu
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PaymentUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if payment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := payment.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PaymentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAppID,
		})
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldUserID,
		})
	}
	if value, ok := pu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldGoodID,
		})
	}
	if value, ok := pu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldOrderID,
		})
	}
	if value, ok := pu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAccountID,
		})
	}
	if value, ok := pu.mutation.StartAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldStartAmount,
		})
	}
	if pu.mutation.StartAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldStartAmount,
		})
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if pu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := pu.mutation.PayWithBalanceAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldPayWithBalanceAmount,
		})
	}
	if pu.mutation.PayWithBalanceAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldPayWithBalanceAmount,
		})
	}
	if value, ok := pu.mutation.FinishAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldFinishAmount,
		})
	}
	if pu.mutation.FinishAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldFinishAmount,
		})
	}
	if value, ok := pu.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldCoinUsdCurrency,
		})
	}
	if pu.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldCoinUsdCurrency,
		})
	}
	if value, ok := pu.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLocalCoinUsdCurrency,
		})
	}
	if pu.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := pu.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLiveCoinUsdCurrency,
		})
	}
	if pu.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldLiveCoinUsdCurrency,
		})
	}
	if value, ok := pu.mutation.CoinInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCoinInfoID,
		})
	}
	if value, ok := pu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldState,
		})
	}
	if pu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldState,
		})
	}
	if value, ok := pu.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldChainTransactionID,
		})
	}
	if pu.mutation.ChainTransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldChainTransactionID,
		})
	}
	if value, ok := pu.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldUserSetPaid,
		})
	}
	if pu.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldUserSetPaid,
		})
	}
	if value, ok := pu.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldUserSetCanceled,
		})
	}
	if pu.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldUserSetCanceled,
		})
	}
	if value, ok := pu.mutation.FakePayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldFakePayment,
		})
	}
	if pu.mutation.FakePaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldFakePayment,
		})
	}
	_spec.Modifiers = pu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (puo *PaymentUpdateOne) SetCreatedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetCreatedAt()
	puo.mutation.SetCreatedAt(u)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCreatedAt(u *uint32) *PaymentUpdateOne {
	if u != nil {
		puo.SetCreatedAt(*u)
	}
	return puo
}

// AddCreatedAt adds u to the "created_at" field.
func (puo *PaymentUpdateOne) AddCreatedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddCreatedAt(u)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PaymentUpdateOne) SetUpdatedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(u)
	return puo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puo *PaymentUpdateOne) AddUpdatedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddUpdatedAt(u)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PaymentUpdateOne) SetDeletedAt(u uint32) *PaymentUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(u)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableDeletedAt(u *uint32) *PaymentUpdateOne {
	if u != nil {
		puo.SetDeletedAt(*u)
	}
	return puo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puo *PaymentUpdateOne) AddDeletedAt(u int32) *PaymentUpdateOne {
	puo.mutation.AddDeletedAt(u)
	return puo
}

// SetAppID sets the "app_id" field.
func (puo *PaymentUpdateOne) SetAppID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetAppID(u)
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PaymentUpdateOne) SetUserID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetGoodID sets the "good_id" field.
func (puo *PaymentUpdateOne) SetGoodID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetGoodID(u)
	return puo
}

// SetOrderID sets the "order_id" field.
func (puo *PaymentUpdateOne) SetOrderID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetOrderID(u)
	return puo
}

// SetAccountID sets the "account_id" field.
func (puo *PaymentUpdateOne) SetAccountID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetAccountID(u)
	return puo
}

// SetStartAmount sets the "start_amount" field.
func (puo *PaymentUpdateOne) SetStartAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetStartAmount(d)
	return puo
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableStartAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetStartAmount(*d)
	}
	return puo
}

// ClearStartAmount clears the value of the "start_amount" field.
func (puo *PaymentUpdateOne) ClearStartAmount() *PaymentUpdateOne {
	puo.mutation.ClearStartAmount()
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PaymentUpdateOne) SetAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetAmount(d)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetAmount(*d)
	}
	return puo
}

// ClearAmount clears the value of the "amount" field.
func (puo *PaymentUpdateOne) ClearAmount() *PaymentUpdateOne {
	puo.mutation.ClearAmount()
	return puo
}

// SetPayWithBalanceAmount sets the "pay_with_balance_amount" field.
func (puo *PaymentUpdateOne) SetPayWithBalanceAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetPayWithBalanceAmount(d)
	return puo
}

// SetNillablePayWithBalanceAmount sets the "pay_with_balance_amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePayWithBalanceAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetPayWithBalanceAmount(*d)
	}
	return puo
}

// ClearPayWithBalanceAmount clears the value of the "pay_with_balance_amount" field.
func (puo *PaymentUpdateOne) ClearPayWithBalanceAmount() *PaymentUpdateOne {
	puo.mutation.ClearPayWithBalanceAmount()
	return puo
}

// SetFinishAmount sets the "finish_amount" field.
func (puo *PaymentUpdateOne) SetFinishAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetFinishAmount(d)
	return puo
}

// SetNillableFinishAmount sets the "finish_amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableFinishAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetFinishAmount(*d)
	}
	return puo
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (puo *PaymentUpdateOne) ClearFinishAmount() *PaymentUpdateOne {
	puo.mutation.ClearFinishAmount()
	return puo
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (puo *PaymentUpdateOne) SetCoinUsdCurrency(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetCoinUsdCurrency(d)
	return puo
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetCoinUsdCurrency(*d)
	}
	return puo
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (puo *PaymentUpdateOne) ClearCoinUsdCurrency() *PaymentUpdateOne {
	puo.mutation.ClearCoinUsdCurrency()
	return puo
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (puo *PaymentUpdateOne) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetLocalCoinUsdCurrency(d)
	return puo
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetLocalCoinUsdCurrency(*d)
	}
	return puo
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (puo *PaymentUpdateOne) ClearLocalCoinUsdCurrency() *PaymentUpdateOne {
	puo.mutation.ClearLocalCoinUsdCurrency()
	return puo
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (puo *PaymentUpdateOne) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetLiveCoinUsdCurrency(d)
	return puo
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetLiveCoinUsdCurrency(*d)
	}
	return puo
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (puo *PaymentUpdateOne) ClearLiveCoinUsdCurrency() *PaymentUpdateOne {
	puo.mutation.ClearLiveCoinUsdCurrency()
	return puo
}

// SetCoinInfoID sets the "coin_info_id" field.
func (puo *PaymentUpdateOne) SetCoinInfoID(u uuid.UUID) *PaymentUpdateOne {
	puo.mutation.SetCoinInfoID(u)
	return puo
}

// SetState sets the "state" field.
func (puo *PaymentUpdateOne) SetState(s string) *PaymentUpdateOne {
	puo.mutation.SetState(s)
	return puo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableState(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetState(*s)
	}
	return puo
}

// ClearState clears the value of the "state" field.
func (puo *PaymentUpdateOne) ClearState() *PaymentUpdateOne {
	puo.mutation.ClearState()
	return puo
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (puo *PaymentUpdateOne) SetChainTransactionID(s string) *PaymentUpdateOne {
	puo.mutation.SetChainTransactionID(s)
	return puo
}

// SetNillableChainTransactionID sets the "chain_transaction_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableChainTransactionID(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetChainTransactionID(*s)
	}
	return puo
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (puo *PaymentUpdateOne) ClearChainTransactionID() *PaymentUpdateOne {
	puo.mutation.ClearChainTransactionID()
	return puo
}

// SetUserSetPaid sets the "user_set_paid" field.
func (puo *PaymentUpdateOne) SetUserSetPaid(b bool) *PaymentUpdateOne {
	puo.mutation.SetUserSetPaid(b)
	return puo
}

// SetNillableUserSetPaid sets the "user_set_paid" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableUserSetPaid(b *bool) *PaymentUpdateOne {
	if b != nil {
		puo.SetUserSetPaid(*b)
	}
	return puo
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (puo *PaymentUpdateOne) ClearUserSetPaid() *PaymentUpdateOne {
	puo.mutation.ClearUserSetPaid()
	return puo
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (puo *PaymentUpdateOne) SetUserSetCanceled(b bool) *PaymentUpdateOne {
	puo.mutation.SetUserSetCanceled(b)
	return puo
}

// SetNillableUserSetCanceled sets the "user_set_canceled" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableUserSetCanceled(b *bool) *PaymentUpdateOne {
	if b != nil {
		puo.SetUserSetCanceled(*b)
	}
	return puo
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (puo *PaymentUpdateOne) ClearUserSetCanceled() *PaymentUpdateOne {
	puo.mutation.ClearUserSetCanceled()
	return puo
}

// SetFakePayment sets the "fake_payment" field.
func (puo *PaymentUpdateOne) SetFakePayment(b bool) *PaymentUpdateOne {
	puo.mutation.SetFakePayment(b)
	return puo
}

// SetNillableFakePayment sets the "fake_payment" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableFakePayment(b *bool) *PaymentUpdateOne {
	if b != nil {
		puo.SetFakePayment(*b)
	}
	return puo
}

// ClearFakePayment clears the value of the "fake_payment" field.
func (puo *PaymentUpdateOne) ClearFakePayment() *PaymentUpdateOne {
	puo.mutation.ClearFakePayment()
	return puo
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Payment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PaymentUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if payment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := payment.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PaymentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PaymentUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAppID,
		})
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldUserID,
		})
	}
	if value, ok := puo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldGoodID,
		})
	}
	if value, ok := puo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldOrderID,
		})
	}
	if value, ok := puo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAccountID,
		})
	}
	if value, ok := puo.mutation.StartAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldStartAmount,
		})
	}
	if puo.mutation.StartAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldStartAmount,
		})
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if puo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := puo.mutation.PayWithBalanceAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldPayWithBalanceAmount,
		})
	}
	if puo.mutation.PayWithBalanceAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldPayWithBalanceAmount,
		})
	}
	if value, ok := puo.mutation.FinishAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldFinishAmount,
		})
	}
	if puo.mutation.FinishAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldFinishAmount,
		})
	}
	if value, ok := puo.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldCoinUsdCurrency,
		})
	}
	if puo.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldCoinUsdCurrency,
		})
	}
	if value, ok := puo.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLocalCoinUsdCurrency,
		})
	}
	if puo.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := puo.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLiveCoinUsdCurrency,
		})
	}
	if puo.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: payment.FieldLiveCoinUsdCurrency,
		})
	}
	if value, ok := puo.mutation.CoinInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCoinInfoID,
		})
	}
	if value, ok := puo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldState,
		})
	}
	if puo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldState,
		})
	}
	if value, ok := puo.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldChainTransactionID,
		})
	}
	if puo.mutation.ChainTransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldChainTransactionID,
		})
	}
	if value, ok := puo.mutation.UserSetPaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldUserSetPaid,
		})
	}
	if puo.mutation.UserSetPaidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldUserSetPaid,
		})
	}
	if value, ok := puo.mutation.UserSetCanceled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldUserSetCanceled,
		})
	}
	if puo.mutation.UserSetCanceledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldUserSetCanceled,
		})
	}
	if value, ok := puo.mutation.FakePayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: payment.FieldFakePayment,
		})
	}
	if puo.mutation.FakePaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: payment.FieldFakePayment,
		})
	}
	_spec.Modifiers = puo.modifiers
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
