// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymenttransfer"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentTransferCreate is the builder for creating a OrderPaymentTransfer entity.
type OrderPaymentTransferCreate struct {
	config
	mutation *OrderPaymentTransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (optc *OrderPaymentTransferCreate) SetCreatedAt(u uint32) *OrderPaymentTransferCreate {
	optc.mutation.SetCreatedAt(u)
	return optc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableCreatedAt(u *uint32) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetCreatedAt(*u)
	}
	return optc
}

// SetUpdatedAt sets the "updated_at" field.
func (optc *OrderPaymentTransferCreate) SetUpdatedAt(u uint32) *OrderPaymentTransferCreate {
	optc.mutation.SetUpdatedAt(u)
	return optc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableUpdatedAt(u *uint32) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetUpdatedAt(*u)
	}
	return optc
}

// SetDeletedAt sets the "deleted_at" field.
func (optc *OrderPaymentTransferCreate) SetDeletedAt(u uint32) *OrderPaymentTransferCreate {
	optc.mutation.SetDeletedAt(u)
	return optc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableDeletedAt(u *uint32) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetDeletedAt(*u)
	}
	return optc
}

// SetEntID sets the "ent_id" field.
func (optc *OrderPaymentTransferCreate) SetEntID(u uuid.UUID) *OrderPaymentTransferCreate {
	optc.mutation.SetEntID(u)
	return optc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableEntID(u *uuid.UUID) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetEntID(*u)
	}
	return optc
}

// SetOrderID sets the "order_id" field.
func (optc *OrderPaymentTransferCreate) SetOrderID(u uuid.UUID) *OrderPaymentTransferCreate {
	optc.mutation.SetOrderID(u)
	return optc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableOrderID(u *uuid.UUID) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetOrderID(*u)
	}
	return optc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (optc *OrderPaymentTransferCreate) SetCoinTypeID(u uuid.UUID) *OrderPaymentTransferCreate {
	optc.mutation.SetCoinTypeID(u)
	return optc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentTransferCreate {
	if u != nil {
		optc.SetCoinTypeID(*u)
	}
	return optc
}

// SetStartAmount sets the "start_amount" field.
func (optc *OrderPaymentTransferCreate) SetStartAmount(d decimal.Decimal) *OrderPaymentTransferCreate {
	optc.mutation.SetStartAmount(d)
	return optc
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillableStartAmount(d *decimal.Decimal) *OrderPaymentTransferCreate {
	if d != nil {
		optc.SetStartAmount(*d)
	}
	return optc
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (optc *OrderPaymentTransferCreate) SetPaymentTransactionID(s string) *OrderPaymentTransferCreate {
	optc.mutation.SetPaymentTransactionID(s)
	return optc
}

// SetNillablePaymentTransactionID sets the "payment_transaction_id" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillablePaymentTransactionID(s *string) *OrderPaymentTransferCreate {
	if s != nil {
		optc.SetPaymentTransactionID(*s)
	}
	return optc
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (optc *OrderPaymentTransferCreate) SetPaymentFinishAmount(d decimal.Decimal) *OrderPaymentTransferCreate {
	optc.mutation.SetPaymentFinishAmount(d)
	return optc
}

// SetNillablePaymentFinishAmount sets the "payment_finish_amount" field if the given value is not nil.
func (optc *OrderPaymentTransferCreate) SetNillablePaymentFinishAmount(d *decimal.Decimal) *OrderPaymentTransferCreate {
	if d != nil {
		optc.SetPaymentFinishAmount(*d)
	}
	return optc
}

// SetID sets the "id" field.
func (optc *OrderPaymentTransferCreate) SetID(u uint32) *OrderPaymentTransferCreate {
	optc.mutation.SetID(u)
	return optc
}

// Mutation returns the OrderPaymentTransferMutation object of the builder.
func (optc *OrderPaymentTransferCreate) Mutation() *OrderPaymentTransferMutation {
	return optc.mutation
}

// Save creates the OrderPaymentTransfer in the database.
func (optc *OrderPaymentTransferCreate) Save(ctx context.Context) (*OrderPaymentTransfer, error) {
	var (
		err  error
		node *OrderPaymentTransfer
	)
	if err := optc.defaults(); err != nil {
		return nil, err
	}
	if len(optc.hooks) == 0 {
		if err = optc.check(); err != nil {
			return nil, err
		}
		node, err = optc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentTransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = optc.check(); err != nil {
				return nil, err
			}
			optc.mutation = mutation
			if node, err = optc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(optc.hooks) - 1; i >= 0; i-- {
			if optc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = optc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, optc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPaymentTransfer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPaymentTransferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (optc *OrderPaymentTransferCreate) SaveX(ctx context.Context) *OrderPaymentTransfer {
	v, err := optc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (optc *OrderPaymentTransferCreate) Exec(ctx context.Context) error {
	_, err := optc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (optc *OrderPaymentTransferCreate) ExecX(ctx context.Context) {
	if err := optc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (optc *OrderPaymentTransferCreate) defaults() error {
	if _, ok := optc.mutation.CreatedAt(); !ok {
		if orderpaymenttransfer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultCreatedAt()
		optc.mutation.SetCreatedAt(v)
	}
	if _, ok := optc.mutation.UpdatedAt(); !ok {
		if orderpaymenttransfer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultUpdatedAt()
		optc.mutation.SetUpdatedAt(v)
	}
	if _, ok := optc.mutation.DeletedAt(); !ok {
		if orderpaymenttransfer.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultDeletedAt()
		optc.mutation.SetDeletedAt(v)
	}
	if _, ok := optc.mutation.EntID(); !ok {
		if orderpaymenttransfer.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultEntID()
		optc.mutation.SetEntID(v)
	}
	if _, ok := optc.mutation.OrderID(); !ok {
		if orderpaymenttransfer.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultOrderID()
		optc.mutation.SetOrderID(v)
	}
	if _, ok := optc.mutation.CoinTypeID(); !ok {
		if orderpaymenttransfer.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymenttransfer.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := orderpaymenttransfer.DefaultCoinTypeID()
		optc.mutation.SetCoinTypeID(v)
	}
	if _, ok := optc.mutation.StartAmount(); !ok {
		v := orderpaymenttransfer.DefaultStartAmount
		optc.mutation.SetStartAmount(v)
	}
	if _, ok := optc.mutation.PaymentTransactionID(); !ok {
		v := orderpaymenttransfer.DefaultPaymentTransactionID
		optc.mutation.SetPaymentTransactionID(v)
	}
	if _, ok := optc.mutation.PaymentFinishAmount(); !ok {
		v := orderpaymenttransfer.DefaultPaymentFinishAmount
		optc.mutation.SetPaymentFinishAmount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (optc *OrderPaymentTransferCreate) check() error {
	if _, ok := optc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPaymentTransfer.created_at"`)}
	}
	if _, ok := optc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPaymentTransfer.updated_at"`)}
	}
	if _, ok := optc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderPaymentTransfer.deleted_at"`)}
	}
	if _, ok := optc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "OrderPaymentTransfer.ent_id"`)}
	}
	return nil
}

func (optc *OrderPaymentTransferCreate) sqlSave(ctx context.Context) (*OrderPaymentTransfer, error) {
	_node, _spec := optc.createSpec()
	if err := sqlgraph.CreateNode(ctx, optc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (optc *OrderPaymentTransferCreate) createSpec() (*OrderPaymentTransfer, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPaymentTransfer{config: optc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpaymenttransfer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymenttransfer.FieldID,
			},
		}
	)
	_spec.OnConflict = optc.conflict
	if id, ok := optc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := optc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymenttransfer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := optc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymenttransfer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := optc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymenttransfer.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := optc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymenttransfer.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := optc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymenttransfer.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := optc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymenttransfer.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := optc.mutation.StartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymenttransfer.FieldStartAmount,
		})
		_node.StartAmount = value
	}
	if value, ok := optc.mutation.PaymentTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymenttransfer.FieldPaymentTransactionID,
		})
		_node.PaymentTransactionID = value
	}
	if value, ok := optc.mutation.PaymentFinishAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymenttransfer.FieldPaymentFinishAmount,
		})
		_node.PaymentFinishAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentTransfer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (optc *OrderPaymentTransferCreate) OnConflict(opts ...sql.ConflictOption) *OrderPaymentTransferUpsertOne {
	optc.conflict = opts
	return &OrderPaymentTransferUpsertOne{
		create: optc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (optc *OrderPaymentTransferCreate) OnConflictColumns(columns ...string) *OrderPaymentTransferUpsertOne {
	optc.conflict = append(optc.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentTransferUpsertOne{
		create: optc,
	}
}

type (
	// OrderPaymentTransferUpsertOne is the builder for "upsert"-ing
	//  one OrderPaymentTransfer node.
	OrderPaymentTransferUpsertOne struct {
		create *OrderPaymentTransferCreate
	}

	// OrderPaymentTransferUpsert is the "OnConflict" setter.
	OrderPaymentTransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentTransferUpsert) SetCreatedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateCreatedAt() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentTransferUpsert) AddCreatedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Add(orderpaymenttransfer.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentTransferUpsert) SetUpdatedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateUpdatedAt() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentTransferUpsert) AddUpdatedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Add(orderpaymenttransfer.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentTransferUpsert) SetDeletedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateDeletedAt() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentTransferUpsert) AddDeletedAt(v uint32) *OrderPaymentTransferUpsert {
	u.Add(orderpaymenttransfer.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentTransferUpsert) SetEntID(v uuid.UUID) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateEntID() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentTransferUpsert) SetOrderID(v uuid.UUID) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateOrderID() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentTransferUpsert) ClearOrderID() *OrderPaymentTransferUpsert {
	u.SetNull(orderpaymenttransfer.FieldOrderID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentTransferUpsert) SetCoinTypeID(v uuid.UUID) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateCoinTypeID() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentTransferUpsert) ClearCoinTypeID() *OrderPaymentTransferUpsert {
	u.SetNull(orderpaymenttransfer.FieldCoinTypeID)
	return u
}

// SetStartAmount sets the "start_amount" field.
func (u *OrderPaymentTransferUpsert) SetStartAmount(v decimal.Decimal) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldStartAmount, v)
	return u
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdateStartAmount() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldStartAmount)
	return u
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *OrderPaymentTransferUpsert) ClearStartAmount() *OrderPaymentTransferUpsert {
	u.SetNull(orderpaymenttransfer.FieldStartAmount)
	return u
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsert) SetPaymentTransactionID(v string) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldPaymentTransactionID, v)
	return u
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdatePaymentTransactionID() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldPaymentTransactionID)
	return u
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsert) ClearPaymentTransactionID() *OrderPaymentTransferUpsert {
	u.SetNull(orderpaymenttransfer.FieldPaymentTransactionID)
	return u
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsert) SetPaymentFinishAmount(v decimal.Decimal) *OrderPaymentTransferUpsert {
	u.Set(orderpaymenttransfer.FieldPaymentFinishAmount, v)
	return u
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsert) UpdatePaymentFinishAmount() *OrderPaymentTransferUpsert {
	u.SetExcluded(orderpaymenttransfer.FieldPaymentFinishAmount)
	return u
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsert) ClearPaymentFinishAmount() *OrderPaymentTransferUpsert {
	u.SetNull(orderpaymenttransfer.FieldPaymentFinishAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderPaymentTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymenttransfer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentTransferUpsertOne) UpdateNewValues() *OrderPaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderpaymenttransfer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderPaymentTransfer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderPaymentTransferUpsertOne) Ignore() *OrderPaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentTransferUpsertOne) DoNothing() *OrderPaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentTransferCreate.OnConflict
// documentation for more info.
func (u *OrderPaymentTransferUpsertOne) Update(set func(*OrderPaymentTransferUpsert)) *OrderPaymentTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentTransferUpsertOne) SetCreatedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentTransferUpsertOne) AddCreatedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateCreatedAt() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentTransferUpsertOne) SetUpdatedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentTransferUpsertOne) AddUpdatedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateUpdatedAt() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentTransferUpsertOne) SetDeletedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentTransferUpsertOne) AddDeletedAt(v uint32) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateDeletedAt() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentTransferUpsertOne) SetEntID(v uuid.UUID) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateEntID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentTransferUpsertOne) SetOrderID(v uuid.UUID) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateOrderID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentTransferUpsertOne) ClearOrderID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentTransferUpsertOne) SetCoinTypeID(v uuid.UUID) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateCoinTypeID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentTransferUpsertOne) ClearCoinTypeID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *OrderPaymentTransferUpsertOne) SetStartAmount(v decimal.Decimal) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdateStartAmount() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *OrderPaymentTransferUpsertOne) ClearStartAmount() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearStartAmount()
	})
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsertOne) SetPaymentTransactionID(v string) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetPaymentTransactionID(v)
	})
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdatePaymentTransactionID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdatePaymentTransactionID()
	})
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsertOne) ClearPaymentTransactionID() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearPaymentTransactionID()
	})
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsertOne) SetPaymentFinishAmount(v decimal.Decimal) *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetPaymentFinishAmount(v)
	})
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertOne) UpdatePaymentFinishAmount() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdatePaymentFinishAmount()
	})
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsertOne) ClearPaymentFinishAmount() *OrderPaymentTransferUpsertOne {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearPaymentFinishAmount()
	})
}

// Exec executes the query.
func (u *OrderPaymentTransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentTransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentTransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPaymentTransferUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPaymentTransferUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPaymentTransferCreateBulk is the builder for creating many OrderPaymentTransfer entities in bulk.
type OrderPaymentTransferCreateBulk struct {
	config
	builders []*OrderPaymentTransferCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPaymentTransfer entities in the database.
func (optcb *OrderPaymentTransferCreateBulk) Save(ctx context.Context) ([]*OrderPaymentTransfer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(optcb.builders))
	nodes := make([]*OrderPaymentTransfer, len(optcb.builders))
	mutators := make([]Mutator, len(optcb.builders))
	for i := range optcb.builders {
		func(i int, root context.Context) {
			builder := optcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPaymentTransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, optcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = optcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, optcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, optcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (optcb *OrderPaymentTransferCreateBulk) SaveX(ctx context.Context) []*OrderPaymentTransfer {
	v, err := optcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (optcb *OrderPaymentTransferCreateBulk) Exec(ctx context.Context) error {
	_, err := optcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (optcb *OrderPaymentTransferCreateBulk) ExecX(ctx context.Context) {
	if err := optcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentTransfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (optcb *OrderPaymentTransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPaymentTransferUpsertBulk {
	optcb.conflict = opts
	return &OrderPaymentTransferUpsertBulk{
		create: optcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (optcb *OrderPaymentTransferCreateBulk) OnConflictColumns(columns ...string) *OrderPaymentTransferUpsertBulk {
	optcb.conflict = append(optcb.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentTransferUpsertBulk{
		create: optcb,
	}
}

// OrderPaymentTransferUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPaymentTransfer nodes.
type OrderPaymentTransferUpsertBulk struct {
	create *OrderPaymentTransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPaymentTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymenttransfer.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentTransferUpsertBulk) UpdateNewValues() *OrderPaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderpaymenttransfer.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPaymentTransfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderPaymentTransferUpsertBulk) Ignore() *OrderPaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentTransferUpsertBulk) DoNothing() *OrderPaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentTransferCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPaymentTransferUpsertBulk) Update(set func(*OrderPaymentTransferUpsert)) *OrderPaymentTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentTransferUpsertBulk) SetCreatedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentTransferUpsertBulk) AddCreatedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateCreatedAt() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentTransferUpsertBulk) SetUpdatedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentTransferUpsertBulk) AddUpdatedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateUpdatedAt() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentTransferUpsertBulk) SetDeletedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentTransferUpsertBulk) AddDeletedAt(v uint32) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateDeletedAt() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentTransferUpsertBulk) SetEntID(v uuid.UUID) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateEntID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentTransferUpsertBulk) SetOrderID(v uuid.UUID) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateOrderID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentTransferUpsertBulk) ClearOrderID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentTransferUpsertBulk) SetCoinTypeID(v uuid.UUID) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateCoinTypeID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentTransferUpsertBulk) ClearCoinTypeID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *OrderPaymentTransferUpsertBulk) SetStartAmount(v decimal.Decimal) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdateStartAmount() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *OrderPaymentTransferUpsertBulk) ClearStartAmount() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearStartAmount()
	})
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsertBulk) SetPaymentTransactionID(v string) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetPaymentTransactionID(v)
	})
}

// UpdatePaymentTransactionID sets the "payment_transaction_id" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdatePaymentTransactionID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdatePaymentTransactionID()
	})
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (u *OrderPaymentTransferUpsertBulk) ClearPaymentTransactionID() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearPaymentTransactionID()
	})
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsertBulk) SetPaymentFinishAmount(v decimal.Decimal) *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.SetPaymentFinishAmount(v)
	})
}

// UpdatePaymentFinishAmount sets the "payment_finish_amount" field to the value that was provided on create.
func (u *OrderPaymentTransferUpsertBulk) UpdatePaymentFinishAmount() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.UpdatePaymentFinishAmount()
	})
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (u *OrderPaymentTransferUpsertBulk) ClearPaymentFinishAmount() *OrderPaymentTransferUpsertBulk {
	return u.Update(func(s *OrderPaymentTransferUpsert) {
		s.ClearPaymentFinishAmount()
	})
}

// Exec executes the query.
func (u *OrderPaymentTransferUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPaymentTransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentTransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentTransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
