// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentcontract"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPaymentContractCreate is the builder for creating a OrderPaymentContract entity.
type OrderPaymentContractCreate struct {
	config
	mutation *OrderPaymentContractMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (opcc *OrderPaymentContractCreate) SetCreatedAt(u uint32) *OrderPaymentContractCreate {
	opcc.mutation.SetCreatedAt(u)
	return opcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableCreatedAt(u *uint32) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetCreatedAt(*u)
	}
	return opcc
}

// SetUpdatedAt sets the "updated_at" field.
func (opcc *OrderPaymentContractCreate) SetUpdatedAt(u uint32) *OrderPaymentContractCreate {
	opcc.mutation.SetUpdatedAt(u)
	return opcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableUpdatedAt(u *uint32) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetUpdatedAt(*u)
	}
	return opcc
}

// SetDeletedAt sets the "deleted_at" field.
func (opcc *OrderPaymentContractCreate) SetDeletedAt(u uint32) *OrderPaymentContractCreate {
	opcc.mutation.SetDeletedAt(u)
	return opcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableDeletedAt(u *uint32) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetDeletedAt(*u)
	}
	return opcc
}

// SetEntID sets the "ent_id" field.
func (opcc *OrderPaymentContractCreate) SetEntID(u uuid.UUID) *OrderPaymentContractCreate {
	opcc.mutation.SetEntID(u)
	return opcc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableEntID(u *uuid.UUID) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetEntID(*u)
	}
	return opcc
}

// SetOrderID sets the "order_id" field.
func (opcc *OrderPaymentContractCreate) SetOrderID(u uuid.UUID) *OrderPaymentContractCreate {
	opcc.mutation.SetOrderID(u)
	return opcc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableOrderID(u *uuid.UUID) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetOrderID(*u)
	}
	return opcc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (opcc *OrderPaymentContractCreate) SetCoinTypeID(u uuid.UUID) *OrderPaymentContractCreate {
	opcc.mutation.SetCoinTypeID(u)
	return opcc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableCoinTypeID(u *uuid.UUID) *OrderPaymentContractCreate {
	if u != nil {
		opcc.SetCoinTypeID(*u)
	}
	return opcc
}

// SetAmount sets the "amount" field.
func (opcc *OrderPaymentContractCreate) SetAmount(d decimal.Decimal) *OrderPaymentContractCreate {
	opcc.mutation.SetAmount(d)
	return opcc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opcc *OrderPaymentContractCreate) SetNillableAmount(d *decimal.Decimal) *OrderPaymentContractCreate {
	if d != nil {
		opcc.SetAmount(*d)
	}
	return opcc
}

// SetID sets the "id" field.
func (opcc *OrderPaymentContractCreate) SetID(u uint32) *OrderPaymentContractCreate {
	opcc.mutation.SetID(u)
	return opcc
}

// Mutation returns the OrderPaymentContractMutation object of the builder.
func (opcc *OrderPaymentContractCreate) Mutation() *OrderPaymentContractMutation {
	return opcc.mutation
}

// Save creates the OrderPaymentContract in the database.
func (opcc *OrderPaymentContractCreate) Save(ctx context.Context) (*OrderPaymentContract, error) {
	var (
		err  error
		node *OrderPaymentContract
	)
	if err := opcc.defaults(); err != nil {
		return nil, err
	}
	if len(opcc.hooks) == 0 {
		if err = opcc.check(); err != nil {
			return nil, err
		}
		node, err = opcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opcc.check(); err != nil {
				return nil, err
			}
			opcc.mutation = mutation
			if node, err = opcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(opcc.hooks) - 1; i >= 0; i-- {
			if opcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPaymentContract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPaymentContractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (opcc *OrderPaymentContractCreate) SaveX(ctx context.Context) *OrderPaymentContract {
	v, err := opcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcc *OrderPaymentContractCreate) Exec(ctx context.Context) error {
	_, err := opcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcc *OrderPaymentContractCreate) ExecX(ctx context.Context) {
	if err := opcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opcc *OrderPaymentContractCreate) defaults() error {
	if _, ok := opcc.mutation.CreatedAt(); !ok {
		if orderpaymentcontract.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultCreatedAt()
		opcc.mutation.SetCreatedAt(v)
	}
	if _, ok := opcc.mutation.UpdatedAt(); !ok {
		if orderpaymentcontract.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultUpdatedAt()
		opcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := opcc.mutation.DeletedAt(); !ok {
		if orderpaymentcontract.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultDeletedAt()
		opcc.mutation.SetDeletedAt(v)
	}
	if _, ok := opcc.mutation.EntID(); !ok {
		if orderpaymentcontract.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultEntID()
		opcc.mutation.SetEntID(v)
	}
	if _, ok := opcc.mutation.OrderID(); !ok {
		if orderpaymentcontract.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultOrderID()
		opcc.mutation.SetOrderID(v)
	}
	if _, ok := opcc.mutation.CoinTypeID(); !ok {
		if orderpaymentcontract.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized orderpaymentcontract.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := orderpaymentcontract.DefaultCoinTypeID()
		opcc.mutation.SetCoinTypeID(v)
	}
	if _, ok := opcc.mutation.Amount(); !ok {
		v := orderpaymentcontract.DefaultAmount
		opcc.mutation.SetAmount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opcc *OrderPaymentContractCreate) check() error {
	if _, ok := opcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPaymentContract.created_at"`)}
	}
	if _, ok := opcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPaymentContract.updated_at"`)}
	}
	if _, ok := opcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderPaymentContract.deleted_at"`)}
	}
	if _, ok := opcc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "OrderPaymentContract.ent_id"`)}
	}
	return nil
}

func (opcc *OrderPaymentContractCreate) sqlSave(ctx context.Context) (*OrderPaymentContract, error) {
	_node, _spec := opcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (opcc *OrderPaymentContractCreate) createSpec() (*OrderPaymentContract, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPaymentContract{config: opcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpaymentcontract.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderpaymentcontract.FieldID,
			},
		}
	)
	_spec.OnConflict = opcc.conflict
	if id, ok := opcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := opcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := opcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpaymentcontract.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := opcc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := opcc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := opcc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpaymentcontract.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := opcc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpaymentcontract.FieldAmount,
		})
		_node.Amount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentContract.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opcc *OrderPaymentContractCreate) OnConflict(opts ...sql.ConflictOption) *OrderPaymentContractUpsertOne {
	opcc.conflict = opts
	return &OrderPaymentContractUpsertOne{
		create: opcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opcc *OrderPaymentContractCreate) OnConflictColumns(columns ...string) *OrderPaymentContractUpsertOne {
	opcc.conflict = append(opcc.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentContractUpsertOne{
		create: opcc,
	}
}

type (
	// OrderPaymentContractUpsertOne is the builder for "upsert"-ing
	//  one OrderPaymentContract node.
	OrderPaymentContractUpsertOne struct {
		create *OrderPaymentContractCreate
	}

	// OrderPaymentContractUpsert is the "OnConflict" setter.
	OrderPaymentContractUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentContractUpsert) SetCreatedAt(v uint32) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateCreatedAt() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentContractUpsert) AddCreatedAt(v uint32) *OrderPaymentContractUpsert {
	u.Add(orderpaymentcontract.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentContractUpsert) SetUpdatedAt(v uint32) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateUpdatedAt() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentContractUpsert) AddUpdatedAt(v uint32) *OrderPaymentContractUpsert {
	u.Add(orderpaymentcontract.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentContractUpsert) SetDeletedAt(v uint32) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateDeletedAt() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentContractUpsert) AddDeletedAt(v uint32) *OrderPaymentContractUpsert {
	u.Add(orderpaymentcontract.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentContractUpsert) SetEntID(v uuid.UUID) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateEntID() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentContractUpsert) SetOrderID(v uuid.UUID) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateOrderID() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentContractUpsert) ClearOrderID() *OrderPaymentContractUpsert {
	u.SetNull(orderpaymentcontract.FieldOrderID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentContractUpsert) SetCoinTypeID(v uuid.UUID) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateCoinTypeID() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentContractUpsert) ClearCoinTypeID() *OrderPaymentContractUpsert {
	u.SetNull(orderpaymentcontract.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentContractUpsert) SetAmount(v decimal.Decimal) *OrderPaymentContractUpsert {
	u.Set(orderpaymentcontract.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentContractUpsert) UpdateAmount() *OrderPaymentContractUpsert {
	u.SetExcluded(orderpaymentcontract.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentContractUpsert) ClearAmount() *OrderPaymentContractUpsert {
	u.SetNull(orderpaymentcontract.FieldAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderPaymentContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymentcontract.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentContractUpsertOne) UpdateNewValues() *OrderPaymentContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderpaymentcontract.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderPaymentContract.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderPaymentContractUpsertOne) Ignore() *OrderPaymentContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentContractUpsertOne) DoNothing() *OrderPaymentContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentContractCreate.OnConflict
// documentation for more info.
func (u *OrderPaymentContractUpsertOne) Update(set func(*OrderPaymentContractUpsert)) *OrderPaymentContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentContractUpsertOne) SetCreatedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentContractUpsertOne) AddCreatedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateCreatedAt() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentContractUpsertOne) SetUpdatedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentContractUpsertOne) AddUpdatedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateUpdatedAt() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentContractUpsertOne) SetDeletedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentContractUpsertOne) AddDeletedAt(v uint32) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateDeletedAt() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentContractUpsertOne) SetEntID(v uuid.UUID) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateEntID() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentContractUpsertOne) SetOrderID(v uuid.UUID) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateOrderID() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentContractUpsertOne) ClearOrderID() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentContractUpsertOne) SetCoinTypeID(v uuid.UUID) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateCoinTypeID() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentContractUpsertOne) ClearCoinTypeID() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentContractUpsertOne) SetAmount(v decimal.Decimal) *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertOne) UpdateAmount() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentContractUpsertOne) ClearAmount() *OrderPaymentContractUpsertOne {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearAmount()
	})
}

// Exec executes the query.
func (u *OrderPaymentContractUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentContractCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentContractUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPaymentContractUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPaymentContractUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPaymentContractCreateBulk is the builder for creating many OrderPaymentContract entities in bulk.
type OrderPaymentContractCreateBulk struct {
	config
	builders []*OrderPaymentContractCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPaymentContract entities in the database.
func (opccb *OrderPaymentContractCreateBulk) Save(ctx context.Context) ([]*OrderPaymentContract, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opccb.builders))
	nodes := make([]*OrderPaymentContract, len(opccb.builders))
	mutators := make([]Mutator, len(opccb.builders))
	for i := range opccb.builders {
		func(i int, root context.Context) {
			builder := opccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPaymentContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opccb *OrderPaymentContractCreateBulk) SaveX(ctx context.Context) []*OrderPaymentContract {
	v, err := opccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opccb *OrderPaymentContractCreateBulk) Exec(ctx context.Context) error {
	_, err := opccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opccb *OrderPaymentContractCreateBulk) ExecX(ctx context.Context) {
	if err := opccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPaymentContract.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPaymentContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opccb *OrderPaymentContractCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPaymentContractUpsertBulk {
	opccb.conflict = opts
	return &OrderPaymentContractUpsertBulk{
		create: opccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPaymentContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opccb *OrderPaymentContractCreateBulk) OnConflictColumns(columns ...string) *OrderPaymentContractUpsertBulk {
	opccb.conflict = append(opccb.conflict, sql.ConflictColumns(columns...))
	return &OrderPaymentContractUpsertBulk{
		create: opccb,
	}
}

// OrderPaymentContractUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPaymentContract nodes.
type OrderPaymentContractUpsertBulk struct {
	create *OrderPaymentContractCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPaymentContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpaymentcontract.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPaymentContractUpsertBulk) UpdateNewValues() *OrderPaymentContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderpaymentcontract.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPaymentContract.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderPaymentContractUpsertBulk) Ignore() *OrderPaymentContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPaymentContractUpsertBulk) DoNothing() *OrderPaymentContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPaymentContractCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPaymentContractUpsertBulk) Update(set func(*OrderPaymentContractUpsert)) *OrderPaymentContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPaymentContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPaymentContractUpsertBulk) SetCreatedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPaymentContractUpsertBulk) AddCreatedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateCreatedAt() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPaymentContractUpsertBulk) SetUpdatedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPaymentContractUpsertBulk) AddUpdatedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateUpdatedAt() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPaymentContractUpsertBulk) SetDeletedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPaymentContractUpsertBulk) AddDeletedAt(v uint32) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateDeletedAt() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderPaymentContractUpsertBulk) SetEntID(v uuid.UUID) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateEntID() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPaymentContractUpsertBulk) SetOrderID(v uuid.UUID) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateOrderID() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPaymentContractUpsertBulk) ClearOrderID() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearOrderID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *OrderPaymentContractUpsertBulk) SetCoinTypeID(v uuid.UUID) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateCoinTypeID() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *OrderPaymentContractUpsertBulk) ClearCoinTypeID() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderPaymentContractUpsertBulk) SetAmount(v decimal.Decimal) *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderPaymentContractUpsertBulk) UpdateAmount() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *OrderPaymentContractUpsertBulk) ClearAmount() *OrderPaymentContractUpsertBulk {
	return u.Update(func(s *OrderPaymentContractUpsert) {
		s.ClearAmount()
	})
}

// Exec executes the query.
func (u *OrderPaymentContractUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPaymentContractCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPaymentContractCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPaymentContractUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
