// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/appconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppConfigCreate is the builder for creating a AppConfig entity.
type AppConfigCreate struct {
	config
	mutation *AppConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppConfigCreate) SetCreatedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetCreatedAt(u)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCreatedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetCreatedAt(*u)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppConfigCreate) SetUpdatedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetUpdatedAt(u)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableUpdatedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetUpdatedAt(*u)
	}
	return acc
}

// SetDeletedAt sets the "deleted_at" field.
func (acc *AppConfigCreate) SetDeletedAt(u uint32) *AppConfigCreate {
	acc.mutation.SetDeletedAt(u)
	return acc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableDeletedAt(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetDeletedAt(*u)
	}
	return acc
}

// SetEntID sets the "ent_id" field.
func (acc *AppConfigCreate) SetEntID(u uuid.UUID) *AppConfigCreate {
	acc.mutation.SetEntID(u)
	return acc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableEntID(u *uuid.UUID) *AppConfigCreate {
	if u != nil {
		acc.SetEntID(*u)
	}
	return acc
}

// SetAppID sets the "app_id" field.
func (acc *AppConfigCreate) SetAppID(u uuid.UUID) *AppConfigCreate {
	acc.mutation.SetAppID(u)
	return acc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableAppID(u *uuid.UUID) *AppConfigCreate {
	if u != nil {
		acc.SetAppID(*u)
	}
	return acc
}

// SetEnableSimulateOrder sets the "enable_simulate_order" field.
func (acc *AppConfigCreate) SetEnableSimulateOrder(b bool) *AppConfigCreate {
	acc.mutation.SetEnableSimulateOrder(b)
	return acc
}

// SetNillableEnableSimulateOrder sets the "enable_simulate_order" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableEnableSimulateOrder(b *bool) *AppConfigCreate {
	if b != nil {
		acc.SetEnableSimulateOrder(*b)
	}
	return acc
}

// SetSimulateOrderUnits sets the "simulate_order_units" field.
func (acc *AppConfigCreate) SetSimulateOrderUnits(d decimal.Decimal) *AppConfigCreate {
	acc.mutation.SetSimulateOrderUnits(d)
	return acc
}

// SetNillableSimulateOrderUnits sets the "simulate_order_units" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSimulateOrderUnits(d *decimal.Decimal) *AppConfigCreate {
	if d != nil {
		acc.SetSimulateOrderUnits(*d)
	}
	return acc
}

// SetSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field.
func (acc *AppConfigCreate) SetSimulateOrderCouponMode(s string) *AppConfigCreate {
	acc.mutation.SetSimulateOrderCouponMode(s)
	return acc
}

// SetNillableSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSimulateOrderCouponMode(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetSimulateOrderCouponMode(*s)
	}
	return acc
}

// SetSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field.
func (acc *AppConfigCreate) SetSimulateOrderCouponProbability(d decimal.Decimal) *AppConfigCreate {
	acc.mutation.SetSimulateOrderCouponProbability(d)
	return acc
}

// SetNillableSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSimulateOrderCouponProbability(d *decimal.Decimal) *AppConfigCreate {
	if d != nil {
		acc.SetSimulateOrderCouponProbability(*d)
	}
	return acc
}

// SetSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field.
func (acc *AppConfigCreate) SetSimulateOrderCashableProfitProbability(d decimal.Decimal) *AppConfigCreate {
	acc.mutation.SetSimulateOrderCashableProfitProbability(d)
	return acc
}

// SetNillableSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableSimulateOrderCashableProfitProbability(d *decimal.Decimal) *AppConfigCreate {
	if d != nil {
		acc.SetSimulateOrderCashableProfitProbability(*d)
	}
	return acc
}

// SetMaxUnpaidOrders sets the "max_unpaid_orders" field.
func (acc *AppConfigCreate) SetMaxUnpaidOrders(u uint32) *AppConfigCreate {
	acc.mutation.SetMaxUnpaidOrders(u)
	return acc
}

// SetNillableMaxUnpaidOrders sets the "max_unpaid_orders" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableMaxUnpaidOrders(u *uint32) *AppConfigCreate {
	if u != nil {
		acc.SetMaxUnpaidOrders(*u)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppConfigCreate) SetID(u uint32) *AppConfigCreate {
	acc.mutation.SetID(u)
	return acc
}

// Mutation returns the AppConfigMutation object of the builder.
func (acc *AppConfigCreate) Mutation() *AppConfigMutation {
	return acc.mutation
}

// Save creates the AppConfig in the database.
func (acc *AppConfigCreate) Save(ctx context.Context) (*AppConfig, error) {
	var (
		err  error
		node *AppConfig
	)
	if err := acc.defaults(); err != nil {
		return nil, err
	}
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppConfigCreate) SaveX(ctx context.Context) *AppConfig {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppConfigCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppConfigCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppConfigCreate) defaults() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		if appconfig.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		if appconfig.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		if appconfig.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultDeletedAt()
		acc.mutation.SetDeletedAt(v)
	}
	if _, ok := acc.mutation.EntID(); !ok {
		if appconfig.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultEntID()
		acc.mutation.SetEntID(v)
	}
	if _, ok := acc.mutation.AppID(); !ok {
		if appconfig.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultAppID()
		acc.mutation.SetAppID(v)
	}
	if _, ok := acc.mutation.EnableSimulateOrder(); !ok {
		v := appconfig.DefaultEnableSimulateOrder
		acc.mutation.SetEnableSimulateOrder(v)
	}
	if _, ok := acc.mutation.SimulateOrderUnits(); !ok {
		v := appconfig.DefaultSimulateOrderUnits
		acc.mutation.SetSimulateOrderUnits(v)
	}
	if _, ok := acc.mutation.SimulateOrderCouponMode(); !ok {
		v := appconfig.DefaultSimulateOrderCouponMode
		acc.mutation.SetSimulateOrderCouponMode(v)
	}
	if _, ok := acc.mutation.SimulateOrderCouponProbability(); !ok {
		v := appconfig.DefaultSimulateOrderCouponProbability
		acc.mutation.SetSimulateOrderCouponProbability(v)
	}
	if _, ok := acc.mutation.SimulateOrderCashableProfitProbability(); !ok {
		v := appconfig.DefaultSimulateOrderCashableProfitProbability
		acc.mutation.SetSimulateOrderCashableProfitProbability(v)
	}
	if _, ok := acc.mutation.MaxUnpaidOrders(); !ok {
		v := appconfig.DefaultMaxUnpaidOrders
		acc.mutation.SetMaxUnpaidOrders(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppConfigCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppConfig.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppConfig.updated_at"`)}
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppConfig.deleted_at"`)}
	}
	if _, ok := acc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "AppConfig.ent_id"`)}
	}
	return nil
}

func (acc *AppConfigCreate) sqlSave(ctx context.Context) (*AppConfig, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (acc *AppConfigCreate) createSpec() (*AppConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfig{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appconfig.FieldID,
			},
		}
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appconfig.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := acc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appconfig.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appconfig.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := acc.mutation.EnableSimulateOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appconfig.FieldEnableSimulateOrder,
		})
		_node.EnableSimulateOrder = value
	}
	if value, ok := acc.mutation.SimulateOrderUnits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appconfig.FieldSimulateOrderUnits,
		})
		_node.SimulateOrderUnits = value
	}
	if value, ok := acc.mutation.SimulateOrderCouponMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appconfig.FieldSimulateOrderCouponMode,
		})
		_node.SimulateOrderCouponMode = value
	}
	if value, ok := acc.mutation.SimulateOrderCouponProbability(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appconfig.FieldSimulateOrderCouponProbability,
		})
		_node.SimulateOrderCouponProbability = value
	}
	if value, ok := acc.mutation.SimulateOrderCashableProfitProbability(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appconfig.FieldSimulateOrderCashableProfitProbability,
		})
		_node.SimulateOrderCashableProfitProbability = value
	}
	if value, ok := acc.mutation.MaxUnpaidOrders(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appconfig.FieldMaxUnpaidOrders,
		})
		_node.MaxUnpaidOrders = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acc *AppConfigCreate) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertOne {
	acc.conflict = opts
	return &AppConfigUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acc *AppConfigCreate) OnConflictColumns(columns ...string) *AppConfigUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertOne{
		create: acc,
	}
}

type (
	// AppConfigUpsertOne is the builder for "upsert"-ing
	//  one AppConfig node.
	AppConfigUpsertOne struct {
		create *AppConfigCreate
	}

	// AppConfigUpsert is the "OnConflict" setter.
	AppConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsert) SetCreatedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateCreatedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsert) AddCreatedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsert) SetUpdatedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateUpdatedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsert) AddUpdatedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsert) SetDeletedAt(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateDeletedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsert) AddDeletedAt(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsert) SetEntID(v uuid.UUID) *AppConfigUpsert {
	u.Set(appconfig.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateEntID() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsert) SetAppID(v uuid.UUID) *AppConfigUpsert {
	u.Set(appconfig.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateAppID() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsert) ClearAppID() *AppConfigUpsert {
	u.SetNull(appconfig.FieldAppID)
	return u
}

// SetEnableSimulateOrder sets the "enable_simulate_order" field.
func (u *AppConfigUpsert) SetEnableSimulateOrder(v bool) *AppConfigUpsert {
	u.Set(appconfig.FieldEnableSimulateOrder, v)
	return u
}

// UpdateEnableSimulateOrder sets the "enable_simulate_order" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateEnableSimulateOrder() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldEnableSimulateOrder)
	return u
}

// ClearEnableSimulateOrder clears the value of the "enable_simulate_order" field.
func (u *AppConfigUpsert) ClearEnableSimulateOrder() *AppConfigUpsert {
	u.SetNull(appconfig.FieldEnableSimulateOrder)
	return u
}

// SetSimulateOrderUnits sets the "simulate_order_units" field.
func (u *AppConfigUpsert) SetSimulateOrderUnits(v decimal.Decimal) *AppConfigUpsert {
	u.Set(appconfig.FieldSimulateOrderUnits, v)
	return u
}

// UpdateSimulateOrderUnits sets the "simulate_order_units" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSimulateOrderUnits() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSimulateOrderUnits)
	return u
}

// ClearSimulateOrderUnits clears the value of the "simulate_order_units" field.
func (u *AppConfigUpsert) ClearSimulateOrderUnits() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSimulateOrderUnits)
	return u
}

// SetSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsert) SetSimulateOrderCouponMode(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldSimulateOrderCouponMode, v)
	return u
}

// UpdateSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSimulateOrderCouponMode() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSimulateOrderCouponMode)
	return u
}

// ClearSimulateOrderCouponMode clears the value of the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsert) ClearSimulateOrderCouponMode() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSimulateOrderCouponMode)
	return u
}

// SetSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsert) SetSimulateOrderCouponProbability(v decimal.Decimal) *AppConfigUpsert {
	u.Set(appconfig.FieldSimulateOrderCouponProbability, v)
	return u
}

// UpdateSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSimulateOrderCouponProbability() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSimulateOrderCouponProbability)
	return u
}

// ClearSimulateOrderCouponProbability clears the value of the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsert) ClearSimulateOrderCouponProbability() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSimulateOrderCouponProbability)
	return u
}

// SetSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsert) SetSimulateOrderCashableProfitProbability(v decimal.Decimal) *AppConfigUpsert {
	u.Set(appconfig.FieldSimulateOrderCashableProfitProbability, v)
	return u
}

// UpdateSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSimulateOrderCashableProfitProbability() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSimulateOrderCashableProfitProbability)
	return u
}

// ClearSimulateOrderCashableProfitProbability clears the value of the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsert) ClearSimulateOrderCashableProfitProbability() *AppConfigUpsert {
	u.SetNull(appconfig.FieldSimulateOrderCashableProfitProbability)
	return u
}

// SetMaxUnpaidOrders sets the "max_unpaid_orders" field.
func (u *AppConfigUpsert) SetMaxUnpaidOrders(v uint32) *AppConfigUpsert {
	u.Set(appconfig.FieldMaxUnpaidOrders, v)
	return u
}

// UpdateMaxUnpaidOrders sets the "max_unpaid_orders" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateMaxUnpaidOrders() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldMaxUnpaidOrders)
	return u
}

// AddMaxUnpaidOrders adds v to the "max_unpaid_orders" field.
func (u *AppConfigUpsert) AddMaxUnpaidOrders(v uint32) *AppConfigUpsert {
	u.Add(appconfig.FieldMaxUnpaidOrders, v)
	return u
}

// ClearMaxUnpaidOrders clears the value of the "max_unpaid_orders" field.
func (u *AppConfigUpsert) ClearMaxUnpaidOrders() *AppConfigUpsert {
	u.SetNull(appconfig.FieldMaxUnpaidOrders)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppConfigUpsertOne) UpdateNewValues() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppConfig.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppConfigUpsertOne) Ignore() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertOne) DoNothing() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreate.OnConflict
// documentation for more info.
func (u *AppConfigUpsertOne) Update(set func(*AppConfigUpsert)) *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsertOne) SetCreatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsertOne) AddCreatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateCreatedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertOne) SetUpdatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsertOne) AddUpdatedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateUpdatedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertOne) SetDeletedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsertOne) AddDeletedAt(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateDeletedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsertOne) SetEntID(v uuid.UUID) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateEntID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsertOne) SetAppID(v uuid.UUID) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateAppID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsertOne) ClearAppID() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearAppID()
	})
}

// SetEnableSimulateOrder sets the "enable_simulate_order" field.
func (u *AppConfigUpsertOne) SetEnableSimulateOrder(v bool) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEnableSimulateOrder(v)
	})
}

// UpdateEnableSimulateOrder sets the "enable_simulate_order" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateEnableSimulateOrder() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEnableSimulateOrder()
	})
}

// ClearEnableSimulateOrder clears the value of the "enable_simulate_order" field.
func (u *AppConfigUpsertOne) ClearEnableSimulateOrder() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearEnableSimulateOrder()
	})
}

// SetSimulateOrderUnits sets the "simulate_order_units" field.
func (u *AppConfigUpsertOne) SetSimulateOrderUnits(v decimal.Decimal) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderUnits(v)
	})
}

// UpdateSimulateOrderUnits sets the "simulate_order_units" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSimulateOrderUnits() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderUnits()
	})
}

// ClearSimulateOrderUnits clears the value of the "simulate_order_units" field.
func (u *AppConfigUpsertOne) ClearSimulateOrderUnits() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderUnits()
	})
}

// SetSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsertOne) SetSimulateOrderCouponMode(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCouponMode(v)
	})
}

// UpdateSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSimulateOrderCouponMode() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCouponMode()
	})
}

// ClearSimulateOrderCouponMode clears the value of the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsertOne) ClearSimulateOrderCouponMode() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCouponMode()
	})
}

// SetSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsertOne) SetSimulateOrderCouponProbability(v decimal.Decimal) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCouponProbability(v)
	})
}

// UpdateSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSimulateOrderCouponProbability() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCouponProbability()
	})
}

// ClearSimulateOrderCouponProbability clears the value of the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsertOne) ClearSimulateOrderCouponProbability() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCouponProbability()
	})
}

// SetSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsertOne) SetSimulateOrderCashableProfitProbability(v decimal.Decimal) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCashableProfitProbability(v)
	})
}

// UpdateSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSimulateOrderCashableProfitProbability() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCashableProfitProbability()
	})
}

// ClearSimulateOrderCashableProfitProbability clears the value of the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsertOne) ClearSimulateOrderCashableProfitProbability() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCashableProfitProbability()
	})
}

// SetMaxUnpaidOrders sets the "max_unpaid_orders" field.
func (u *AppConfigUpsertOne) SetMaxUnpaidOrders(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetMaxUnpaidOrders(v)
	})
}

// AddMaxUnpaidOrders adds v to the "max_unpaid_orders" field.
func (u *AppConfigUpsertOne) AddMaxUnpaidOrders(v uint32) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddMaxUnpaidOrders(v)
	})
}

// UpdateMaxUnpaidOrders sets the "max_unpaid_orders" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateMaxUnpaidOrders() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateMaxUnpaidOrders()
	})
}

// ClearMaxUnpaidOrders clears the value of the "max_unpaid_orders" field.
func (u *AppConfigUpsertOne) ClearMaxUnpaidOrders() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearMaxUnpaidOrders()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppConfigUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppConfigUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppConfigCreateBulk is the builder for creating many AppConfig entities in bulk.
type AppConfigCreateBulk struct {
	config
	builders []*AppConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the AppConfig entities in the database.
func (accb *AppConfigCreateBulk) Save(ctx context.Context) ([]*AppConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppConfig, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppConfigCreateBulk) SaveX(ctx context.Context) []*AppConfig {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppConfigCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (accb *AppConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertBulk {
	accb.conflict = opts
	return &AppConfigUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (accb *AppConfigCreateBulk) OnConflictColumns(columns ...string) *AppConfigUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertBulk{
		create: accb,
	}
}

// AppConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of AppConfig nodes.
type AppConfigUpsertBulk struct {
	create *AppConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppConfigUpsertBulk) UpdateNewValues() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appconfig.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppConfigUpsertBulk) Ignore() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertBulk) DoNothing() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreateBulk.OnConflict
// documentation for more info.
func (u *AppConfigUpsertBulk) Update(set func(*AppConfigUpsert)) *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppConfigUpsertBulk) SetCreatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppConfigUpsertBulk) AddCreatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateCreatedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertBulk) SetUpdatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppConfigUpsertBulk) AddUpdatedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateUpdatedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertBulk) SetDeletedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppConfigUpsertBulk) AddDeletedAt(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateDeletedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppConfigUpsertBulk) SetEntID(v uuid.UUID) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateEntID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppConfigUpsertBulk) SetAppID(v uuid.UUID) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateAppID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppConfigUpsertBulk) ClearAppID() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearAppID()
	})
}

// SetEnableSimulateOrder sets the "enable_simulate_order" field.
func (u *AppConfigUpsertBulk) SetEnableSimulateOrder(v bool) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEnableSimulateOrder(v)
	})
}

// UpdateEnableSimulateOrder sets the "enable_simulate_order" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateEnableSimulateOrder() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEnableSimulateOrder()
	})
}

// ClearEnableSimulateOrder clears the value of the "enable_simulate_order" field.
func (u *AppConfigUpsertBulk) ClearEnableSimulateOrder() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearEnableSimulateOrder()
	})
}

// SetSimulateOrderUnits sets the "simulate_order_units" field.
func (u *AppConfigUpsertBulk) SetSimulateOrderUnits(v decimal.Decimal) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderUnits(v)
	})
}

// UpdateSimulateOrderUnits sets the "simulate_order_units" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSimulateOrderUnits() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderUnits()
	})
}

// ClearSimulateOrderUnits clears the value of the "simulate_order_units" field.
func (u *AppConfigUpsertBulk) ClearSimulateOrderUnits() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderUnits()
	})
}

// SetSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsertBulk) SetSimulateOrderCouponMode(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCouponMode(v)
	})
}

// UpdateSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSimulateOrderCouponMode() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCouponMode()
	})
}

// ClearSimulateOrderCouponMode clears the value of the "simulate_order_coupon_mode" field.
func (u *AppConfigUpsertBulk) ClearSimulateOrderCouponMode() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCouponMode()
	})
}

// SetSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsertBulk) SetSimulateOrderCouponProbability(v decimal.Decimal) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCouponProbability(v)
	})
}

// UpdateSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSimulateOrderCouponProbability() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCouponProbability()
	})
}

// ClearSimulateOrderCouponProbability clears the value of the "simulate_order_coupon_probability" field.
func (u *AppConfigUpsertBulk) ClearSimulateOrderCouponProbability() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCouponProbability()
	})
}

// SetSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsertBulk) SetSimulateOrderCashableProfitProbability(v decimal.Decimal) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSimulateOrderCashableProfitProbability(v)
	})
}

// UpdateSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSimulateOrderCashableProfitProbability() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSimulateOrderCashableProfitProbability()
	})
}

// ClearSimulateOrderCashableProfitProbability clears the value of the "simulate_order_cashable_profit_probability" field.
func (u *AppConfigUpsertBulk) ClearSimulateOrderCashableProfitProbability() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearSimulateOrderCashableProfitProbability()
	})
}

// SetMaxUnpaidOrders sets the "max_unpaid_orders" field.
func (u *AppConfigUpsertBulk) SetMaxUnpaidOrders(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetMaxUnpaidOrders(v)
	})
}

// AddMaxUnpaidOrders adds v to the "max_unpaid_orders" field.
func (u *AppConfigUpsertBulk) AddMaxUnpaidOrders(v uint32) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.AddMaxUnpaidOrders(v)
	})
}

// UpdateMaxUnpaidOrders sets the "max_unpaid_orders" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateMaxUnpaidOrders() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateMaxUnpaidOrders()
	})
}

// ClearMaxUnpaidOrders clears the value of the "max_unpaid_orders" field.
func (u *AppConfigUpsertBulk) ClearMaxUnpaidOrders() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearMaxUnpaidOrders()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
