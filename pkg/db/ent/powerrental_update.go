// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PowerRentalUpdate is the builder for updating PowerRental entities.
type PowerRentalUpdate struct {
	config
	hooks     []Hook
	mutation  *PowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PowerRentalUpdate builder.
func (pru *PowerRentalUpdate) Where(ps ...predicate.PowerRental) *PowerRentalUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PowerRentalUpdate) SetCreatedAt(u uint32) *PowerRentalUpdate {
	pru.mutation.ResetCreatedAt()
	pru.mutation.SetCreatedAt(u)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableCreatedAt(u *uint32) *PowerRentalUpdate {
	if u != nil {
		pru.SetCreatedAt(*u)
	}
	return pru
}

// AddCreatedAt adds u to the "created_at" field.
func (pru *PowerRentalUpdate) AddCreatedAt(u int32) *PowerRentalUpdate {
	pru.mutation.AddCreatedAt(u)
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PowerRentalUpdate) SetUpdatedAt(u uint32) *PowerRentalUpdate {
	pru.mutation.ResetUpdatedAt()
	pru.mutation.SetUpdatedAt(u)
	return pru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pru *PowerRentalUpdate) AddUpdatedAt(u int32) *PowerRentalUpdate {
	pru.mutation.AddUpdatedAt(u)
	return pru
}

// SetDeletedAt sets the "deleted_at" field.
func (pru *PowerRentalUpdate) SetDeletedAt(u uint32) *PowerRentalUpdate {
	pru.mutation.ResetDeletedAt()
	pru.mutation.SetDeletedAt(u)
	return pru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableDeletedAt(u *uint32) *PowerRentalUpdate {
	if u != nil {
		pru.SetDeletedAt(*u)
	}
	return pru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pru *PowerRentalUpdate) AddDeletedAt(u int32) *PowerRentalUpdate {
	pru.mutation.AddDeletedAt(u)
	return pru
}

// SetEntID sets the "ent_id" field.
func (pru *PowerRentalUpdate) SetEntID(u uuid.UUID) *PowerRentalUpdate {
	pru.mutation.SetEntID(u)
	return pru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableEntID(u *uuid.UUID) *PowerRentalUpdate {
	if u != nil {
		pru.SetEntID(*u)
	}
	return pru
}

// SetOrderID sets the "order_id" field.
func (pru *PowerRentalUpdate) SetOrderID(u uuid.UUID) *PowerRentalUpdate {
	pru.mutation.SetOrderID(u)
	return pru
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableOrderID(u *uuid.UUID) *PowerRentalUpdate {
	if u != nil {
		pru.SetOrderID(*u)
	}
	return pru
}

// ClearOrderID clears the value of the "order_id" field.
func (pru *PowerRentalUpdate) ClearOrderID() *PowerRentalUpdate {
	pru.mutation.ClearOrderID()
	return pru
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (pru *PowerRentalUpdate) SetAppGoodStockID(u uuid.UUID) *PowerRentalUpdate {
	pru.mutation.SetAppGoodStockID(u)
	return pru
}

// SetNillableAppGoodStockID sets the "app_good_stock_id" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableAppGoodStockID(u *uuid.UUID) *PowerRentalUpdate {
	if u != nil {
		pru.SetAppGoodStockID(*u)
	}
	return pru
}

// ClearAppGoodStockID clears the value of the "app_good_stock_id" field.
func (pru *PowerRentalUpdate) ClearAppGoodStockID() *PowerRentalUpdate {
	pru.mutation.ClearAppGoodStockID()
	return pru
}

// SetUnits sets the "units" field.
func (pru *PowerRentalUpdate) SetUnits(d decimal.Decimal) *PowerRentalUpdate {
	pru.mutation.SetUnits(d)
	return pru
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableUnits(d *decimal.Decimal) *PowerRentalUpdate {
	if d != nil {
		pru.SetUnits(*d)
	}
	return pru
}

// ClearUnits clears the value of the "units" field.
func (pru *PowerRentalUpdate) ClearUnits() *PowerRentalUpdate {
	pru.mutation.ClearUnits()
	return pru
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (pru *PowerRentalUpdate) SetGoodValueUsd(d decimal.Decimal) *PowerRentalUpdate {
	pru.mutation.SetGoodValueUsd(d)
	return pru
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableGoodValueUsd(d *decimal.Decimal) *PowerRentalUpdate {
	if d != nil {
		pru.SetGoodValueUsd(*d)
	}
	return pru
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (pru *PowerRentalUpdate) ClearGoodValueUsd() *PowerRentalUpdate {
	pru.mutation.ClearGoodValueUsd()
	return pru
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (pru *PowerRentalUpdate) SetPaymentAmountUsd(d decimal.Decimal) *PowerRentalUpdate {
	pru.mutation.SetPaymentAmountUsd(d)
	return pru
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillablePaymentAmountUsd(d *decimal.Decimal) *PowerRentalUpdate {
	if d != nil {
		pru.SetPaymentAmountUsd(*d)
	}
	return pru
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (pru *PowerRentalUpdate) ClearPaymentAmountUsd() *PowerRentalUpdate {
	pru.mutation.ClearPaymentAmountUsd()
	return pru
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (pru *PowerRentalUpdate) SetDiscountAmountUsd(d decimal.Decimal) *PowerRentalUpdate {
	pru.mutation.SetDiscountAmountUsd(d)
	return pru
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableDiscountAmountUsd(d *decimal.Decimal) *PowerRentalUpdate {
	if d != nil {
		pru.SetDiscountAmountUsd(*d)
	}
	return pru
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (pru *PowerRentalUpdate) ClearDiscountAmountUsd() *PowerRentalUpdate {
	pru.mutation.ClearDiscountAmountUsd()
	return pru
}

// SetPromotionID sets the "promotion_id" field.
func (pru *PowerRentalUpdate) SetPromotionID(u uuid.UUID) *PowerRentalUpdate {
	pru.mutation.SetPromotionID(u)
	return pru
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillablePromotionID(u *uuid.UUID) *PowerRentalUpdate {
	if u != nil {
		pru.SetPromotionID(*u)
	}
	return pru
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (pru *PowerRentalUpdate) ClearPromotionID() *PowerRentalUpdate {
	pru.mutation.ClearPromotionID()
	return pru
}

// SetInvestmentType sets the "investment_type" field.
func (pru *PowerRentalUpdate) SetInvestmentType(s string) *PowerRentalUpdate {
	pru.mutation.SetInvestmentType(s)
	return pru
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableInvestmentType(s *string) *PowerRentalUpdate {
	if s != nil {
		pru.SetInvestmentType(*s)
	}
	return pru
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (pru *PowerRentalUpdate) ClearInvestmentType() *PowerRentalUpdate {
	pru.mutation.ClearInvestmentType()
	return pru
}

// SetGoodStockMode sets the "good_stock_mode" field.
func (pru *PowerRentalUpdate) SetGoodStockMode(s string) *PowerRentalUpdate {
	pru.mutation.SetGoodStockMode(s)
	return pru
}

// SetNillableGoodStockMode sets the "good_stock_mode" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableGoodStockMode(s *string) *PowerRentalUpdate {
	if s != nil {
		pru.SetGoodStockMode(*s)
	}
	return pru
}

// ClearGoodStockMode clears the value of the "good_stock_mode" field.
func (pru *PowerRentalUpdate) ClearGoodStockMode() *PowerRentalUpdate {
	pru.mutation.ClearGoodStockMode()
	return pru
}

// SetDurationSeconds sets the "duration_seconds" field.
func (pru *PowerRentalUpdate) SetDurationSeconds(u uint32) *PowerRentalUpdate {
	pru.mutation.ResetDurationSeconds()
	pru.mutation.SetDurationSeconds(u)
	return pru
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (pru *PowerRentalUpdate) SetNillableDurationSeconds(u *uint32) *PowerRentalUpdate {
	if u != nil {
		pru.SetDurationSeconds(*u)
	}
	return pru
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (pru *PowerRentalUpdate) AddDurationSeconds(u int32) *PowerRentalUpdate {
	pru.mutation.AddDurationSeconds(u)
	return pru
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (pru *PowerRentalUpdate) ClearDurationSeconds() *PowerRentalUpdate {
	pru.mutation.ClearDurationSeconds()
	return pru
}

// Mutation returns the PowerRentalMutation object of the builder.
func (pru *PowerRentalUpdate) Mutation() *PowerRentalMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PowerRentalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pru.defaults(); err != nil {
		return 0, err
	}
	if len(pru.hooks) == 0 {
		affected, err = pru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pru.mutation = mutation
			affected, err = pru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pru.hooks) - 1; i >= 0; i-- {
			if pru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PowerRentalUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PowerRentalUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PowerRentalUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PowerRentalUpdate) defaults() error {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		if powerrental.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrental.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrental.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pru *PowerRentalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PowerRentalUpdate {
	pru.modifiers = append(pru.modifiers, modifiers...)
	return pru
}

func (pru *PowerRentalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   powerrental.Table,
			Columns: powerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrental.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldCreatedAt,
		})
	}
	if value, ok := pru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldCreatedAt,
		})
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldUpdatedAt,
		})
	}
	if value, ok := pru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldUpdatedAt,
		})
	}
	if value, ok := pru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDeletedAt,
		})
	}
	if value, ok := pru.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDeletedAt,
		})
	}
	if value, ok := pru.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldEntID,
		})
	}
	if value, ok := pru.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldOrderID,
		})
	}
	if pru.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldOrderID,
		})
	}
	if value, ok := pru.mutation.AppGoodStockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldAppGoodStockID,
		})
	}
	if pru.mutation.AppGoodStockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldAppGoodStockID,
		})
	}
	if value, ok := pru.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldUnits,
		})
	}
	if pru.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldUnits,
		})
	}
	if value, ok := pru.mutation.GoodValueUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldGoodValueUsd,
		})
	}
	if pru.mutation.GoodValueUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldGoodValueUsd,
		})
	}
	if value, ok := pru.mutation.PaymentAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldPaymentAmountUsd,
		})
	}
	if pru.mutation.PaymentAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldPaymentAmountUsd,
		})
	}
	if value, ok := pru.mutation.DiscountAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldDiscountAmountUsd,
		})
	}
	if pru.mutation.DiscountAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldDiscountAmountUsd,
		})
	}
	if value, ok := pru.mutation.PromotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldPromotionID,
		})
	}
	if pru.mutation.PromotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldPromotionID,
		})
	}
	if value, ok := pru.mutation.InvestmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrental.FieldInvestmentType,
		})
	}
	if pru.mutation.InvestmentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrental.FieldInvestmentType,
		})
	}
	if value, ok := pru.mutation.GoodStockMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrental.FieldGoodStockMode,
		})
	}
	if pru.mutation.GoodStockModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrental.FieldGoodStockMode,
		})
	}
	if value, ok := pru.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	if value, ok := pru.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	if pru.mutation.DurationSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	_spec.Modifiers = pru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PowerRentalUpdateOne is the builder for updating a single PowerRental entity.
type PowerRentalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PowerRentalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PowerRentalUpdateOne) SetCreatedAt(u uint32) *PowerRentalUpdateOne {
	pruo.mutation.ResetCreatedAt()
	pruo.mutation.SetCreatedAt(u)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableCreatedAt(u *uint32) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetCreatedAt(*u)
	}
	return pruo
}

// AddCreatedAt adds u to the "created_at" field.
func (pruo *PowerRentalUpdateOne) AddCreatedAt(u int32) *PowerRentalUpdateOne {
	pruo.mutation.AddCreatedAt(u)
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PowerRentalUpdateOne) SetUpdatedAt(u uint32) *PowerRentalUpdateOne {
	pruo.mutation.ResetUpdatedAt()
	pruo.mutation.SetUpdatedAt(u)
	return pruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pruo *PowerRentalUpdateOne) AddUpdatedAt(u int32) *PowerRentalUpdateOne {
	pruo.mutation.AddUpdatedAt(u)
	return pruo
}

// SetDeletedAt sets the "deleted_at" field.
func (pruo *PowerRentalUpdateOne) SetDeletedAt(u uint32) *PowerRentalUpdateOne {
	pruo.mutation.ResetDeletedAt()
	pruo.mutation.SetDeletedAt(u)
	return pruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableDeletedAt(u *uint32) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetDeletedAt(*u)
	}
	return pruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pruo *PowerRentalUpdateOne) AddDeletedAt(u int32) *PowerRentalUpdateOne {
	pruo.mutation.AddDeletedAt(u)
	return pruo
}

// SetEntID sets the "ent_id" field.
func (pruo *PowerRentalUpdateOne) SetEntID(u uuid.UUID) *PowerRentalUpdateOne {
	pruo.mutation.SetEntID(u)
	return pruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableEntID(u *uuid.UUID) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetEntID(*u)
	}
	return pruo
}

// SetOrderID sets the "order_id" field.
func (pruo *PowerRentalUpdateOne) SetOrderID(u uuid.UUID) *PowerRentalUpdateOne {
	pruo.mutation.SetOrderID(u)
	return pruo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableOrderID(u *uuid.UUID) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetOrderID(*u)
	}
	return pruo
}

// ClearOrderID clears the value of the "order_id" field.
func (pruo *PowerRentalUpdateOne) ClearOrderID() *PowerRentalUpdateOne {
	pruo.mutation.ClearOrderID()
	return pruo
}

// SetAppGoodStockID sets the "app_good_stock_id" field.
func (pruo *PowerRentalUpdateOne) SetAppGoodStockID(u uuid.UUID) *PowerRentalUpdateOne {
	pruo.mutation.SetAppGoodStockID(u)
	return pruo
}

// SetNillableAppGoodStockID sets the "app_good_stock_id" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableAppGoodStockID(u *uuid.UUID) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetAppGoodStockID(*u)
	}
	return pruo
}

// ClearAppGoodStockID clears the value of the "app_good_stock_id" field.
func (pruo *PowerRentalUpdateOne) ClearAppGoodStockID() *PowerRentalUpdateOne {
	pruo.mutation.ClearAppGoodStockID()
	return pruo
}

// SetUnits sets the "units" field.
func (pruo *PowerRentalUpdateOne) SetUnits(d decimal.Decimal) *PowerRentalUpdateOne {
	pruo.mutation.SetUnits(d)
	return pruo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableUnits(d *decimal.Decimal) *PowerRentalUpdateOne {
	if d != nil {
		pruo.SetUnits(*d)
	}
	return pruo
}

// ClearUnits clears the value of the "units" field.
func (pruo *PowerRentalUpdateOne) ClearUnits() *PowerRentalUpdateOne {
	pruo.mutation.ClearUnits()
	return pruo
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (pruo *PowerRentalUpdateOne) SetGoodValueUsd(d decimal.Decimal) *PowerRentalUpdateOne {
	pruo.mutation.SetGoodValueUsd(d)
	return pruo
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableGoodValueUsd(d *decimal.Decimal) *PowerRentalUpdateOne {
	if d != nil {
		pruo.SetGoodValueUsd(*d)
	}
	return pruo
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (pruo *PowerRentalUpdateOne) ClearGoodValueUsd() *PowerRentalUpdateOne {
	pruo.mutation.ClearGoodValueUsd()
	return pruo
}

// SetPaymentAmountUsd sets the "payment_amount_usd" field.
func (pruo *PowerRentalUpdateOne) SetPaymentAmountUsd(d decimal.Decimal) *PowerRentalUpdateOne {
	pruo.mutation.SetPaymentAmountUsd(d)
	return pruo
}

// SetNillablePaymentAmountUsd sets the "payment_amount_usd" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillablePaymentAmountUsd(d *decimal.Decimal) *PowerRentalUpdateOne {
	if d != nil {
		pruo.SetPaymentAmountUsd(*d)
	}
	return pruo
}

// ClearPaymentAmountUsd clears the value of the "payment_amount_usd" field.
func (pruo *PowerRentalUpdateOne) ClearPaymentAmountUsd() *PowerRentalUpdateOne {
	pruo.mutation.ClearPaymentAmountUsd()
	return pruo
}

// SetDiscountAmountUsd sets the "discount_amount_usd" field.
func (pruo *PowerRentalUpdateOne) SetDiscountAmountUsd(d decimal.Decimal) *PowerRentalUpdateOne {
	pruo.mutation.SetDiscountAmountUsd(d)
	return pruo
}

// SetNillableDiscountAmountUsd sets the "discount_amount_usd" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableDiscountAmountUsd(d *decimal.Decimal) *PowerRentalUpdateOne {
	if d != nil {
		pruo.SetDiscountAmountUsd(*d)
	}
	return pruo
}

// ClearDiscountAmountUsd clears the value of the "discount_amount_usd" field.
func (pruo *PowerRentalUpdateOne) ClearDiscountAmountUsd() *PowerRentalUpdateOne {
	pruo.mutation.ClearDiscountAmountUsd()
	return pruo
}

// SetPromotionID sets the "promotion_id" field.
func (pruo *PowerRentalUpdateOne) SetPromotionID(u uuid.UUID) *PowerRentalUpdateOne {
	pruo.mutation.SetPromotionID(u)
	return pruo
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillablePromotionID(u *uuid.UUID) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetPromotionID(*u)
	}
	return pruo
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (pruo *PowerRentalUpdateOne) ClearPromotionID() *PowerRentalUpdateOne {
	pruo.mutation.ClearPromotionID()
	return pruo
}

// SetInvestmentType sets the "investment_type" field.
func (pruo *PowerRentalUpdateOne) SetInvestmentType(s string) *PowerRentalUpdateOne {
	pruo.mutation.SetInvestmentType(s)
	return pruo
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableInvestmentType(s *string) *PowerRentalUpdateOne {
	if s != nil {
		pruo.SetInvestmentType(*s)
	}
	return pruo
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (pruo *PowerRentalUpdateOne) ClearInvestmentType() *PowerRentalUpdateOne {
	pruo.mutation.ClearInvestmentType()
	return pruo
}

// SetGoodStockMode sets the "good_stock_mode" field.
func (pruo *PowerRentalUpdateOne) SetGoodStockMode(s string) *PowerRentalUpdateOne {
	pruo.mutation.SetGoodStockMode(s)
	return pruo
}

// SetNillableGoodStockMode sets the "good_stock_mode" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableGoodStockMode(s *string) *PowerRentalUpdateOne {
	if s != nil {
		pruo.SetGoodStockMode(*s)
	}
	return pruo
}

// ClearGoodStockMode clears the value of the "good_stock_mode" field.
func (pruo *PowerRentalUpdateOne) ClearGoodStockMode() *PowerRentalUpdateOne {
	pruo.mutation.ClearGoodStockMode()
	return pruo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (pruo *PowerRentalUpdateOne) SetDurationSeconds(u uint32) *PowerRentalUpdateOne {
	pruo.mutation.ResetDurationSeconds()
	pruo.mutation.SetDurationSeconds(u)
	return pruo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (pruo *PowerRentalUpdateOne) SetNillableDurationSeconds(u *uint32) *PowerRentalUpdateOne {
	if u != nil {
		pruo.SetDurationSeconds(*u)
	}
	return pruo
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (pruo *PowerRentalUpdateOne) AddDurationSeconds(u int32) *PowerRentalUpdateOne {
	pruo.mutation.AddDurationSeconds(u)
	return pruo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (pruo *PowerRentalUpdateOne) ClearDurationSeconds() *PowerRentalUpdateOne {
	pruo.mutation.ClearDurationSeconds()
	return pruo
}

// Mutation returns the PowerRentalMutation object of the builder.
func (pruo *PowerRentalUpdateOne) Mutation() *PowerRentalMutation {
	return pruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PowerRentalUpdateOne) Select(field string, fields ...string) *PowerRentalUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PowerRental entity.
func (pruo *PowerRentalUpdateOne) Save(ctx context.Context) (*PowerRental, error) {
	var (
		err  error
		node *PowerRental
	)
	if err := pruo.defaults(); err != nil {
		return nil, err
	}
	if len(pruo.hooks) == 0 {
		node, err = pruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PowerRentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pruo.mutation = mutation
			node, err = pruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pruo.hooks) - 1; i >= 0; i-- {
			if pruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PowerRental)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PowerRentalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PowerRentalUpdateOne) SaveX(ctx context.Context) *PowerRental {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PowerRentalUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PowerRentalUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PowerRentalUpdateOne) defaults() error {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		if powerrental.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized powerrental.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := powerrental.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pruo *PowerRentalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PowerRentalUpdateOne {
	pruo.modifiers = append(pruo.modifiers, modifiers...)
	return pruo
}

func (pruo *PowerRentalUpdateOne) sqlSave(ctx context.Context) (_node *PowerRental, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   powerrental.Table,
			Columns: powerrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: powerrental.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PowerRental.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, powerrental.FieldID)
		for _, f := range fields {
			if !powerrental.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != powerrental.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldCreatedAt,
		})
	}
	if value, ok := pruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldCreatedAt,
		})
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldUpdatedAt,
		})
	}
	if value, ok := pruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldUpdatedAt,
		})
	}
	if value, ok := pruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDeletedAt,
		})
	}
	if value, ok := pruo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDeletedAt,
		})
	}
	if value, ok := pruo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldEntID,
		})
	}
	if value, ok := pruo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldOrderID,
		})
	}
	if pruo.mutation.OrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldOrderID,
		})
	}
	if value, ok := pruo.mutation.AppGoodStockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldAppGoodStockID,
		})
	}
	if pruo.mutation.AppGoodStockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldAppGoodStockID,
		})
	}
	if value, ok := pruo.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldUnits,
		})
	}
	if pruo.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldUnits,
		})
	}
	if value, ok := pruo.mutation.GoodValueUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldGoodValueUsd,
		})
	}
	if pruo.mutation.GoodValueUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldGoodValueUsd,
		})
	}
	if value, ok := pruo.mutation.PaymentAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldPaymentAmountUsd,
		})
	}
	if pruo.mutation.PaymentAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldPaymentAmountUsd,
		})
	}
	if value, ok := pruo.mutation.DiscountAmountUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: powerrental.FieldDiscountAmountUsd,
		})
	}
	if pruo.mutation.DiscountAmountUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: powerrental.FieldDiscountAmountUsd,
		})
	}
	if value, ok := pruo.mutation.PromotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: powerrental.FieldPromotionID,
		})
	}
	if pruo.mutation.PromotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: powerrental.FieldPromotionID,
		})
	}
	if value, ok := pruo.mutation.InvestmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrental.FieldInvestmentType,
		})
	}
	if pruo.mutation.InvestmentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrental.FieldInvestmentType,
		})
	}
	if value, ok := pruo.mutation.GoodStockMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: powerrental.FieldGoodStockMode,
		})
	}
	if pruo.mutation.GoodStockModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: powerrental.FieldGoodStockMode,
		})
	}
	if value, ok := pruo.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	if value, ok := pruo.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	if pruo.mutation.DurationSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: powerrental.FieldDurationSeconds,
		})
	}
	_spec.Modifiers = pruo.modifiers
	_node = &PowerRental{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{powerrental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
