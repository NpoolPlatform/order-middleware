// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/google/uuid"
)

// OrderLock is the model entity for the OrderLock schema.
type OrderLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// LockType holds the value of the "lock_type" field.
	LockType string `json:"lock_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderLock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderlock.FieldID, orderlock.FieldCreatedAt, orderlock.FieldUpdatedAt, orderlock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case orderlock.FieldLockType:
			values[i] = new(sql.NullString)
		case orderlock.FieldEntID, orderlock.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderLock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderLock fields.
func (ol *OrderLock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderlock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ol.ID = uint32(value.Int64)
		case orderlock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ol.CreatedAt = uint32(value.Int64)
			}
		case orderlock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ol.UpdatedAt = uint32(value.Int64)
			}
		case orderlock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ol.DeletedAt = uint32(value.Int64)
			}
		case orderlock.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ol.EntID = *value
			}
		case orderlock.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				ol.OrderID = *value
			}
		case orderlock.FieldLockType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lock_type", values[i])
			} else if value.Valid {
				ol.LockType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderLock.
// Note that you need to call OrderLock.Unwrap() before calling this method if this OrderLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OrderLock) Update() *OrderLockUpdateOne {
	return (&OrderLockClient{config: ol.config}).UpdateOne(ol)
}

// Unwrap unwraps the OrderLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OrderLock) Unwrap() *OrderLock {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderLock is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OrderLock) String() string {
	var builder strings.Builder
	builder.WriteString("OrderLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ol.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ol.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ol.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.EntID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.OrderID))
	builder.WriteString(", ")
	builder.WriteString("lock_type=")
	builder.WriteString(ol.LockType)
	builder.WriteByte(')')
	return builder.String()
}

// OrderLocks is a parsable slice of OrderLock.
type OrderLocks []*OrderLock

func (ol OrderLocks) config(cfg config) {
	for _i := range ol {
		ol[_i].config = cfg
	}
}
