// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstatebase"
	"github.com/google/uuid"
)

// OrderStateBaseCreate is the builder for creating a OrderStateBase entity.
type OrderStateBaseCreate struct {
	config
	mutation *OrderStateBaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (osbc *OrderStateBaseCreate) SetCreatedAt(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetCreatedAt(u)
	return osbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableCreatedAt(u *uint32) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetCreatedAt(*u)
	}
	return osbc
}

// SetUpdatedAt sets the "updated_at" field.
func (osbc *OrderStateBaseCreate) SetUpdatedAt(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetUpdatedAt(u)
	return osbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableUpdatedAt(u *uint32) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetUpdatedAt(*u)
	}
	return osbc
}

// SetDeletedAt sets the "deleted_at" field.
func (osbc *OrderStateBaseCreate) SetDeletedAt(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetDeletedAt(u)
	return osbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableDeletedAt(u *uint32) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetDeletedAt(*u)
	}
	return osbc
}

// SetEntID sets the "ent_id" field.
func (osbc *OrderStateBaseCreate) SetEntID(u uuid.UUID) *OrderStateBaseCreate {
	osbc.mutation.SetEntID(u)
	return osbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableEntID(u *uuid.UUID) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetEntID(*u)
	}
	return osbc
}

// SetOrderID sets the "order_id" field.
func (osbc *OrderStateBaseCreate) SetOrderID(u uuid.UUID) *OrderStateBaseCreate {
	osbc.mutation.SetOrderID(u)
	return osbc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableOrderID(u *uuid.UUID) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetOrderID(*u)
	}
	return osbc
}

// SetOrderState sets the "order_state" field.
func (osbc *OrderStateBaseCreate) SetOrderState(s string) *OrderStateBaseCreate {
	osbc.mutation.SetOrderState(s)
	return osbc
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableOrderState(s *string) *OrderStateBaseCreate {
	if s != nil {
		osbc.SetOrderState(*s)
	}
	return osbc
}

// SetStartMode sets the "start_mode" field.
func (osbc *OrderStateBaseCreate) SetStartMode(s string) *OrderStateBaseCreate {
	osbc.mutation.SetStartMode(s)
	return osbc
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableStartMode(s *string) *OrderStateBaseCreate {
	if s != nil {
		osbc.SetStartMode(*s)
	}
	return osbc
}

// SetStartAt sets the "start_at" field.
func (osbc *OrderStateBaseCreate) SetStartAt(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetStartAt(u)
	return osbc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableStartAt(u *uint32) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetStartAt(*u)
	}
	return osbc
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (osbc *OrderStateBaseCreate) SetLastBenefitAt(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetLastBenefitAt(u)
	return osbc
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableLastBenefitAt(u *uint32) *OrderStateBaseCreate {
	if u != nil {
		osbc.SetLastBenefitAt(*u)
	}
	return osbc
}

// SetBenefitState sets the "benefit_state" field.
func (osbc *OrderStateBaseCreate) SetBenefitState(s string) *OrderStateBaseCreate {
	osbc.mutation.SetBenefitState(s)
	return osbc
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillableBenefitState(s *string) *OrderStateBaseCreate {
	if s != nil {
		osbc.SetBenefitState(*s)
	}
	return osbc
}

// SetPaymentType sets the "payment_type" field.
func (osbc *OrderStateBaseCreate) SetPaymentType(s string) *OrderStateBaseCreate {
	osbc.mutation.SetPaymentType(s)
	return osbc
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (osbc *OrderStateBaseCreate) SetNillablePaymentType(s *string) *OrderStateBaseCreate {
	if s != nil {
		osbc.SetPaymentType(*s)
	}
	return osbc
}

// SetID sets the "id" field.
func (osbc *OrderStateBaseCreate) SetID(u uint32) *OrderStateBaseCreate {
	osbc.mutation.SetID(u)
	return osbc
}

// Mutation returns the OrderStateBaseMutation object of the builder.
func (osbc *OrderStateBaseCreate) Mutation() *OrderStateBaseMutation {
	return osbc.mutation
}

// Save creates the OrderStateBase in the database.
func (osbc *OrderStateBaseCreate) Save(ctx context.Context) (*OrderStateBase, error) {
	var (
		err  error
		node *OrderStateBase
	)
	if err := osbc.defaults(); err != nil {
		return nil, err
	}
	if len(osbc.hooks) == 0 {
		if err = osbc.check(); err != nil {
			return nil, err
		}
		node, err = osbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderStateBaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osbc.check(); err != nil {
				return nil, err
			}
			osbc.mutation = mutation
			if node, err = osbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osbc.hooks) - 1; i >= 0; i-- {
			if osbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, osbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderStateBase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderStateBaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osbc *OrderStateBaseCreate) SaveX(ctx context.Context) *OrderStateBase {
	v, err := osbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osbc *OrderStateBaseCreate) Exec(ctx context.Context) error {
	_, err := osbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osbc *OrderStateBaseCreate) ExecX(ctx context.Context) {
	if err := osbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osbc *OrderStateBaseCreate) defaults() error {
	if _, ok := osbc.mutation.CreatedAt(); !ok {
		if orderstatebase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstatebase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderstatebase.DefaultCreatedAt()
		osbc.mutation.SetCreatedAt(v)
	}
	if _, ok := osbc.mutation.UpdatedAt(); !ok {
		if orderstatebase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstatebase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderstatebase.DefaultUpdatedAt()
		osbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osbc.mutation.DeletedAt(); !ok {
		if orderstatebase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderstatebase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderstatebase.DefaultDeletedAt()
		osbc.mutation.SetDeletedAt(v)
	}
	if _, ok := osbc.mutation.EntID(); !ok {
		if orderstatebase.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized orderstatebase.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := orderstatebase.DefaultEntID()
		osbc.mutation.SetEntID(v)
	}
	if _, ok := osbc.mutation.OrderID(); !ok {
		if orderstatebase.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized orderstatebase.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := orderstatebase.DefaultOrderID()
		osbc.mutation.SetOrderID(v)
	}
	if _, ok := osbc.mutation.OrderState(); !ok {
		v := orderstatebase.DefaultOrderState
		osbc.mutation.SetOrderState(v)
	}
	if _, ok := osbc.mutation.StartMode(); !ok {
		v := orderstatebase.DefaultStartMode
		osbc.mutation.SetStartMode(v)
	}
	if _, ok := osbc.mutation.StartAt(); !ok {
		v := orderstatebase.DefaultStartAt
		osbc.mutation.SetStartAt(v)
	}
	if _, ok := osbc.mutation.LastBenefitAt(); !ok {
		v := orderstatebase.DefaultLastBenefitAt
		osbc.mutation.SetLastBenefitAt(v)
	}
	if _, ok := osbc.mutation.BenefitState(); !ok {
		v := orderstatebase.DefaultBenefitState
		osbc.mutation.SetBenefitState(v)
	}
	if _, ok := osbc.mutation.PaymentType(); !ok {
		v := orderstatebase.DefaultPaymentType
		osbc.mutation.SetPaymentType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osbc *OrderStateBaseCreate) check() error {
	if _, ok := osbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderStateBase.created_at"`)}
	}
	if _, ok := osbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderStateBase.updated_at"`)}
	}
	if _, ok := osbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderStateBase.deleted_at"`)}
	}
	if _, ok := osbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "OrderStateBase.ent_id"`)}
	}
	return nil
}

func (osbc *OrderStateBaseCreate) sqlSave(ctx context.Context) (*OrderStateBase, error) {
	_node, _spec := osbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (osbc *OrderStateBaseCreate) createSpec() (*OrderStateBase, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderStateBase{config: osbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderstatebase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderstatebase.FieldID,
			},
		}
	)
	_spec.OnConflict = osbc.conflict
	if id, ok := osbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstatebase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := osbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstatebase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := osbc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstatebase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := osbc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderstatebase.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := osbc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderstatebase.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := osbc.mutation.OrderState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstatebase.FieldOrderState,
		})
		_node.OrderState = value
	}
	if value, ok := osbc.mutation.StartMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstatebase.FieldStartMode,
		})
		_node.StartMode = value
	}
	if value, ok := osbc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstatebase.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := osbc.mutation.LastBenefitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderstatebase.FieldLastBenefitAt,
		})
		_node.LastBenefitAt = value
	}
	if value, ok := osbc.mutation.BenefitState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstatebase.FieldBenefitState,
		})
		_node.BenefitState = value
	}
	if value, ok := osbc.mutation.PaymentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderstatebase.FieldPaymentType,
		})
		_node.PaymentType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStateBase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStateBaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (osbc *OrderStateBaseCreate) OnConflict(opts ...sql.ConflictOption) *OrderStateBaseUpsertOne {
	osbc.conflict = opts
	return &OrderStateBaseUpsertOne{
		create: osbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStateBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (osbc *OrderStateBaseCreate) OnConflictColumns(columns ...string) *OrderStateBaseUpsertOne {
	osbc.conflict = append(osbc.conflict, sql.ConflictColumns(columns...))
	return &OrderStateBaseUpsertOne{
		create: osbc,
	}
}

type (
	// OrderStateBaseUpsertOne is the builder for "upsert"-ing
	//  one OrderStateBase node.
	OrderStateBaseUpsertOne struct {
		create *OrderStateBaseCreate
	}

	// OrderStateBaseUpsert is the "OnConflict" setter.
	OrderStateBaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateBaseUpsert) SetCreatedAt(v uint32) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateCreatedAt() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateBaseUpsert) AddCreatedAt(v uint32) *OrderStateBaseUpsert {
	u.Add(orderstatebase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateBaseUpsert) SetUpdatedAt(v uint32) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateUpdatedAt() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateBaseUpsert) AddUpdatedAt(v uint32) *OrderStateBaseUpsert {
	u.Add(orderstatebase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateBaseUpsert) SetDeletedAt(v uint32) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateDeletedAt() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateBaseUpsert) AddDeletedAt(v uint32) *OrderStateBaseUpsert {
	u.Add(orderstatebase.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderStateBaseUpsert) SetEntID(v uuid.UUID) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateEntID() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateBaseUpsert) SetOrderID(v uuid.UUID) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateOrderID() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStateBaseUpsert) ClearOrderID() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldOrderID)
	return u
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateBaseUpsert) SetOrderState(v string) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldOrderState, v)
	return u
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateOrderState() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldOrderState)
	return u
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateBaseUpsert) ClearOrderState() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldOrderState)
	return u
}

// SetStartMode sets the "start_mode" field.
func (u *OrderStateBaseUpsert) SetStartMode(v string) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldStartMode, v)
	return u
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateStartMode() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldStartMode)
	return u
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *OrderStateBaseUpsert) ClearStartMode() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldStartMode)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OrderStateBaseUpsert) SetStartAt(v uint32) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateStartAt() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderStateBaseUpsert) AddStartAt(v uint32) *OrderStateBaseUpsert {
	u.Add(orderstatebase.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderStateBaseUpsert) ClearStartAt() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldStartAt)
	return u
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateBaseUpsert) SetLastBenefitAt(v uint32) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldLastBenefitAt, v)
	return u
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateLastBenefitAt() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldLastBenefitAt)
	return u
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateBaseUpsert) AddLastBenefitAt(v uint32) *OrderStateBaseUpsert {
	u.Add(orderstatebase.FieldLastBenefitAt, v)
	return u
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateBaseUpsert) ClearLastBenefitAt() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldLastBenefitAt)
	return u
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateBaseUpsert) SetBenefitState(v string) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldBenefitState, v)
	return u
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdateBenefitState() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldBenefitState)
	return u
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateBaseUpsert) ClearBenefitState() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldBenefitState)
	return u
}

// SetPaymentType sets the "payment_type" field.
func (u *OrderStateBaseUpsert) SetPaymentType(v string) *OrderStateBaseUpsert {
	u.Set(orderstatebase.FieldPaymentType, v)
	return u
}

// UpdatePaymentType sets the "payment_type" field to the value that was provided on create.
func (u *OrderStateBaseUpsert) UpdatePaymentType() *OrderStateBaseUpsert {
	u.SetExcluded(orderstatebase.FieldPaymentType)
	return u
}

// ClearPaymentType clears the value of the "payment_type" field.
func (u *OrderStateBaseUpsert) ClearPaymentType() *OrderStateBaseUpsert {
	u.SetNull(orderstatebase.FieldPaymentType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderStateBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatebase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderStateBaseUpsertOne) UpdateNewValues() *OrderStateBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderstatebase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderStateBase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderStateBaseUpsertOne) Ignore() *OrderStateBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStateBaseUpsertOne) DoNothing() *OrderStateBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStateBaseCreate.OnConflict
// documentation for more info.
func (u *OrderStateBaseUpsertOne) Update(set func(*OrderStateBaseUpsert)) *OrderStateBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStateBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateBaseUpsertOne) SetCreatedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateBaseUpsertOne) AddCreatedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateCreatedAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateBaseUpsertOne) SetUpdatedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateBaseUpsertOne) AddUpdatedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateUpdatedAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateBaseUpsertOne) SetDeletedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateBaseUpsertOne) AddDeletedAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateDeletedAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderStateBaseUpsertOne) SetEntID(v uuid.UUID) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateEntID() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateBaseUpsertOne) SetOrderID(v uuid.UUID) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateOrderID() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStateBaseUpsertOne) ClearOrderID() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearOrderID()
	})
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateBaseUpsertOne) SetOrderState(v string) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetOrderState(v)
	})
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateOrderState() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateOrderState()
	})
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateBaseUpsertOne) ClearOrderState() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearOrderState()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *OrderStateBaseUpsertOne) SetStartMode(v string) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateStartMode() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *OrderStateBaseUpsertOne) ClearStartMode() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearStartMode()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderStateBaseUpsertOne) SetStartAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderStateBaseUpsertOne) AddStartAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateStartAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderStateBaseUpsertOne) ClearStartAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearStartAt()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateBaseUpsertOne) SetLastBenefitAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateBaseUpsertOne) AddLastBenefitAt(v uint32) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateLastBenefitAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateBaseUpsertOne) ClearLastBenefitAt() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateBaseUpsertOne) SetBenefitState(v string) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdateBenefitState() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateBaseUpsertOne) ClearBenefitState() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearBenefitState()
	})
}

// SetPaymentType sets the "payment_type" field.
func (u *OrderStateBaseUpsertOne) SetPaymentType(v string) *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetPaymentType(v)
	})
}

// UpdatePaymentType sets the "payment_type" field to the value that was provided on create.
func (u *OrderStateBaseUpsertOne) UpdatePaymentType() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdatePaymentType()
	})
}

// ClearPaymentType clears the value of the "payment_type" field.
func (u *OrderStateBaseUpsertOne) ClearPaymentType() *OrderStateBaseUpsertOne {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearPaymentType()
	})
}

// Exec executes the query.
func (u *OrderStateBaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStateBaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStateBaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderStateBaseUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderStateBaseUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderStateBaseCreateBulk is the builder for creating many OrderStateBase entities in bulk.
type OrderStateBaseCreateBulk struct {
	config
	builders []*OrderStateBaseCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderStateBase entities in the database.
func (osbcb *OrderStateBaseCreateBulk) Save(ctx context.Context) ([]*OrderStateBase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(osbcb.builders))
	nodes := make([]*OrderStateBase, len(osbcb.builders))
	mutators := make([]Mutator, len(osbcb.builders))
	for i := range osbcb.builders {
		func(i int, root context.Context) {
			builder := osbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderStateBaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, osbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = osbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, osbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, osbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (osbcb *OrderStateBaseCreateBulk) SaveX(ctx context.Context) []*OrderStateBase {
	v, err := osbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osbcb *OrderStateBaseCreateBulk) Exec(ctx context.Context) error {
	_, err := osbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osbcb *OrderStateBaseCreateBulk) ExecX(ctx context.Context) {
	if err := osbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStateBase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStateBaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (osbcb *OrderStateBaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderStateBaseUpsertBulk {
	osbcb.conflict = opts
	return &OrderStateBaseUpsertBulk{
		create: osbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStateBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (osbcb *OrderStateBaseCreateBulk) OnConflictColumns(columns ...string) *OrderStateBaseUpsertBulk {
	osbcb.conflict = append(osbcb.conflict, sql.ConflictColumns(columns...))
	return &OrderStateBaseUpsertBulk{
		create: osbcb,
	}
}

// OrderStateBaseUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderStateBase nodes.
type OrderStateBaseUpsertBulk struct {
	create *OrderStateBaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderStateBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatebase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderStateBaseUpsertBulk) UpdateNewValues() *OrderStateBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderstatebase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderStateBase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderStateBaseUpsertBulk) Ignore() *OrderStateBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStateBaseUpsertBulk) DoNothing() *OrderStateBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStateBaseCreateBulk.OnConflict
// documentation for more info.
func (u *OrderStateBaseUpsertBulk) Update(set func(*OrderStateBaseUpsert)) *OrderStateBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStateBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderStateBaseUpsertBulk) SetCreatedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderStateBaseUpsertBulk) AddCreatedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateCreatedAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStateBaseUpsertBulk) SetUpdatedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderStateBaseUpsertBulk) AddUpdatedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateUpdatedAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderStateBaseUpsertBulk) SetDeletedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderStateBaseUpsertBulk) AddDeletedAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateDeletedAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderStateBaseUpsertBulk) SetEntID(v uuid.UUID) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateEntID() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStateBaseUpsertBulk) SetOrderID(v uuid.UUID) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateOrderID() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStateBaseUpsertBulk) ClearOrderID() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearOrderID()
	})
}

// SetOrderState sets the "order_state" field.
func (u *OrderStateBaseUpsertBulk) SetOrderState(v string) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetOrderState(v)
	})
}

// UpdateOrderState sets the "order_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateOrderState() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateOrderState()
	})
}

// ClearOrderState clears the value of the "order_state" field.
func (u *OrderStateBaseUpsertBulk) ClearOrderState() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearOrderState()
	})
}

// SetStartMode sets the "start_mode" field.
func (u *OrderStateBaseUpsertBulk) SetStartMode(v string) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetStartMode(v)
	})
}

// UpdateStartMode sets the "start_mode" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateStartMode() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateStartMode()
	})
}

// ClearStartMode clears the value of the "start_mode" field.
func (u *OrderStateBaseUpsertBulk) ClearStartMode() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearStartMode()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderStateBaseUpsertBulk) SetStartAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderStateBaseUpsertBulk) AddStartAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateStartAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *OrderStateBaseUpsertBulk) ClearStartAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearStartAt()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *OrderStateBaseUpsertBulk) SetLastBenefitAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *OrderStateBaseUpsertBulk) AddLastBenefitAt(v uint32) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateLastBenefitAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *OrderStateBaseUpsertBulk) ClearLastBenefitAt() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *OrderStateBaseUpsertBulk) SetBenefitState(v string) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdateBenefitState() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *OrderStateBaseUpsertBulk) ClearBenefitState() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearBenefitState()
	})
}

// SetPaymentType sets the "payment_type" field.
func (u *OrderStateBaseUpsertBulk) SetPaymentType(v string) *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.SetPaymentType(v)
	})
}

// UpdatePaymentType sets the "payment_type" field to the value that was provided on create.
func (u *OrderStateBaseUpsertBulk) UpdatePaymentType() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.UpdatePaymentType()
	})
}

// ClearPaymentType clears the value of the "payment_type" field.
func (u *OrderStateBaseUpsertBulk) ClearPaymentType() *OrderStateBaseUpsertBulk {
	return u.Update(func(s *OrderStateBaseUpsert) {
		s.ClearPaymentType()
	})
}

// Exec executes the query.
func (u *OrderStateBaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderStateBaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStateBaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStateBaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
