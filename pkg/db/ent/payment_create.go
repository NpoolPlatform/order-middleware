// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PaymentCreate) SetCreatedAt(u uint32) *PaymentCreate {
	pc.mutation.SetCreatedAt(u)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreatedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetCreatedAt(*u)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PaymentCreate) SetUpdatedAt(u uint32) *PaymentCreate {
	pc.mutation.SetUpdatedAt(u)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdatedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetUpdatedAt(*u)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PaymentCreate) SetDeletedAt(u uint32) *PaymentCreate {
	pc.mutation.SetDeletedAt(u)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableDeletedAt(u *uint32) *PaymentCreate {
	if u != nil {
		pc.SetDeletedAt(*u)
	}
	return pc
}

// SetAppID sets the "app_id" field.
func (pc *PaymentCreate) SetAppID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetAppID(u)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PaymentCreate) SetUserID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetGoodID sets the "good_id" field.
func (pc *PaymentCreate) SetGoodID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetGoodID(u)
	return pc
}

// SetOrderID sets the "order_id" field.
func (pc *PaymentCreate) SetOrderID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetOrderID(u)
	return pc
}

// SetAccountID sets the "account_id" field.
func (pc *PaymentCreate) SetAccountID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetAccountID(u)
	return pc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pc *PaymentCreate) SetCoinTypeID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetCoinTypeID(u)
	return pc
}

// SetCoinInfoID sets the "coin_info_id" field.
func (pc *PaymentCreate) SetCoinInfoID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetCoinInfoID(u)
	return pc
}

// SetNillableCoinInfoID sets the "coin_info_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCoinInfoID(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetCoinInfoID(*u)
	}
	return pc
}

// SetStartAmount sets the "start_amount" field.
func (pc *PaymentCreate) SetStartAmount(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetStartAmount(d)
	return pc
}

// SetNillableStartAmount sets the "start_amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStartAmount(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetStartAmount(*d)
	}
	return pc
}

// SetTransferAmount sets the "transfer_amount" field.
func (pc *PaymentCreate) SetTransferAmount(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetTransferAmount(d)
	return pc
}

// SetNillableTransferAmount sets the "transfer_amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableTransferAmount(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetTransferAmount(*d)
	}
	return pc
}

// SetBalanceAmount sets the "balance_amount" field.
func (pc *PaymentCreate) SetBalanceAmount(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetBalanceAmount(d)
	return pc
}

// SetNillableBalanceAmount sets the "balance_amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableBalanceAmount(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetBalanceAmount(*d)
	}
	return pc
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (pc *PaymentCreate) SetCoinUsdCurrency(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetCoinUsdCurrency(d)
	return pc
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetCoinUsdCurrency(*d)
	}
	return pc
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (pc *PaymentCreate) SetLocalCoinUsdCurrency(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetLocalCoinUsdCurrency(d)
	return pc
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetLocalCoinUsdCurrency(*d)
	}
	return pc
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (pc *PaymentCreate) SetLiveCoinUsdCurrency(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetLiveCoinUsdCurrency(d)
	return pc
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetLiveCoinUsdCurrency(*d)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PaymentCreate) SetID(u uuid.UUID) *PaymentCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableID(u *uuid.UUID) *PaymentCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Payment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if payment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := payment.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if payment.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := payment.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		if payment.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized payment.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := payment.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.StartAmount(); !ok {
		v := payment.DefaultStartAmount
		pc.mutation.SetStartAmount(v)
	}
	if _, ok := pc.mutation.TransferAmount(); !ok {
		v := payment.DefaultTransferAmount
		pc.mutation.SetTransferAmount(v)
	}
	if _, ok := pc.mutation.BalanceAmount(); !ok {
		v := payment.DefaultBalanceAmount
		pc.mutation.SetBalanceAmount(v)
	}
	if _, ok := pc.mutation.CoinUsdCurrency(); !ok {
		v := payment.DefaultCoinUsdCurrency
		pc.mutation.SetCoinUsdCurrency(v)
	}
	if _, ok := pc.mutation.LocalCoinUsdCurrency(); !ok {
		v := payment.DefaultLocalCoinUsdCurrency
		pc.mutation.SetLocalCoinUsdCurrency(v)
	}
	if _, ok := pc.mutation.LiveCoinUsdCurrency(); !ok {
		v := payment.DefaultLiveCoinUsdCurrency
		pc.mutation.SetLiveCoinUsdCurrency(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if payment.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized payment.DefaultID (forgotten import ent/runtime?)")
		}
		v := payment.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Payment.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Payment.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Payment.deleted_at"`)}
	}
	if _, ok := pc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Payment.app_id"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Payment.user_id"`)}
	}
	if _, ok := pc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "Payment.good_id"`)}
	}
	if _, ok := pc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "Payment.order_id"`)}
	}
	if _, ok := pc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Payment.account_id"`)}
	}
	if _, ok := pc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "Payment.coin_type_id"`)}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: payment.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: payment.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := pc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := pc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := pc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := pc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := pc.mutation.CoinInfoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: payment.FieldCoinInfoID,
		})
		_node.CoinInfoID = value
	}
	if value, ok := pc.mutation.StartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldStartAmount,
		})
		_node.StartAmount = value
	}
	if value, ok := pc.mutation.TransferAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldTransferAmount,
		})
		_node.TransferAmount = value
	}
	if value, ok := pc.mutation.BalanceAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldBalanceAmount,
		})
		_node.BalanceAmount = value
	}
	if value, ok := pc.mutation.CoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldCoinUsdCurrency,
		})
		_node.CoinUsdCurrency = value
	}
	if value, ok := pc.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLocalCoinUsdCurrency,
		})
		_node.LocalCoinUsdCurrency = value
	}
	if value, ok := pc.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: payment.FieldLiveCoinUsdCurrency,
		})
		_node.LiveCoinUsdCurrency = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PaymentCreate) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertOne {
	pc.conflict = opts
	return &PaymentUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PaymentCreate) OnConflictColumns(columns ...string) *PaymentUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertOne{
		create: pc,
	}
}

type (
	// PaymentUpsertOne is the builder for "upsert"-ing
	//  one Payment node.
	PaymentUpsertOne struct {
		create *PaymentCreate
	}

	// PaymentUpsert is the "OnConflict" setter.
	PaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsert) SetCreatedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCreatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsert) AddCreatedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsert) SetUpdatedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUpdatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsert) AddUpdatedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsert) SetDeletedAt(v uint32) *PaymentUpsert {
	u.Set(payment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateDeletedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsert) AddDeletedAt(v uint32) *PaymentUpsert {
	u.Add(payment.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *PaymentUpsert) SetAppID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateAppID() *PaymentUpsert {
	u.SetExcluded(payment.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PaymentUpsert) SetUserID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUserID() *PaymentUpsert {
	u.SetExcluded(payment.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *PaymentUpsert) SetGoodID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateGoodID() *PaymentUpsert {
	u.SetExcluded(payment.FieldGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PaymentUpsert) SetOrderID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateOrderID() *PaymentUpsert {
	u.SetExcluded(payment.FieldOrderID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsert) SetAccountID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateAccountID() *PaymentUpsert {
	u.SetExcluded(payment.FieldAccountID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentUpsert) SetCoinTypeID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCoinTypeID() *PaymentUpsert {
	u.SetExcluded(payment.FieldCoinTypeID)
	return u
}

// SetCoinInfoID sets the "coin_info_id" field.
func (u *PaymentUpsert) SetCoinInfoID(v uuid.UUID) *PaymentUpsert {
	u.Set(payment.FieldCoinInfoID, v)
	return u
}

// UpdateCoinInfoID sets the "coin_info_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCoinInfoID() *PaymentUpsert {
	u.SetExcluded(payment.FieldCoinInfoID)
	return u
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (u *PaymentUpsert) ClearCoinInfoID() *PaymentUpsert {
	u.SetNull(payment.FieldCoinInfoID)
	return u
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentUpsert) SetStartAmount(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldStartAmount, v)
	return u
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateStartAmount() *PaymentUpsert {
	u.SetExcluded(payment.FieldStartAmount)
	return u
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentUpsert) ClearStartAmount() *PaymentUpsert {
	u.SetNull(payment.FieldStartAmount)
	return u
}

// SetTransferAmount sets the "transfer_amount" field.
func (u *PaymentUpsert) SetTransferAmount(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldTransferAmount, v)
	return u
}

// UpdateTransferAmount sets the "transfer_amount" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateTransferAmount() *PaymentUpsert {
	u.SetExcluded(payment.FieldTransferAmount)
	return u
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (u *PaymentUpsert) ClearTransferAmount() *PaymentUpsert {
	u.SetNull(payment.FieldTransferAmount)
	return u
}

// SetBalanceAmount sets the "balance_amount" field.
func (u *PaymentUpsert) SetBalanceAmount(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldBalanceAmount, v)
	return u
}

// UpdateBalanceAmount sets the "balance_amount" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateBalanceAmount() *PaymentUpsert {
	u.SetExcluded(payment.FieldBalanceAmount)
	return u
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (u *PaymentUpsert) ClearBalanceAmount() *PaymentUpsert {
	u.SetNull(payment.FieldBalanceAmount)
	return u
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentUpsert) SetCoinUsdCurrency(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldCoinUsdCurrency, v)
	return u
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCoinUsdCurrency() *PaymentUpsert {
	u.SetExcluded(payment.FieldCoinUsdCurrency)
	return u
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentUpsert) ClearCoinUsdCurrency() *PaymentUpsert {
	u.SetNull(payment.FieldCoinUsdCurrency)
	return u
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentUpsert) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldLocalCoinUsdCurrency, v)
	return u
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateLocalCoinUsdCurrency() *PaymentUpsert {
	u.SetExcluded(payment.FieldLocalCoinUsdCurrency)
	return u
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentUpsert) ClearLocalCoinUsdCurrency() *PaymentUpsert {
	u.SetNull(payment.FieldLocalCoinUsdCurrency)
	return u
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentUpsert) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentUpsert {
	u.Set(payment.FieldLiveCoinUsdCurrency, v)
	return u
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateLiveCoinUsdCurrency() *PaymentUpsert {
	u.SetExcluded(payment.FieldLiveCoinUsdCurrency)
	return u
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentUpsert) ClearLiveCoinUsdCurrency() *PaymentUpsert {
	u.SetNull(payment.FieldLiveCoinUsdCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentUpsertOne) UpdateNewValues() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(payment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Payment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentUpsertOne) Ignore() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertOne) DoNothing() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreate.OnConflict
// documentation for more info.
func (u *PaymentUpsertOne) Update(set func(*PaymentUpsert)) *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertOne) SetCreatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsertOne) AddCreatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCreatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertOne) SetUpdatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsertOne) AddUpdatedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUpdatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsertOne) SetDeletedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsertOne) AddDeletedAt(v uint32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateDeletedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PaymentUpsertOne) SetAppID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateAppID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PaymentUpsertOne) SetUserID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUserID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PaymentUpsertOne) SetGoodID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateGoodID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PaymentUpsertOne) SetOrderID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateOrderID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateOrderID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsertOne) SetAccountID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateAccountID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAccountID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentUpsertOne) SetCoinTypeID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCoinTypeID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetCoinInfoID sets the "coin_info_id" field.
func (u *PaymentUpsertOne) SetCoinInfoID(v uuid.UUID) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinInfoID(v)
	})
}

// UpdateCoinInfoID sets the "coin_info_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCoinInfoID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinInfoID()
	})
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (u *PaymentUpsertOne) ClearCoinInfoID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCoinInfoID()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentUpsertOne) SetStartAmount(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateStartAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentUpsertOne) ClearStartAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearStartAmount()
	})
}

// SetTransferAmount sets the "transfer_amount" field.
func (u *PaymentUpsertOne) SetTransferAmount(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetTransferAmount(v)
	})
}

// UpdateTransferAmount sets the "transfer_amount" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateTransferAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateTransferAmount()
	})
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (u *PaymentUpsertOne) ClearTransferAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearTransferAmount()
	})
}

// SetBalanceAmount sets the "balance_amount" field.
func (u *PaymentUpsertOne) SetBalanceAmount(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetBalanceAmount(v)
	})
}

// UpdateBalanceAmount sets the "balance_amount" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateBalanceAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateBalanceAmount()
	})
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (u *PaymentUpsertOne) ClearBalanceAmount() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearBalanceAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentUpsertOne) SetCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentUpsertOne) ClearCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentUpsertOne) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateLocalCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentUpsertOne) ClearLocalCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentUpsertOne) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateLiveCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentUpsertOne) ClearLiveCoinUsdCurrency() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PaymentUpsertOne.ID is not supported by MySQL driver. Use PaymentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	builders []*PaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertBulk {
	pcb.conflict = opts
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PaymentCreateBulk) OnConflictColumns(columns ...string) *PaymentUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// PaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of Payment nodes.
type PaymentUpsertBulk struct {
	create *PaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentUpsertBulk) UpdateNewValues() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(payment.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentUpsertBulk) Ignore() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertBulk) DoNothing() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentUpsertBulk) Update(set func(*PaymentUpsert)) *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertBulk) SetCreatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PaymentUpsertBulk) AddCreatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCreatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertBulk) SetUpdatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PaymentUpsertBulk) AddUpdatedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUpdatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PaymentUpsertBulk) SetDeletedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PaymentUpsertBulk) AddDeletedAt(v uint32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateDeletedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PaymentUpsertBulk) SetAppID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateAppID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PaymentUpsertBulk) SetUserID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUserID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PaymentUpsertBulk) SetGoodID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateGoodID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PaymentUpsertBulk) SetOrderID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateOrderID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateOrderID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PaymentUpsertBulk) SetAccountID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateAccountID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateAccountID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *PaymentUpsertBulk) SetCoinTypeID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCoinTypeID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetCoinInfoID sets the "coin_info_id" field.
func (u *PaymentUpsertBulk) SetCoinInfoID(v uuid.UUID) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinInfoID(v)
	})
}

// UpdateCoinInfoID sets the "coin_info_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCoinInfoID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinInfoID()
	})
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (u *PaymentUpsertBulk) ClearCoinInfoID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCoinInfoID()
	})
}

// SetStartAmount sets the "start_amount" field.
func (u *PaymentUpsertBulk) SetStartAmount(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStartAmount(v)
	})
}

// UpdateStartAmount sets the "start_amount" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateStartAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStartAmount()
	})
}

// ClearStartAmount clears the value of the "start_amount" field.
func (u *PaymentUpsertBulk) ClearStartAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearStartAmount()
	})
}

// SetTransferAmount sets the "transfer_amount" field.
func (u *PaymentUpsertBulk) SetTransferAmount(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetTransferAmount(v)
	})
}

// UpdateTransferAmount sets the "transfer_amount" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateTransferAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateTransferAmount()
	})
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (u *PaymentUpsertBulk) ClearTransferAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearTransferAmount()
	})
}

// SetBalanceAmount sets the "balance_amount" field.
func (u *PaymentUpsertBulk) SetBalanceAmount(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetBalanceAmount(v)
	})
}

// UpdateBalanceAmount sets the "balance_amount" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateBalanceAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateBalanceAmount()
	})
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (u *PaymentUpsertBulk) ClearBalanceAmount() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearBalanceAmount()
	})
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (u *PaymentUpsertBulk) SetCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCoinUsdCurrency(v)
	})
}

// UpdateCoinUsdCurrency sets the "coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCoinUsdCurrency()
	})
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (u *PaymentUpsertBulk) ClearCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearCoinUsdCurrency()
	})
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (u *PaymentUpsertBulk) SetLocalCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetLocalCoinUsdCurrency(v)
	})
}

// UpdateLocalCoinUsdCurrency sets the "local_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateLocalCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateLocalCoinUsdCurrency()
	})
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (u *PaymentUpsertBulk) ClearLocalCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearLocalCoinUsdCurrency()
	})
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (u *PaymentUpsertBulk) SetLiveCoinUsdCurrency(v decimal.Decimal) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetLiveCoinUsdCurrency(v)
	})
}

// UpdateLiveCoinUsdCurrency sets the "live_coin_usd_currency" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateLiveCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateLiveCoinUsdCurrency()
	})
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (u *PaymentUpsertBulk) ClearLiveCoinUsdCurrency() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearLiveCoinUsdCurrency()
	})
}

// Exec executes the query.
func (u *PaymentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
