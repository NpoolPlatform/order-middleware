// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompensate = "Compensate"
	TypeOrder      = "Order"
	TypeOrderState = "OrderState"
	TypeOutOfGas   = "OutOfGas"
	TypePayment    = "Payment"
)

// CompensateMutation represents an operation that mutates the Compensate nodes in the graph.
type CompensateMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	order_id        *uuid.UUID
	start_at        *uint32
	addstart_at     *int32
	end_at          *uint32
	addend_at       *int32
	compensate_type *string
	title           *string
	message         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Compensate, error)
	predicates      []predicate.Compensate
}

var _ ent.Mutation = (*CompensateMutation)(nil)

// compensateOption allows management of the mutation configuration using functional options.
type compensateOption func(*CompensateMutation)

// newCompensateMutation creates new mutation for the Compensate entity.
func newCompensateMutation(c config, op Op, opts ...compensateOption) *CompensateMutation {
	m := &CompensateMutation{
		config:        c,
		op:            op,
		typ:           TypeCompensate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompensateID sets the ID field of the mutation.
func withCompensateID(id uuid.UUID) compensateOption {
	return func(m *CompensateMutation) {
		var (
			err   error
			once  sync.Once
			value *Compensate
		)
		m.oldValue = func(ctx context.Context) (*Compensate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Compensate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompensate sets the old Compensate of the mutation.
func withCompensate(node *Compensate) compensateOption {
	return func(m *CompensateMutation) {
		m.oldValue = func(context.Context) (*Compensate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompensateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompensateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Compensate entities.
func (m *CompensateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompensateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompensateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Compensate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CompensateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CompensateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CompensateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CompensateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CompensateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CompensateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CompensateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CompensateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CompensateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CompensateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CompensateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CompensateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CompensateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CompensateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CompensateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *CompensateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *CompensateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *CompensateMutation) ResetOrderID() {
	m.order_id = nil
}

// SetStartAt sets the "start_at" field.
func (m *CompensateMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *CompensateMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *CompensateMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *CompensateMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *CompensateMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[compensate.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *CompensateMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[compensate.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *CompensateMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, compensate.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *CompensateMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *CompensateMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *CompensateMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *CompensateMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *CompensateMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[compensate.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *CompensateMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[compensate.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *CompensateMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, compensate.FieldEndAt)
}

// SetCompensateType sets the "compensate_type" field.
func (m *CompensateMutation) SetCompensateType(s string) {
	m.compensate_type = &s
}

// CompensateType returns the value of the "compensate_type" field in the mutation.
func (m *CompensateMutation) CompensateType() (r string, exists bool) {
	v := m.compensate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateType returns the old "compensate_type" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldCompensateType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateType: %w", err)
	}
	return oldValue.CompensateType, nil
}

// ClearCompensateType clears the value of the "compensate_type" field.
func (m *CompensateMutation) ClearCompensateType() {
	m.compensate_type = nil
	m.clearedFields[compensate.FieldCompensateType] = struct{}{}
}

// CompensateTypeCleared returns if the "compensate_type" field was cleared in this mutation.
func (m *CompensateMutation) CompensateTypeCleared() bool {
	_, ok := m.clearedFields[compensate.FieldCompensateType]
	return ok
}

// ResetCompensateType resets all changes to the "compensate_type" field.
func (m *CompensateMutation) ResetCompensateType() {
	m.compensate_type = nil
	delete(m.clearedFields, compensate.FieldCompensateType)
}

// SetTitle sets the "title" field.
func (m *CompensateMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CompensateMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *CompensateMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[compensate.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *CompensateMutation) TitleCleared() bool {
	_, ok := m.clearedFields[compensate.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *CompensateMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, compensate.FieldTitle)
}

// SetMessage sets the "message" field.
func (m *CompensateMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CompensateMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CompensateMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[compensate.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CompensateMutation) MessageCleared() bool {
	_, ok := m.clearedFields[compensate.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CompensateMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, compensate.FieldMessage)
}

// Where appends a list predicates to the CompensateMutation builder.
func (m *CompensateMutation) Where(ps ...predicate.Compensate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompensateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Compensate).
func (m *CompensateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompensateMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.order_id != nil {
		fields = append(fields, compensate.FieldOrderID)
	}
	if m.start_at != nil {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, compensate.FieldEndAt)
	}
	if m.compensate_type != nil {
		fields = append(fields, compensate.FieldCompensateType)
	}
	if m.title != nil {
		fields = append(fields, compensate.FieldTitle)
	}
	if m.message != nil {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompensateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.CreatedAt()
	case compensate.FieldUpdatedAt:
		return m.UpdatedAt()
	case compensate.FieldDeletedAt:
		return m.DeletedAt()
	case compensate.FieldOrderID:
		return m.OrderID()
	case compensate.FieldStartAt:
		return m.StartAt()
	case compensate.FieldEndAt:
		return m.EndAt()
	case compensate.FieldCompensateType:
		return m.CompensateType()
	case compensate.FieldTitle:
		return m.Title()
	case compensate.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompensateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case compensate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case compensate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case compensate.FieldOrderID:
		return m.OldOrderID(ctx)
	case compensate.FieldStartAt:
		return m.OldStartAt(ctx)
	case compensate.FieldEndAt:
		return m.OldEndAt(ctx)
	case compensate.FieldCompensateType:
		return m.OldCompensateType(ctx)
	case compensate.FieldTitle:
		return m.OldTitle(ctx)
	case compensate.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Compensate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case compensate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case compensate.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case compensate.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case compensate.FieldCompensateType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateType(v)
		return nil
	case compensate.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case compensate.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompensateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, compensate.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompensateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case compensate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case compensate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case compensate.FieldStartAt:
		return m.AddedStartAt()
	case compensate.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case compensate.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case compensate.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompensateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(compensate.FieldStartAt) {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.FieldCleared(compensate.FieldEndAt) {
		fields = append(fields, compensate.FieldEndAt)
	}
	if m.FieldCleared(compensate.FieldCompensateType) {
		fields = append(fields, compensate.FieldCompensateType)
	}
	if m.FieldCleared(compensate.FieldTitle) {
		fields = append(fields, compensate.FieldTitle)
	}
	if m.FieldCleared(compensate.FieldMessage) {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompensateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompensateMutation) ClearField(name string) error {
	switch name {
	case compensate.FieldStartAt:
		m.ClearStartAt()
		return nil
	case compensate.FieldEndAt:
		m.ClearEndAt()
		return nil
	case compensate.FieldCompensateType:
		m.ClearCompensateType()
		return nil
	case compensate.FieldTitle:
		m.ClearTitle()
		return nil
	case compensate.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompensateMutation) ResetField(name string) error {
	switch name {
	case compensate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case compensate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case compensate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case compensate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case compensate.FieldStartAt:
		m.ResetStartAt()
		return nil
	case compensate.FieldEndAt:
		m.ResetEndAt()
		return nil
	case compensate.FieldCompensateType:
		m.ResetCompensateType()
		return nil
	case compensate.FieldTitle:
		m.ResetTitle()
		return nil
	case compensate.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompensateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompensateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompensateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompensateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompensateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompensateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompensateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Compensate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompensateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Compensate edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *uint32
	addcreated_at    *int32
	updated_at       *uint32
	addupdated_at    *int32
	deleted_at       *uint32
	adddeleted_at    *int32
	app_id           *uuid.UUID
	user_id          *uuid.UUID
	good_id          *uuid.UUID
	payment_id       *uuid.UUID
	parent_order_id  *uuid.UUID
	units_v1         *decimal.Decimal
	good_value       *decimal.Decimal
	payment_amount   *decimal.Decimal
	discount_amount  *decimal.Decimal
	promotion_id     *uuid.UUID
	duration_days    *uint32
	addduration_days *int32
	order_type       *string
	investment_type  *string
	coupon_ids       *[]uuid.UUID
	payment_type     *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Order, error)
	predicates       []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uuid.UUID) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *OrderMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *OrderMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *OrderMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *OrderMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *OrderMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *OrderMutation) ResetGoodID() {
	m.good_id = nil
}

// SetPaymentID sets the "payment_id" field.
func (m *OrderMutation) SetPaymentID(u uuid.UUID) {
	m.payment_id = &u
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *OrderMutation) PaymentID() (r uuid.UUID, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *OrderMutation) ClearPaymentID() {
	m.payment_id = nil
	m.clearedFields[order.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *OrderMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[order.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *OrderMutation) ResetPaymentID() {
	m.payment_id = nil
	delete(m.clearedFields, order.FieldPaymentID)
}

// SetParentOrderID sets the "parent_order_id" field.
func (m *OrderMutation) SetParentOrderID(u uuid.UUID) {
	m.parent_order_id = &u
}

// ParentOrderID returns the value of the "parent_order_id" field in the mutation.
func (m *OrderMutation) ParentOrderID() (r uuid.UUID, exists bool) {
	v := m.parent_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentOrderID returns the old "parent_order_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldParentOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentOrderID: %w", err)
	}
	return oldValue.ParentOrderID, nil
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (m *OrderMutation) ClearParentOrderID() {
	m.parent_order_id = nil
	m.clearedFields[order.FieldParentOrderID] = struct{}{}
}

// ParentOrderIDCleared returns if the "parent_order_id" field was cleared in this mutation.
func (m *OrderMutation) ParentOrderIDCleared() bool {
	_, ok := m.clearedFields[order.FieldParentOrderID]
	return ok
}

// ResetParentOrderID resets all changes to the "parent_order_id" field.
func (m *OrderMutation) ResetParentOrderID() {
	m.parent_order_id = nil
	delete(m.clearedFields, order.FieldParentOrderID)
}

// SetUnitsV1 sets the "units_v1" field.
func (m *OrderMutation) SetUnitsV1(d decimal.Decimal) {
	m.units_v1 = &d
}

// UnitsV1 returns the value of the "units_v1" field in the mutation.
func (m *OrderMutation) UnitsV1() (r decimal.Decimal, exists bool) {
	v := m.units_v1
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitsV1 returns the old "units_v1" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUnitsV1(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitsV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitsV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitsV1: %w", err)
	}
	return oldValue.UnitsV1, nil
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (m *OrderMutation) ClearUnitsV1() {
	m.units_v1 = nil
	m.clearedFields[order.FieldUnitsV1] = struct{}{}
}

// UnitsV1Cleared returns if the "units_v1" field was cleared in this mutation.
func (m *OrderMutation) UnitsV1Cleared() bool {
	_, ok := m.clearedFields[order.FieldUnitsV1]
	return ok
}

// ResetUnitsV1 resets all changes to the "units_v1" field.
func (m *OrderMutation) ResetUnitsV1() {
	m.units_v1 = nil
	delete(m.clearedFields, order.FieldUnitsV1)
}

// SetGoodValue sets the "good_value" field.
func (m *OrderMutation) SetGoodValue(d decimal.Decimal) {
	m.good_value = &d
}

// GoodValue returns the value of the "good_value" field in the mutation.
func (m *OrderMutation) GoodValue() (r decimal.Decimal, exists bool) {
	v := m.good_value
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodValue returns the old "good_value" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodValue: %w", err)
	}
	return oldValue.GoodValue, nil
}

// ClearGoodValue clears the value of the "good_value" field.
func (m *OrderMutation) ClearGoodValue() {
	m.good_value = nil
	m.clearedFields[order.FieldGoodValue] = struct{}{}
}

// GoodValueCleared returns if the "good_value" field was cleared in this mutation.
func (m *OrderMutation) GoodValueCleared() bool {
	_, ok := m.clearedFields[order.FieldGoodValue]
	return ok
}

// ResetGoodValue resets all changes to the "good_value" field.
func (m *OrderMutation) ResetGoodValue() {
	m.good_value = nil
	delete(m.clearedFields, order.FieldGoodValue)
}

// SetPaymentAmount sets the "payment_amount" field.
func (m *OrderMutation) SetPaymentAmount(d decimal.Decimal) {
	m.payment_amount = &d
}

// PaymentAmount returns the value of the "payment_amount" field in the mutation.
func (m *OrderMutation) PaymentAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAmount returns the old "payment_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAmount: %w", err)
	}
	return oldValue.PaymentAmount, nil
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (m *OrderMutation) ClearPaymentAmount() {
	m.payment_amount = nil
	m.clearedFields[order.FieldPaymentAmount] = struct{}{}
}

// PaymentAmountCleared returns if the "payment_amount" field was cleared in this mutation.
func (m *OrderMutation) PaymentAmountCleared() bool {
	_, ok := m.clearedFields[order.FieldPaymentAmount]
	return ok
}

// ResetPaymentAmount resets all changes to the "payment_amount" field.
func (m *OrderMutation) ResetPaymentAmount() {
	m.payment_amount = nil
	delete(m.clearedFields, order.FieldPaymentAmount)
}

// SetDiscountAmount sets the "discount_amount" field.
func (m *OrderMutation) SetDiscountAmount(d decimal.Decimal) {
	m.discount_amount = &d
}

// DiscountAmount returns the value of the "discount_amount" field in the mutation.
func (m *OrderMutation) DiscountAmount() (r decimal.Decimal, exists bool) {
	v := m.discount_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountAmount returns the old "discount_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDiscountAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountAmount: %w", err)
	}
	return oldValue.DiscountAmount, nil
}

// ClearDiscountAmount clears the value of the "discount_amount" field.
func (m *OrderMutation) ClearDiscountAmount() {
	m.discount_amount = nil
	m.clearedFields[order.FieldDiscountAmount] = struct{}{}
}

// DiscountAmountCleared returns if the "discount_amount" field was cleared in this mutation.
func (m *OrderMutation) DiscountAmountCleared() bool {
	_, ok := m.clearedFields[order.FieldDiscountAmount]
	return ok
}

// ResetDiscountAmount resets all changes to the "discount_amount" field.
func (m *OrderMutation) ResetDiscountAmount() {
	m.discount_amount = nil
	delete(m.clearedFields, order.FieldDiscountAmount)
}

// SetPromotionID sets the "promotion_id" field.
func (m *OrderMutation) SetPromotionID(u uuid.UUID) {
	m.promotion_id = &u
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *OrderMutation) PromotionID() (r uuid.UUID, exists bool) {
	v := m.promotion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPromotionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (m *OrderMutation) ClearPromotionID() {
	m.promotion_id = nil
	m.clearedFields[order.FieldPromotionID] = struct{}{}
}

// PromotionIDCleared returns if the "promotion_id" field was cleared in this mutation.
func (m *OrderMutation) PromotionIDCleared() bool {
	_, ok := m.clearedFields[order.FieldPromotionID]
	return ok
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *OrderMutation) ResetPromotionID() {
	m.promotion_id = nil
	delete(m.clearedFields, order.FieldPromotionID)
}

// SetDurationDays sets the "duration_days" field.
func (m *OrderMutation) SetDurationDays(u uint32) {
	m.duration_days = &u
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *OrderMutation) DurationDays() (r uint32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDurationDays(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds u to the "duration_days" field.
func (m *OrderMutation) AddDurationDays(u int32) {
	if m.addduration_days != nil {
		*m.addduration_days += u
	} else {
		m.addduration_days = &u
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *OrderMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationDays clears the value of the "duration_days" field.
func (m *OrderMutation) ClearDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	m.clearedFields[order.FieldDurationDays] = struct{}{}
}

// DurationDaysCleared returns if the "duration_days" field was cleared in this mutation.
func (m *OrderMutation) DurationDaysCleared() bool {
	_, ok := m.clearedFields[order.FieldDurationDays]
	return ok
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *OrderMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	delete(m.clearedFields, order.FieldDurationDays)
}

// SetOrderType sets the "order_type" field.
func (m *OrderMutation) SetOrderType(s string) {
	m.order_type = &s
}

// OrderType returns the value of the "order_type" field in the mutation.
func (m *OrderMutation) OrderType() (r string, exists bool) {
	v := m.order_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderType returns the old "order_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderType: %w", err)
	}
	return oldValue.OrderType, nil
}

// ClearOrderType clears the value of the "order_type" field.
func (m *OrderMutation) ClearOrderType() {
	m.order_type = nil
	m.clearedFields[order.FieldOrderType] = struct{}{}
}

// OrderTypeCleared returns if the "order_type" field was cleared in this mutation.
func (m *OrderMutation) OrderTypeCleared() bool {
	_, ok := m.clearedFields[order.FieldOrderType]
	return ok
}

// ResetOrderType resets all changes to the "order_type" field.
func (m *OrderMutation) ResetOrderType() {
	m.order_type = nil
	delete(m.clearedFields, order.FieldOrderType)
}

// SetInvestmentType sets the "investment_type" field.
func (m *OrderMutation) SetInvestmentType(s string) {
	m.investment_type = &s
}

// InvestmentType returns the value of the "investment_type" field in the mutation.
func (m *OrderMutation) InvestmentType() (r string, exists bool) {
	v := m.investment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInvestmentType returns the old "investment_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldInvestmentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvestmentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvestmentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvestmentType: %w", err)
	}
	return oldValue.InvestmentType, nil
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (m *OrderMutation) ClearInvestmentType() {
	m.investment_type = nil
	m.clearedFields[order.FieldInvestmentType] = struct{}{}
}

// InvestmentTypeCleared returns if the "investment_type" field was cleared in this mutation.
func (m *OrderMutation) InvestmentTypeCleared() bool {
	_, ok := m.clearedFields[order.FieldInvestmentType]
	return ok
}

// ResetInvestmentType resets all changes to the "investment_type" field.
func (m *OrderMutation) ResetInvestmentType() {
	m.investment_type = nil
	delete(m.clearedFields, order.FieldInvestmentType)
}

// SetCouponIds sets the "coupon_ids" field.
func (m *OrderMutation) SetCouponIds(u []uuid.UUID) {
	m.coupon_ids = &u
}

// CouponIds returns the value of the "coupon_ids" field in the mutation.
func (m *OrderMutation) CouponIds() (r []uuid.UUID, exists bool) {
	v := m.coupon_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponIds returns the old "coupon_ids" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCouponIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponIds: %w", err)
	}
	return oldValue.CouponIds, nil
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (m *OrderMutation) ClearCouponIds() {
	m.coupon_ids = nil
	m.clearedFields[order.FieldCouponIds] = struct{}{}
}

// CouponIdsCleared returns if the "coupon_ids" field was cleared in this mutation.
func (m *OrderMutation) CouponIdsCleared() bool {
	_, ok := m.clearedFields[order.FieldCouponIds]
	return ok
}

// ResetCouponIds resets all changes to the "coupon_ids" field.
func (m *OrderMutation) ResetCouponIds() {
	m.coupon_ids = nil
	delete(m.clearedFields, order.FieldCouponIds)
}

// SetPaymentType sets the "payment_type" field.
func (m *OrderMutation) SetPaymentType(s string) {
	m.payment_type = &s
}

// PaymentType returns the value of the "payment_type" field in the mutation.
func (m *OrderMutation) PaymentType() (r string, exists bool) {
	v := m.payment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentType returns the old "payment_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentType: %w", err)
	}
	return oldValue.PaymentType, nil
}

// ClearPaymentType clears the value of the "payment_type" field.
func (m *OrderMutation) ClearPaymentType() {
	m.payment_type = nil
	m.clearedFields[order.FieldPaymentType] = struct{}{}
}

// PaymentTypeCleared returns if the "payment_type" field was cleared in this mutation.
func (m *OrderMutation) PaymentTypeCleared() bool {
	_, ok := m.clearedFields[order.FieldPaymentType]
	return ok
}

// ResetPaymentType resets all changes to the "payment_type" field.
func (m *OrderMutation) ResetPaymentType() {
	m.payment_type = nil
	delete(m.clearedFields, order.FieldPaymentType)
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, order.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, order.FieldGoodID)
	}
	if m.payment_id != nil {
		fields = append(fields, order.FieldPaymentID)
	}
	if m.parent_order_id != nil {
		fields = append(fields, order.FieldParentOrderID)
	}
	if m.units_v1 != nil {
		fields = append(fields, order.FieldUnitsV1)
	}
	if m.good_value != nil {
		fields = append(fields, order.FieldGoodValue)
	}
	if m.payment_amount != nil {
		fields = append(fields, order.FieldPaymentAmount)
	}
	if m.discount_amount != nil {
		fields = append(fields, order.FieldDiscountAmount)
	}
	if m.promotion_id != nil {
		fields = append(fields, order.FieldPromotionID)
	}
	if m.duration_days != nil {
		fields = append(fields, order.FieldDurationDays)
	}
	if m.order_type != nil {
		fields = append(fields, order.FieldOrderType)
	}
	if m.investment_type != nil {
		fields = append(fields, order.FieldInvestmentType)
	}
	if m.coupon_ids != nil {
		fields = append(fields, order.FieldCouponIds)
	}
	if m.payment_type != nil {
		fields = append(fields, order.FieldPaymentType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldDeletedAt:
		return m.DeletedAt()
	case order.FieldAppID:
		return m.AppID()
	case order.FieldUserID:
		return m.UserID()
	case order.FieldGoodID:
		return m.GoodID()
	case order.FieldPaymentID:
		return m.PaymentID()
	case order.FieldParentOrderID:
		return m.ParentOrderID()
	case order.FieldUnitsV1:
		return m.UnitsV1()
	case order.FieldGoodValue:
		return m.GoodValue()
	case order.FieldPaymentAmount:
		return m.PaymentAmount()
	case order.FieldDiscountAmount:
		return m.DiscountAmount()
	case order.FieldPromotionID:
		return m.PromotionID()
	case order.FieldDurationDays:
		return m.DurationDays()
	case order.FieldOrderType:
		return m.OrderType()
	case order.FieldInvestmentType:
		return m.InvestmentType()
	case order.FieldCouponIds:
		return m.CouponIds()
	case order.FieldPaymentType:
		return m.PaymentType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case order.FieldAppID:
		return m.OldAppID(ctx)
	case order.FieldUserID:
		return m.OldUserID(ctx)
	case order.FieldGoodID:
		return m.OldGoodID(ctx)
	case order.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case order.FieldParentOrderID:
		return m.OldParentOrderID(ctx)
	case order.FieldUnitsV1:
		return m.OldUnitsV1(ctx)
	case order.FieldGoodValue:
		return m.OldGoodValue(ctx)
	case order.FieldPaymentAmount:
		return m.OldPaymentAmount(ctx)
	case order.FieldDiscountAmount:
		return m.OldDiscountAmount(ctx)
	case order.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case order.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case order.FieldOrderType:
		return m.OldOrderType(ctx)
	case order.FieldInvestmentType:
		return m.OldInvestmentType(ctx)
	case order.FieldCouponIds:
		return m.OldCouponIds(ctx)
	case order.FieldPaymentType:
		return m.OldPaymentType(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case order.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case order.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case order.FieldPaymentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case order.FieldParentOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentOrderID(v)
		return nil
	case order.FieldUnitsV1:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitsV1(v)
		return nil
	case order.FieldGoodValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodValue(v)
		return nil
	case order.FieldPaymentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAmount(v)
		return nil
	case order.FieldDiscountAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountAmount(v)
		return nil
	case order.FieldPromotionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case order.FieldDurationDays:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case order.FieldOrderType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderType(v)
		return nil
	case order.FieldInvestmentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvestmentType(v)
		return nil
	case order.FieldCouponIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponIds(v)
		return nil
	case order.FieldPaymentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentType(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.addduration_days != nil {
		fields = append(fields, order.FieldDurationDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.AddedCreatedAt()
	case order.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case order.FieldDeletedAt:
		return m.AddedDeletedAt()
	case order.FieldDurationDays:
		return m.AddedDurationDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case order.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldPaymentID) {
		fields = append(fields, order.FieldPaymentID)
	}
	if m.FieldCleared(order.FieldParentOrderID) {
		fields = append(fields, order.FieldParentOrderID)
	}
	if m.FieldCleared(order.FieldUnitsV1) {
		fields = append(fields, order.FieldUnitsV1)
	}
	if m.FieldCleared(order.FieldGoodValue) {
		fields = append(fields, order.FieldGoodValue)
	}
	if m.FieldCleared(order.FieldPaymentAmount) {
		fields = append(fields, order.FieldPaymentAmount)
	}
	if m.FieldCleared(order.FieldDiscountAmount) {
		fields = append(fields, order.FieldDiscountAmount)
	}
	if m.FieldCleared(order.FieldPromotionID) {
		fields = append(fields, order.FieldPromotionID)
	}
	if m.FieldCleared(order.FieldDurationDays) {
		fields = append(fields, order.FieldDurationDays)
	}
	if m.FieldCleared(order.FieldOrderType) {
		fields = append(fields, order.FieldOrderType)
	}
	if m.FieldCleared(order.FieldInvestmentType) {
		fields = append(fields, order.FieldInvestmentType)
	}
	if m.FieldCleared(order.FieldCouponIds) {
		fields = append(fields, order.FieldCouponIds)
	}
	if m.FieldCleared(order.FieldPaymentType) {
		fields = append(fields, order.FieldPaymentType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	case order.FieldParentOrderID:
		m.ClearParentOrderID()
		return nil
	case order.FieldUnitsV1:
		m.ClearUnitsV1()
		return nil
	case order.FieldGoodValue:
		m.ClearGoodValue()
		return nil
	case order.FieldPaymentAmount:
		m.ClearPaymentAmount()
		return nil
	case order.FieldDiscountAmount:
		m.ClearDiscountAmount()
		return nil
	case order.FieldPromotionID:
		m.ClearPromotionID()
		return nil
	case order.FieldDurationDays:
		m.ClearDurationDays()
		return nil
	case order.FieldOrderType:
		m.ClearOrderType()
		return nil
	case order.FieldInvestmentType:
		m.ClearInvestmentType()
		return nil
	case order.FieldCouponIds:
		m.ClearCouponIds()
		return nil
	case order.FieldPaymentType:
		m.ClearPaymentType()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case order.FieldAppID:
		m.ResetAppID()
		return nil
	case order.FieldUserID:
		m.ResetUserID()
		return nil
	case order.FieldGoodID:
		m.ResetGoodID()
		return nil
	case order.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case order.FieldParentOrderID:
		m.ResetParentOrderID()
		return nil
	case order.FieldUnitsV1:
		m.ResetUnitsV1()
		return nil
	case order.FieldGoodValue:
		m.ResetGoodValue()
		return nil
	case order.FieldPaymentAmount:
		m.ResetPaymentAmount()
		return nil
	case order.FieldDiscountAmount:
		m.ResetDiscountAmount()
		return nil
	case order.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case order.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case order.FieldOrderType:
		m.ResetOrderType()
		return nil
	case order.FieldInvestmentType:
		m.ResetInvestmentType()
		return nil
	case order.FieldCouponIds:
		m.ResetCouponIds()
		return nil
	case order.FieldPaymentType:
		m.ResetPaymentType()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// OrderStateMutation represents an operation that mutates the OrderState nodes in the graph.
type OrderStateMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *uint32
	addcreated_at          *int32
	updated_at             *uint32
	addupdated_at          *int32
	deleted_at             *uint32
	adddeleted_at          *int32
	order_id               *uuid.UUID
	order_state            *string
	start_mode             *string
	start_at               *uint32
	addstart_at            *int32
	end_at                 *uint32
	addend_at              *int32
	last_benefit_at        *uint32
	addlast_benefit_at     *int32
	benefit_state          *string
	user_set_paid          *bool
	user_set_cancelled     *bool
	payment_transaction_id *string
	payment_finish_amount  *decimal.Decimal
	payment_state          *string
	outofgas_hours         *uint32
	addoutofgas_hours      *int32
	compensate_hours       *uint32
	addcompensate_hours    *int32
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*OrderState, error)
	predicates             []predicate.OrderState
}

var _ ent.Mutation = (*OrderStateMutation)(nil)

// orderstateOption allows management of the mutation configuration using functional options.
type orderstateOption func(*OrderStateMutation)

// newOrderStateMutation creates new mutation for the OrderState entity.
func newOrderStateMutation(c config, op Op, opts ...orderstateOption) *OrderStateMutation {
	m := &OrderStateMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderStateID sets the ID field of the mutation.
func withOrderStateID(id uuid.UUID) orderstateOption {
	return func(m *OrderStateMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderState
		)
		m.oldValue = func(ctx context.Context) (*OrderState, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderState sets the old OrderState of the mutation.
func withOrderState(node *OrderState) orderstateOption {
	return func(m *OrderStateMutation) {
		m.oldValue = func(context.Context) (*OrderState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderState entities.
func (m *OrderStateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderStateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderStateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderState.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderStateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderStateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderStateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderStateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderStateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderStateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderStateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderStateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderStateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderStateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderStateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderStateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderStateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderStateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderStateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderStateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderStateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderStateMutation) ResetOrderID() {
	m.order_id = nil
}

// SetOrderState sets the "order_state" field.
func (m *OrderStateMutation) SetOrderState(s string) {
	m.order_state = &s
}

// OrderState returns the value of the "order_state" field in the mutation.
func (m *OrderStateMutation) OrderState() (r string, exists bool) {
	v := m.order_state
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderState returns the old "order_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOrderState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderState: %w", err)
	}
	return oldValue.OrderState, nil
}

// ClearOrderState clears the value of the "order_state" field.
func (m *OrderStateMutation) ClearOrderState() {
	m.order_state = nil
	m.clearedFields[orderstate.FieldOrderState] = struct{}{}
}

// OrderStateCleared returns if the "order_state" field was cleared in this mutation.
func (m *OrderStateMutation) OrderStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldOrderState]
	return ok
}

// ResetOrderState resets all changes to the "order_state" field.
func (m *OrderStateMutation) ResetOrderState() {
	m.order_state = nil
	delete(m.clearedFields, orderstate.FieldOrderState)
}

// SetStartMode sets the "start_mode" field.
func (m *OrderStateMutation) SetStartMode(s string) {
	m.start_mode = &s
}

// StartMode returns the value of the "start_mode" field in the mutation.
func (m *OrderStateMutation) StartMode() (r string, exists bool) {
	v := m.start_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldStartMode returns the old "start_mode" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldStartMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartMode: %w", err)
	}
	return oldValue.StartMode, nil
}

// ClearStartMode clears the value of the "start_mode" field.
func (m *OrderStateMutation) ClearStartMode() {
	m.start_mode = nil
	m.clearedFields[orderstate.FieldStartMode] = struct{}{}
}

// StartModeCleared returns if the "start_mode" field was cleared in this mutation.
func (m *OrderStateMutation) StartModeCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldStartMode]
	return ok
}

// ResetStartMode resets all changes to the "start_mode" field.
func (m *OrderStateMutation) ResetStartMode() {
	m.start_mode = nil
	delete(m.clearedFields, orderstate.FieldStartMode)
}

// SetStartAt sets the "start_at" field.
func (m *OrderStateMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OrderStateMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OrderStateMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OrderStateMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OrderStateMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[orderstate.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OrderStateMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OrderStateMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, orderstate.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *OrderStateMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *OrderStateMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *OrderStateMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *OrderStateMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *OrderStateMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[orderstate.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *OrderStateMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *OrderStateMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, orderstate.FieldEndAt)
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (m *OrderStateMutation) SetLastBenefitAt(u uint32) {
	m.last_benefit_at = &u
	m.addlast_benefit_at = nil
}

// LastBenefitAt returns the value of the "last_benefit_at" field in the mutation.
func (m *OrderStateMutation) LastBenefitAt() (r uint32, exists bool) {
	v := m.last_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitAt returns the old "last_benefit_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldLastBenefitAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitAt: %w", err)
	}
	return oldValue.LastBenefitAt, nil
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (m *OrderStateMutation) AddLastBenefitAt(u int32) {
	if m.addlast_benefit_at != nil {
		*m.addlast_benefit_at += u
	} else {
		m.addlast_benefit_at = &u
	}
}

// AddedLastBenefitAt returns the value that was added to the "last_benefit_at" field in this mutation.
func (m *OrderStateMutation) AddedLastBenefitAt() (r int32, exists bool) {
	v := m.addlast_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (m *OrderStateMutation) ClearLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	m.clearedFields[orderstate.FieldLastBenefitAt] = struct{}{}
}

// LastBenefitAtCleared returns if the "last_benefit_at" field was cleared in this mutation.
func (m *OrderStateMutation) LastBenefitAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldLastBenefitAt]
	return ok
}

// ResetLastBenefitAt resets all changes to the "last_benefit_at" field.
func (m *OrderStateMutation) ResetLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	delete(m.clearedFields, orderstate.FieldLastBenefitAt)
}

// SetBenefitState sets the "benefit_state" field.
func (m *OrderStateMutation) SetBenefitState(s string) {
	m.benefit_state = &s
}

// BenefitState returns the value of the "benefit_state" field in the mutation.
func (m *OrderStateMutation) BenefitState() (r string, exists bool) {
	v := m.benefit_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitState returns the old "benefit_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldBenefitState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitState: %w", err)
	}
	return oldValue.BenefitState, nil
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (m *OrderStateMutation) ClearBenefitState() {
	m.benefit_state = nil
	m.clearedFields[orderstate.FieldBenefitState] = struct{}{}
}

// BenefitStateCleared returns if the "benefit_state" field was cleared in this mutation.
func (m *OrderStateMutation) BenefitStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldBenefitState]
	return ok
}

// ResetBenefitState resets all changes to the "benefit_state" field.
func (m *OrderStateMutation) ResetBenefitState() {
	m.benefit_state = nil
	delete(m.clearedFields, orderstate.FieldBenefitState)
}

// SetUserSetPaid sets the "user_set_paid" field.
func (m *OrderStateMutation) SetUserSetPaid(b bool) {
	m.user_set_paid = &b
}

// UserSetPaid returns the value of the "user_set_paid" field in the mutation.
func (m *OrderStateMutation) UserSetPaid() (r bool, exists bool) {
	v := m.user_set_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetPaid returns the old "user_set_paid" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUserSetPaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetPaid: %w", err)
	}
	return oldValue.UserSetPaid, nil
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (m *OrderStateMutation) ClearUserSetPaid() {
	m.user_set_paid = nil
	m.clearedFields[orderstate.FieldUserSetPaid] = struct{}{}
}

// UserSetPaidCleared returns if the "user_set_paid" field was cleared in this mutation.
func (m *OrderStateMutation) UserSetPaidCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldUserSetPaid]
	return ok
}

// ResetUserSetPaid resets all changes to the "user_set_paid" field.
func (m *OrderStateMutation) ResetUserSetPaid() {
	m.user_set_paid = nil
	delete(m.clearedFields, orderstate.FieldUserSetPaid)
}

// SetUserSetCancelled sets the "user_set_cancelled" field.
func (m *OrderStateMutation) SetUserSetCancelled(b bool) {
	m.user_set_cancelled = &b
}

// UserSetCancelled returns the value of the "user_set_cancelled" field in the mutation.
func (m *OrderStateMutation) UserSetCancelled() (r bool, exists bool) {
	v := m.user_set_cancelled
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetCancelled returns the old "user_set_cancelled" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUserSetCancelled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetCancelled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetCancelled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetCancelled: %w", err)
	}
	return oldValue.UserSetCancelled, nil
}

// ClearUserSetCancelled clears the value of the "user_set_cancelled" field.
func (m *OrderStateMutation) ClearUserSetCancelled() {
	m.user_set_cancelled = nil
	m.clearedFields[orderstate.FieldUserSetCancelled] = struct{}{}
}

// UserSetCancelledCleared returns if the "user_set_cancelled" field was cleared in this mutation.
func (m *OrderStateMutation) UserSetCancelledCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldUserSetCancelled]
	return ok
}

// ResetUserSetCancelled resets all changes to the "user_set_cancelled" field.
func (m *OrderStateMutation) ResetUserSetCancelled() {
	m.user_set_cancelled = nil
	delete(m.clearedFields, orderstate.FieldUserSetCancelled)
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (m *OrderStateMutation) SetPaymentTransactionID(s string) {
	m.payment_transaction_id = &s
}

// PaymentTransactionID returns the value of the "payment_transaction_id" field in the mutation.
func (m *OrderStateMutation) PaymentTransactionID() (r string, exists bool) {
	v := m.payment_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentTransactionID returns the old "payment_transaction_id" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentTransactionID: %w", err)
	}
	return oldValue.PaymentTransactionID, nil
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (m *OrderStateMutation) ClearPaymentTransactionID() {
	m.payment_transaction_id = nil
	m.clearedFields[orderstate.FieldPaymentTransactionID] = struct{}{}
}

// PaymentTransactionIDCleared returns if the "payment_transaction_id" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentTransactionIDCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentTransactionID]
	return ok
}

// ResetPaymentTransactionID resets all changes to the "payment_transaction_id" field.
func (m *OrderStateMutation) ResetPaymentTransactionID() {
	m.payment_transaction_id = nil
	delete(m.clearedFields, orderstate.FieldPaymentTransactionID)
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (m *OrderStateMutation) SetPaymentFinishAmount(d decimal.Decimal) {
	m.payment_finish_amount = &d
}

// PaymentFinishAmount returns the value of the "payment_finish_amount" field in the mutation.
func (m *OrderStateMutation) PaymentFinishAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_finish_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentFinishAmount returns the old "payment_finish_amount" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentFinishAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentFinishAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentFinishAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentFinishAmount: %w", err)
	}
	return oldValue.PaymentFinishAmount, nil
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (m *OrderStateMutation) ClearPaymentFinishAmount() {
	m.payment_finish_amount = nil
	m.clearedFields[orderstate.FieldPaymentFinishAmount] = struct{}{}
}

// PaymentFinishAmountCleared returns if the "payment_finish_amount" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentFinishAmountCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentFinishAmount]
	return ok
}

// ResetPaymentFinishAmount resets all changes to the "payment_finish_amount" field.
func (m *OrderStateMutation) ResetPaymentFinishAmount() {
	m.payment_finish_amount = nil
	delete(m.clearedFields, orderstate.FieldPaymentFinishAmount)
}

// SetPaymentState sets the "payment_state" field.
func (m *OrderStateMutation) SetPaymentState(s string) {
	m.payment_state = &s
}

// PaymentState returns the value of the "payment_state" field in the mutation.
func (m *OrderStateMutation) PaymentState() (r string, exists bool) {
	v := m.payment_state
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentState returns the old "payment_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentState: %w", err)
	}
	return oldValue.PaymentState, nil
}

// ClearPaymentState clears the value of the "payment_state" field.
func (m *OrderStateMutation) ClearPaymentState() {
	m.payment_state = nil
	m.clearedFields[orderstate.FieldPaymentState] = struct{}{}
}

// PaymentStateCleared returns if the "payment_state" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentState]
	return ok
}

// ResetPaymentState resets all changes to the "payment_state" field.
func (m *OrderStateMutation) ResetPaymentState() {
	m.payment_state = nil
	delete(m.clearedFields, orderstate.FieldPaymentState)
}

// SetOutofgasHours sets the "outofgas_hours" field.
func (m *OrderStateMutation) SetOutofgasHours(u uint32) {
	m.outofgas_hours = &u
	m.addoutofgas_hours = nil
}

// OutofgasHours returns the value of the "outofgas_hours" field in the mutation.
func (m *OrderStateMutation) OutofgasHours() (r uint32, exists bool) {
	v := m.outofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldOutofgasHours returns the old "outofgas_hours" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOutofgasHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutofgasHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutofgasHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutofgasHours: %w", err)
	}
	return oldValue.OutofgasHours, nil
}

// AddOutofgasHours adds u to the "outofgas_hours" field.
func (m *OrderStateMutation) AddOutofgasHours(u int32) {
	if m.addoutofgas_hours != nil {
		*m.addoutofgas_hours += u
	} else {
		m.addoutofgas_hours = &u
	}
}

// AddedOutofgasHours returns the value that was added to the "outofgas_hours" field in this mutation.
func (m *OrderStateMutation) AddedOutofgasHours() (r int32, exists bool) {
	v := m.addoutofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutofgasHours clears the value of the "outofgas_hours" field.
func (m *OrderStateMutation) ClearOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	m.clearedFields[orderstate.FieldOutofgasHours] = struct{}{}
}

// OutofgasHoursCleared returns if the "outofgas_hours" field was cleared in this mutation.
func (m *OrderStateMutation) OutofgasHoursCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldOutofgasHours]
	return ok
}

// ResetOutofgasHours resets all changes to the "outofgas_hours" field.
func (m *OrderStateMutation) ResetOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	delete(m.clearedFields, orderstate.FieldOutofgasHours)
}

// SetCompensateHours sets the "compensate_hours" field.
func (m *OrderStateMutation) SetCompensateHours(u uint32) {
	m.compensate_hours = &u
	m.addcompensate_hours = nil
}

// CompensateHours returns the value of the "compensate_hours" field in the mutation.
func (m *OrderStateMutation) CompensateHours() (r uint32, exists bool) {
	v := m.compensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateHours returns the old "compensate_hours" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldCompensateHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateHours: %w", err)
	}
	return oldValue.CompensateHours, nil
}

// AddCompensateHours adds u to the "compensate_hours" field.
func (m *OrderStateMutation) AddCompensateHours(u int32) {
	if m.addcompensate_hours != nil {
		*m.addcompensate_hours += u
	} else {
		m.addcompensate_hours = &u
	}
}

// AddedCompensateHours returns the value that was added to the "compensate_hours" field in this mutation.
func (m *OrderStateMutation) AddedCompensateHours() (r int32, exists bool) {
	v := m.addcompensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearCompensateHours clears the value of the "compensate_hours" field.
func (m *OrderStateMutation) ClearCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	m.clearedFields[orderstate.FieldCompensateHours] = struct{}{}
}

// CompensateHoursCleared returns if the "compensate_hours" field was cleared in this mutation.
func (m *OrderStateMutation) CompensateHoursCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldCompensateHours]
	return ok
}

// ResetCompensateHours resets all changes to the "compensate_hours" field.
func (m *OrderStateMutation) ResetCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	delete(m.clearedFields, orderstate.FieldCompensateHours)
}

// Where appends a list predicates to the OrderStateMutation builder.
func (m *OrderStateMutation) Where(ps ...predicate.OrderState) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderStateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderState).
func (m *OrderStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderStateMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, orderstate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderstate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderstate.FieldDeletedAt)
	}
	if m.order_id != nil {
		fields = append(fields, orderstate.FieldOrderID)
	}
	if m.order_state != nil {
		fields = append(fields, orderstate.FieldOrderState)
	}
	if m.start_mode != nil {
		fields = append(fields, orderstate.FieldStartMode)
	}
	if m.start_at != nil {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.last_benefit_at != nil {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.benefit_state != nil {
		fields = append(fields, orderstate.FieldBenefitState)
	}
	if m.user_set_paid != nil {
		fields = append(fields, orderstate.FieldUserSetPaid)
	}
	if m.user_set_cancelled != nil {
		fields = append(fields, orderstate.FieldUserSetCancelled)
	}
	if m.payment_transaction_id != nil {
		fields = append(fields, orderstate.FieldPaymentTransactionID)
	}
	if m.payment_finish_amount != nil {
		fields = append(fields, orderstate.FieldPaymentFinishAmount)
	}
	if m.payment_state != nil {
		fields = append(fields, orderstate.FieldPaymentState)
	}
	if m.outofgas_hours != nil {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.compensate_hours != nil {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.CreatedAt()
	case orderstate.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderstate.FieldDeletedAt:
		return m.DeletedAt()
	case orderstate.FieldOrderID:
		return m.OrderID()
	case orderstate.FieldOrderState:
		return m.OrderState()
	case orderstate.FieldStartMode:
		return m.StartMode()
	case orderstate.FieldStartAt:
		return m.StartAt()
	case orderstate.FieldEndAt:
		return m.EndAt()
	case orderstate.FieldLastBenefitAt:
		return m.LastBenefitAt()
	case orderstate.FieldBenefitState:
		return m.BenefitState()
	case orderstate.FieldUserSetPaid:
		return m.UserSetPaid()
	case orderstate.FieldUserSetCancelled:
		return m.UserSetCancelled()
	case orderstate.FieldPaymentTransactionID:
		return m.PaymentTransactionID()
	case orderstate.FieldPaymentFinishAmount:
		return m.PaymentFinishAmount()
	case orderstate.FieldPaymentState:
		return m.PaymentState()
	case orderstate.FieldOutofgasHours:
		return m.OutofgasHours()
	case orderstate.FieldCompensateHours:
		return m.CompensateHours()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderstate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderstate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderstate.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderstate.FieldOrderState:
		return m.OldOrderState(ctx)
	case orderstate.FieldStartMode:
		return m.OldStartMode(ctx)
	case orderstate.FieldStartAt:
		return m.OldStartAt(ctx)
	case orderstate.FieldEndAt:
		return m.OldEndAt(ctx)
	case orderstate.FieldLastBenefitAt:
		return m.OldLastBenefitAt(ctx)
	case orderstate.FieldBenefitState:
		return m.OldBenefitState(ctx)
	case orderstate.FieldUserSetPaid:
		return m.OldUserSetPaid(ctx)
	case orderstate.FieldUserSetCancelled:
		return m.OldUserSetCancelled(ctx)
	case orderstate.FieldPaymentTransactionID:
		return m.OldPaymentTransactionID(ctx)
	case orderstate.FieldPaymentFinishAmount:
		return m.OldPaymentFinishAmount(ctx)
	case orderstate.FieldPaymentState:
		return m.OldPaymentState(ctx)
	case orderstate.FieldOutofgasHours:
		return m.OldOutofgasHours(ctx)
	case orderstate.FieldCompensateHours:
		return m.OldCompensateHours(ctx)
	}
	return nil, fmt.Errorf("unknown OrderState field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderstate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderstate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderstate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderstate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderstate.FieldOrderState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderState(v)
		return nil
	case orderstate.FieldStartMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartMode(v)
		return nil
	case orderstate.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case orderstate.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case orderstate.FieldLastBenefitAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitAt(v)
		return nil
	case orderstate.FieldBenefitState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitState(v)
		return nil
	case orderstate.FieldUserSetPaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetPaid(v)
		return nil
	case orderstate.FieldUserSetCancelled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetCancelled(v)
		return nil
	case orderstate.FieldPaymentTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentTransactionID(v)
		return nil
	case orderstate.FieldPaymentFinishAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentFinishAmount(v)
		return nil
	case orderstate.FieldPaymentState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentState(v)
		return nil
	case orderstate.FieldOutofgasHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutofgasHours(v)
		return nil
	case orderstate.FieldCompensateHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateHours(v)
		return nil
	}
	return fmt.Errorf("unknown OrderState field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderStateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderstate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderstate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderstate.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.addlast_benefit_at != nil {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.addoutofgas_hours != nil {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.addcompensate_hours != nil {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderStateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderstate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderstate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case orderstate.FieldStartAt:
		return m.AddedStartAt()
	case orderstate.FieldEndAt:
		return m.AddedEndAt()
	case orderstate.FieldLastBenefitAt:
		return m.AddedLastBenefitAt()
	case orderstate.FieldOutofgasHours:
		return m.AddedOutofgasHours()
	case orderstate.FieldCompensateHours:
		return m.AddedCompensateHours()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderstate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderstate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderstate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case orderstate.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case orderstate.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	case orderstate.FieldLastBenefitAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitAt(v)
		return nil
	case orderstate.FieldOutofgasHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutofgasHours(v)
		return nil
	case orderstate.FieldCompensateHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompensateHours(v)
		return nil
	}
	return fmt.Errorf("unknown OrderState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderStateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderstate.FieldOrderState) {
		fields = append(fields, orderstate.FieldOrderState)
	}
	if m.FieldCleared(orderstate.FieldStartMode) {
		fields = append(fields, orderstate.FieldStartMode)
	}
	if m.FieldCleared(orderstate.FieldStartAt) {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.FieldCleared(orderstate.FieldEndAt) {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.FieldCleared(orderstate.FieldLastBenefitAt) {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.FieldCleared(orderstate.FieldBenefitState) {
		fields = append(fields, orderstate.FieldBenefitState)
	}
	if m.FieldCleared(orderstate.FieldUserSetPaid) {
		fields = append(fields, orderstate.FieldUserSetPaid)
	}
	if m.FieldCleared(orderstate.FieldUserSetCancelled) {
		fields = append(fields, orderstate.FieldUserSetCancelled)
	}
	if m.FieldCleared(orderstate.FieldPaymentTransactionID) {
		fields = append(fields, orderstate.FieldPaymentTransactionID)
	}
	if m.FieldCleared(orderstate.FieldPaymentFinishAmount) {
		fields = append(fields, orderstate.FieldPaymentFinishAmount)
	}
	if m.FieldCleared(orderstate.FieldPaymentState) {
		fields = append(fields, orderstate.FieldPaymentState)
	}
	if m.FieldCleared(orderstate.FieldOutofgasHours) {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.FieldCleared(orderstate.FieldCompensateHours) {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderStateMutation) ClearField(name string) error {
	switch name {
	case orderstate.FieldOrderState:
		m.ClearOrderState()
		return nil
	case orderstate.FieldStartMode:
		m.ClearStartMode()
		return nil
	case orderstate.FieldStartAt:
		m.ClearStartAt()
		return nil
	case orderstate.FieldEndAt:
		m.ClearEndAt()
		return nil
	case orderstate.FieldLastBenefitAt:
		m.ClearLastBenefitAt()
		return nil
	case orderstate.FieldBenefitState:
		m.ClearBenefitState()
		return nil
	case orderstate.FieldUserSetPaid:
		m.ClearUserSetPaid()
		return nil
	case orderstate.FieldUserSetCancelled:
		m.ClearUserSetCancelled()
		return nil
	case orderstate.FieldPaymentTransactionID:
		m.ClearPaymentTransactionID()
		return nil
	case orderstate.FieldPaymentFinishAmount:
		m.ClearPaymentFinishAmount()
		return nil
	case orderstate.FieldPaymentState:
		m.ClearPaymentState()
		return nil
	case orderstate.FieldOutofgasHours:
		m.ClearOutofgasHours()
		return nil
	case orderstate.FieldCompensateHours:
		m.ClearCompensateHours()
		return nil
	}
	return fmt.Errorf("unknown OrderState nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderStateMutation) ResetField(name string) error {
	switch name {
	case orderstate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderstate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderstate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderstate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderstate.FieldOrderState:
		m.ResetOrderState()
		return nil
	case orderstate.FieldStartMode:
		m.ResetStartMode()
		return nil
	case orderstate.FieldStartAt:
		m.ResetStartAt()
		return nil
	case orderstate.FieldEndAt:
		m.ResetEndAt()
		return nil
	case orderstate.FieldLastBenefitAt:
		m.ResetLastBenefitAt()
		return nil
	case orderstate.FieldBenefitState:
		m.ResetBenefitState()
		return nil
	case orderstate.FieldUserSetPaid:
		m.ResetUserSetPaid()
		return nil
	case orderstate.FieldUserSetCancelled:
		m.ResetUserSetCancelled()
		return nil
	case orderstate.FieldPaymentTransactionID:
		m.ResetPaymentTransactionID()
		return nil
	case orderstate.FieldPaymentFinishAmount:
		m.ResetPaymentFinishAmount()
		return nil
	case orderstate.FieldPaymentState:
		m.ResetPaymentState()
		return nil
	case orderstate.FieldOutofgasHours:
		m.ResetOutofgasHours()
		return nil
	case orderstate.FieldCompensateHours:
		m.ResetCompensateHours()
		return nil
	}
	return fmt.Errorf("unknown OrderState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderState unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderState edge %s", name)
}

// OutOfGasMutation represents an operation that mutates the OutOfGas nodes in the graph.
type OutOfGasMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	order_id      *uuid.UUID
	start_at      *uint32
	addstart_at   *int32
	end_at        *uint32
	addend_at     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OutOfGas, error)
	predicates    []predicate.OutOfGas
}

var _ ent.Mutation = (*OutOfGasMutation)(nil)

// outofgasOption allows management of the mutation configuration using functional options.
type outofgasOption func(*OutOfGasMutation)

// newOutOfGasMutation creates new mutation for the OutOfGas entity.
func newOutOfGasMutation(c config, op Op, opts ...outofgasOption) *OutOfGasMutation {
	m := &OutOfGasMutation{
		config:        c,
		op:            op,
		typ:           TypeOutOfGas,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutOfGasID sets the ID field of the mutation.
func withOutOfGasID(id uuid.UUID) outofgasOption {
	return func(m *OutOfGasMutation) {
		var (
			err   error
			once  sync.Once
			value *OutOfGas
		)
		m.oldValue = func(ctx context.Context) (*OutOfGas, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OutOfGas.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutOfGas sets the old OutOfGas of the mutation.
func withOutOfGas(node *OutOfGas) outofgasOption {
	return func(m *OutOfGasMutation) {
		m.oldValue = func(context.Context) (*OutOfGas, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutOfGasMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutOfGasMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OutOfGas entities.
func (m *OutOfGasMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutOfGasMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutOfGasMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OutOfGas.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OutOfGasMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OutOfGasMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OutOfGasMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OutOfGasMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OutOfGasMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OutOfGasMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OutOfGasMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OutOfGasMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OutOfGasMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OutOfGasMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OutOfGasMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OutOfGasMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OutOfGasMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OutOfGasMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OutOfGasMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *OutOfGasMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OutOfGasMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OutOfGasMutation) ResetOrderID() {
	m.order_id = nil
}

// SetStartAt sets the "start_at" field.
func (m *OutOfGasMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OutOfGasMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OutOfGasMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OutOfGasMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OutOfGasMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[outofgas.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OutOfGasMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OutOfGasMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, outofgas.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *OutOfGasMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *OutOfGasMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *OutOfGasMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *OutOfGasMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *OutOfGasMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[outofgas.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *OutOfGasMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *OutOfGasMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, outofgas.FieldEndAt)
}

// Where appends a list predicates to the OutOfGasMutation builder.
func (m *OutOfGasMutation) Where(ps ...predicate.OutOfGas) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutOfGasMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OutOfGas).
func (m *OutOfGasMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutOfGasMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.order_id != nil {
		fields = append(fields, outofgas.FieldOrderID)
	}
	if m.start_at != nil {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutOfGasMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.CreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.UpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.DeletedAt()
	case outofgas.FieldOrderID:
		return m.OrderID()
	case outofgas.FieldStartAt:
		return m.StartAt()
	case outofgas.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutOfGasMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case outofgas.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case outofgas.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case outofgas.FieldOrderID:
		return m.OldOrderID(ctx)
	case outofgas.FieldStartAt:
		return m.OldStartAt(ctx)
	case outofgas.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown OutOfGas field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case outofgas.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case outofgas.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case outofgas.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutOfGasMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutOfGasMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.AddedCreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.AddedDeletedAt()
	case outofgas.FieldStartAt:
		return m.AddedStartAt()
	case outofgas.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case outofgas.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case outofgas.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutOfGasMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outofgas.FieldStartAt) {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.FieldCleared(outofgas.FieldEndAt) {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutOfGasMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutOfGasMutation) ClearField(name string) error {
	switch name {
	case outofgas.FieldStartAt:
		m.ClearStartAt()
		return nil
	case outofgas.FieldEndAt:
		m.ClearEndAt()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutOfGasMutation) ResetField(name string) error {
	switch name {
	case outofgas.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case outofgas.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case outofgas.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case outofgas.FieldOrderID:
		m.ResetOrderID()
		return nil
	case outofgas.FieldStartAt:
		m.ResetStartAt()
		return nil
	case outofgas.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutOfGasMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutOfGasMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutOfGasMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutOfGasMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutOfGasMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutOfGasMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutOfGasMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutOfGasMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *uint32
	addcreated_at           *int32
	updated_at              *uint32
	addupdated_at           *int32
	deleted_at              *uint32
	adddeleted_at           *int32
	app_id                  *uuid.UUID
	user_id                 *uuid.UUID
	good_id                 *uuid.UUID
	order_id                *uuid.UUID
	account_id              *uuid.UUID
	coin_type_id            *uuid.UUID
	start_amount            *decimal.Decimal
	transfer_amount         *decimal.Decimal
	balance_amount          *decimal.Decimal
	coin_usd_currency       *decimal.Decimal
	local_coin_usd_currency *decimal.Decimal
	live_coin_usd_currency  *decimal.Decimal
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Payment, error)
	predicates              []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id uuid.UUID) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PaymentMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PaymentMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PaymentMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PaymentMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PaymentMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PaymentMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PaymentMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PaymentMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PaymentMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *PaymentMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *PaymentMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *PaymentMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *PaymentMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PaymentMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PaymentMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *PaymentMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PaymentMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PaymentMutation) ResetGoodID() {
	m.good_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PaymentMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PaymentMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PaymentMutation) ResetOrderID() {
	m.order_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *PaymentMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *PaymentMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *PaymentMutation) ResetAccountID() {
	m.account_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *PaymentMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *PaymentMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *PaymentMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetStartAmount sets the "start_amount" field.
func (m *PaymentMutation) SetStartAmount(d decimal.Decimal) {
	m.start_amount = &d
}

// StartAmount returns the value of the "start_amount" field in the mutation.
func (m *PaymentMutation) StartAmount() (r decimal.Decimal, exists bool) {
	v := m.start_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAmount returns the old "start_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStartAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAmount: %w", err)
	}
	return oldValue.StartAmount, nil
}

// ClearStartAmount clears the value of the "start_amount" field.
func (m *PaymentMutation) ClearStartAmount() {
	m.start_amount = nil
	m.clearedFields[payment.FieldStartAmount] = struct{}{}
}

// StartAmountCleared returns if the "start_amount" field was cleared in this mutation.
func (m *PaymentMutation) StartAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldStartAmount]
	return ok
}

// ResetStartAmount resets all changes to the "start_amount" field.
func (m *PaymentMutation) ResetStartAmount() {
	m.start_amount = nil
	delete(m.clearedFields, payment.FieldStartAmount)
}

// SetTransferAmount sets the "transfer_amount" field.
func (m *PaymentMutation) SetTransferAmount(d decimal.Decimal) {
	m.transfer_amount = &d
}

// TransferAmount returns the value of the "transfer_amount" field in the mutation.
func (m *PaymentMutation) TransferAmount() (r decimal.Decimal, exists bool) {
	v := m.transfer_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferAmount returns the old "transfer_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldTransferAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferAmount: %w", err)
	}
	return oldValue.TransferAmount, nil
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (m *PaymentMutation) ClearTransferAmount() {
	m.transfer_amount = nil
	m.clearedFields[payment.FieldTransferAmount] = struct{}{}
}

// TransferAmountCleared returns if the "transfer_amount" field was cleared in this mutation.
func (m *PaymentMutation) TransferAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldTransferAmount]
	return ok
}

// ResetTransferAmount resets all changes to the "transfer_amount" field.
func (m *PaymentMutation) ResetTransferAmount() {
	m.transfer_amount = nil
	delete(m.clearedFields, payment.FieldTransferAmount)
}

// SetBalanceAmount sets the "balance_amount" field.
func (m *PaymentMutation) SetBalanceAmount(d decimal.Decimal) {
	m.balance_amount = &d
}

// BalanceAmount returns the value of the "balance_amount" field in the mutation.
func (m *PaymentMutation) BalanceAmount() (r decimal.Decimal, exists bool) {
	v := m.balance_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceAmount returns the old "balance_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldBalanceAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceAmount: %w", err)
	}
	return oldValue.BalanceAmount, nil
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (m *PaymentMutation) ClearBalanceAmount() {
	m.balance_amount = nil
	m.clearedFields[payment.FieldBalanceAmount] = struct{}{}
}

// BalanceAmountCleared returns if the "balance_amount" field was cleared in this mutation.
func (m *PaymentMutation) BalanceAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldBalanceAmount]
	return ok
}

// ResetBalanceAmount resets all changes to the "balance_amount" field.
func (m *PaymentMutation) ResetBalanceAmount() {
	m.balance_amount = nil
	delete(m.clearedFields, payment.FieldBalanceAmount)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *PaymentMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *PaymentMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *PaymentMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.clearedFields[payment.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *PaymentMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldCoinUsdCurrency)
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (m *PaymentMutation) SetLocalCoinUsdCurrency(d decimal.Decimal) {
	m.local_coin_usd_currency = &d
}

// LocalCoinUsdCurrency returns the value of the "local_coin_usd_currency" field in the mutation.
func (m *PaymentMutation) LocalCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.local_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalCoinUsdCurrency returns the old "local_coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldLocalCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalCoinUsdCurrency: %w", err)
	}
	return oldValue.LocalCoinUsdCurrency, nil
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (m *PaymentMutation) ClearLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	m.clearedFields[payment.FieldLocalCoinUsdCurrency] = struct{}{}
}

// LocalCoinUsdCurrencyCleared returns if the "local_coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) LocalCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldLocalCoinUsdCurrency]
	return ok
}

// ResetLocalCoinUsdCurrency resets all changes to the "local_coin_usd_currency" field.
func (m *PaymentMutation) ResetLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldLocalCoinUsdCurrency)
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (m *PaymentMutation) SetLiveCoinUsdCurrency(d decimal.Decimal) {
	m.live_coin_usd_currency = &d
}

// LiveCoinUsdCurrency returns the value of the "live_coin_usd_currency" field in the mutation.
func (m *PaymentMutation) LiveCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.live_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveCoinUsdCurrency returns the old "live_coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldLiveCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveCoinUsdCurrency: %w", err)
	}
	return oldValue.LiveCoinUsdCurrency, nil
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (m *PaymentMutation) ClearLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	m.clearedFields[payment.FieldLiveCoinUsdCurrency] = struct{}{}
}

// LiveCoinUsdCurrencyCleared returns if the "live_coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) LiveCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldLiveCoinUsdCurrency]
	return ok
}

// ResetLiveCoinUsdCurrency resets all changes to the "live_coin_usd_currency" field.
func (m *PaymentMutation) ResetLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldLiveCoinUsdCurrency)
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, payment.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, payment.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, payment.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, payment.FieldOrderID)
	}
	if m.account_id != nil {
		fields = append(fields, payment.FieldAccountID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, payment.FieldCoinTypeID)
	}
	if m.start_amount != nil {
		fields = append(fields, payment.FieldStartAmount)
	}
	if m.transfer_amount != nil {
		fields = append(fields, payment.FieldTransferAmount)
	}
	if m.balance_amount != nil {
		fields = append(fields, payment.FieldBalanceAmount)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, payment.FieldCoinUsdCurrency)
	}
	if m.local_coin_usd_currency != nil {
		fields = append(fields, payment.FieldLocalCoinUsdCurrency)
	}
	if m.live_coin_usd_currency != nil {
		fields = append(fields, payment.FieldLiveCoinUsdCurrency)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	case payment.FieldDeletedAt:
		return m.DeletedAt()
	case payment.FieldAppID:
		return m.AppID()
	case payment.FieldUserID:
		return m.UserID()
	case payment.FieldGoodID:
		return m.GoodID()
	case payment.FieldOrderID:
		return m.OrderID()
	case payment.FieldAccountID:
		return m.AccountID()
	case payment.FieldCoinTypeID:
		return m.CoinTypeID()
	case payment.FieldStartAmount:
		return m.StartAmount()
	case payment.FieldTransferAmount:
		return m.TransferAmount()
	case payment.FieldBalanceAmount:
		return m.BalanceAmount()
	case payment.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case payment.FieldLocalCoinUsdCurrency:
		return m.LocalCoinUsdCurrency()
	case payment.FieldLiveCoinUsdCurrency:
		return m.LiveCoinUsdCurrency()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case payment.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case payment.FieldAppID:
		return m.OldAppID(ctx)
	case payment.FieldUserID:
		return m.OldUserID(ctx)
	case payment.FieldGoodID:
		return m.OldGoodID(ctx)
	case payment.FieldOrderID:
		return m.OldOrderID(ctx)
	case payment.FieldAccountID:
		return m.OldAccountID(ctx)
	case payment.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case payment.FieldStartAmount:
		return m.OldStartAmount(ctx)
	case payment.FieldTransferAmount:
		return m.OldTransferAmount(ctx)
	case payment.FieldBalanceAmount:
		return m.OldBalanceAmount(ctx)
	case payment.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case payment.FieldLocalCoinUsdCurrency:
		return m.OldLocalCoinUsdCurrency(ctx)
	case payment.FieldLiveCoinUsdCurrency:
		return m.OldLiveCoinUsdCurrency(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case payment.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case payment.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case payment.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case payment.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case payment.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case payment.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case payment.FieldStartAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAmount(v)
		return nil
	case payment.FieldTransferAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferAmount(v)
		return nil
	case payment.FieldBalanceAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceAmount(v)
		return nil
	case payment.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalCoinUsdCurrency(v)
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveCoinUsdCurrency(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.AddedCreatedAt()
	case payment.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case payment.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldStartAmount) {
		fields = append(fields, payment.FieldStartAmount)
	}
	if m.FieldCleared(payment.FieldTransferAmount) {
		fields = append(fields, payment.FieldTransferAmount)
	}
	if m.FieldCleared(payment.FieldBalanceAmount) {
		fields = append(fields, payment.FieldBalanceAmount)
	}
	if m.FieldCleared(payment.FieldCoinUsdCurrency) {
		fields = append(fields, payment.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(payment.FieldLocalCoinUsdCurrency) {
		fields = append(fields, payment.FieldLocalCoinUsdCurrency)
	}
	if m.FieldCleared(payment.FieldLiveCoinUsdCurrency) {
		fields = append(fields, payment.FieldLiveCoinUsdCurrency)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldStartAmount:
		m.ClearStartAmount()
		return nil
	case payment.FieldTransferAmount:
		m.ClearTransferAmount()
		return nil
	case payment.FieldBalanceAmount:
		m.ClearBalanceAmount()
		return nil
	case payment.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		m.ClearLocalCoinUsdCurrency()
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		m.ClearLiveCoinUsdCurrency()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case payment.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case payment.FieldAppID:
		m.ResetAppID()
		return nil
	case payment.FieldUserID:
		m.ResetUserID()
		return nil
	case payment.FieldGoodID:
		m.ResetGoodID()
		return nil
	case payment.FieldOrderID:
		m.ResetOrderID()
		return nil
	case payment.FieldAccountID:
		m.ResetAccountID()
		return nil
	case payment.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case payment.FieldStartAmount:
		m.ResetStartAmount()
		return nil
	case payment.FieldTransferAmount:
		m.ResetTransferAmount()
		return nil
	case payment.FieldBalanceAmount:
		m.ResetBalanceAmount()
		return nil
	case payment.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		m.ResetLocalCoinUsdCurrency()
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		m.ResetLiveCoinUsdCurrency()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Payment edge %s", name)
}
