// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompensate = "Compensate"
	TypeOrder      = "Order"
	TypeOutOfGas   = "OutOfGas"
	TypePayment    = "Payment"
)

// CompensateMutation represents an operation that mutates the Compensate nodes in the graph.
type CompensateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	order_id      *uuid.UUID
	start         *uint32
	addstart      *int32
	end           *uint32
	addend        *int32
	message       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Compensate, error)
	predicates    []predicate.Compensate
}

var _ ent.Mutation = (*CompensateMutation)(nil)

// compensateOption allows management of the mutation configuration using functional options.
type compensateOption func(*CompensateMutation)

// newCompensateMutation creates new mutation for the Compensate entity.
func newCompensateMutation(c config, op Op, opts ...compensateOption) *CompensateMutation {
	m := &CompensateMutation{
		config:        c,
		op:            op,
		typ:           TypeCompensate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompensateID sets the ID field of the mutation.
func withCompensateID(id uuid.UUID) compensateOption {
	return func(m *CompensateMutation) {
		var (
			err   error
			once  sync.Once
			value *Compensate
		)
		m.oldValue = func(ctx context.Context) (*Compensate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Compensate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompensate sets the old Compensate of the mutation.
func withCompensate(node *Compensate) compensateOption {
	return func(m *CompensateMutation) {
		m.oldValue = func(context.Context) (*Compensate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompensateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompensateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Compensate entities.
func (m *CompensateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompensateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompensateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Compensate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CompensateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CompensateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CompensateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CompensateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CompensateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CompensateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CompensateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CompensateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CompensateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CompensateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CompensateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CompensateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CompensateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CompensateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CompensateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *CompensateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *CompensateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *CompensateMutation) ResetOrderID() {
	m.order_id = nil
}

// SetStart sets the "start" field.
func (m *CompensateMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *CompensateMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *CompensateMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *CompensateMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ClearStart clears the value of the "start" field.
func (m *CompensateMutation) ClearStart() {
	m.start = nil
	m.addstart = nil
	m.clearedFields[compensate.FieldStart] = struct{}{}
}

// StartCleared returns if the "start" field was cleared in this mutation.
func (m *CompensateMutation) StartCleared() bool {
	_, ok := m.clearedFields[compensate.FieldStart]
	return ok
}

// ResetStart resets all changes to the "start" field.
func (m *CompensateMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
	delete(m.clearedFields, compensate.FieldStart)
}

// SetEnd sets the "end" field.
func (m *CompensateMutation) SetEnd(u uint32) {
	m.end = &u
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *CompensateMutation) End() (r uint32, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldEnd(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds u to the "end" field.
func (m *CompensateMutation) AddEnd(u int32) {
	if m.addend != nil {
		*m.addend += u
	} else {
		m.addend = &u
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *CompensateMutation) AddedEnd() (r int32, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ClearEnd clears the value of the "end" field.
func (m *CompensateMutation) ClearEnd() {
	m.end = nil
	m.addend = nil
	m.clearedFields[compensate.FieldEnd] = struct{}{}
}

// EndCleared returns if the "end" field was cleared in this mutation.
func (m *CompensateMutation) EndCleared() bool {
	_, ok := m.clearedFields[compensate.FieldEnd]
	return ok
}

// ResetEnd resets all changes to the "end" field.
func (m *CompensateMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
	delete(m.clearedFields, compensate.FieldEnd)
}

// SetMessage sets the "message" field.
func (m *CompensateMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CompensateMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CompensateMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[compensate.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CompensateMutation) MessageCleared() bool {
	_, ok := m.clearedFields[compensate.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CompensateMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, compensate.FieldMessage)
}

// Where appends a list predicates to the CompensateMutation builder.
func (m *CompensateMutation) Where(ps ...predicate.Compensate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompensateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Compensate).
func (m *CompensateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompensateMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.order_id != nil {
		fields = append(fields, compensate.FieldOrderID)
	}
	if m.start != nil {
		fields = append(fields, compensate.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, compensate.FieldEnd)
	}
	if m.message != nil {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompensateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.CreatedAt()
	case compensate.FieldUpdatedAt:
		return m.UpdatedAt()
	case compensate.FieldDeletedAt:
		return m.DeletedAt()
	case compensate.FieldOrderID:
		return m.OrderID()
	case compensate.FieldStart:
		return m.Start()
	case compensate.FieldEnd:
		return m.End()
	case compensate.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompensateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case compensate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case compensate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case compensate.FieldOrderID:
		return m.OldOrderID(ctx)
	case compensate.FieldStart:
		return m.OldStart(ctx)
	case compensate.FieldEnd:
		return m.OldEnd(ctx)
	case compensate.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Compensate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case compensate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case compensate.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case compensate.FieldEnd:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	case compensate.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompensateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.addstart != nil {
		fields = append(fields, compensate.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, compensate.FieldEnd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompensateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case compensate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case compensate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case compensate.FieldStart:
		return m.AddedStart()
	case compensate.FieldEnd:
		return m.AddedEnd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case compensate.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case compensate.FieldEnd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompensateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(compensate.FieldStart) {
		fields = append(fields, compensate.FieldStart)
	}
	if m.FieldCleared(compensate.FieldEnd) {
		fields = append(fields, compensate.FieldEnd)
	}
	if m.FieldCleared(compensate.FieldMessage) {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompensateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompensateMutation) ClearField(name string) error {
	switch name {
	case compensate.FieldStart:
		m.ClearStart()
		return nil
	case compensate.FieldEnd:
		m.ClearEnd()
		return nil
	case compensate.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompensateMutation) ResetField(name string) error {
	switch name {
	case compensate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case compensate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case compensate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case compensate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case compensate.FieldStart:
		m.ResetStart()
		return nil
	case compensate.FieldEnd:
		m.ResetEnd()
		return nil
	case compensate.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompensateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompensateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompensateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompensateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompensateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompensateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompensateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Compensate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompensateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Compensate edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *uint32
	addcreated_at             *int32
	updated_at                *uint32
	addupdated_at             *int32
	deleted_at                *uint32
	adddeleted_at             *int32
	good_id                   *uuid.UUID
	app_id                    *uuid.UUID
	user_id                   *uuid.UUID
	parent_order_id           *uuid.UUID
	pay_with_parent           *bool
	units                     *uint32
	addunits                  *int32
	units_v1                  *decimal.Decimal
	promotion_id              *uuid.UUID
	discount_coupon_id        *uuid.UUID
	user_special_reduction_id *uuid.UUID
	start_at                  *uint32
	addstart_at               *int32
	end_at                    *uint32
	addend_at                 *int32
	fix_amount_coupon_id      *uuid.UUID
	_type                     *string
	state                     *string
	coupon_ids                *[]uuid.UUID
	last_benefit_at           *uint32
	addlast_benefit_at        *int32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Order, error)
	predicates                []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uuid.UUID) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *OrderMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *OrderMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *OrderMutation) ResetGoodID() {
	m.good_id = nil
}

// SetAppID sets the "app_id" field.
func (m *OrderMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *OrderMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *OrderMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
}

// SetParentOrderID sets the "parent_order_id" field.
func (m *OrderMutation) SetParentOrderID(u uuid.UUID) {
	m.parent_order_id = &u
}

// ParentOrderID returns the value of the "parent_order_id" field in the mutation.
func (m *OrderMutation) ParentOrderID() (r uuid.UUID, exists bool) {
	v := m.parent_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentOrderID returns the old "parent_order_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldParentOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentOrderID: %w", err)
	}
	return oldValue.ParentOrderID, nil
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (m *OrderMutation) ClearParentOrderID() {
	m.parent_order_id = nil
	m.clearedFields[order.FieldParentOrderID] = struct{}{}
}

// ParentOrderIDCleared returns if the "parent_order_id" field was cleared in this mutation.
func (m *OrderMutation) ParentOrderIDCleared() bool {
	_, ok := m.clearedFields[order.FieldParentOrderID]
	return ok
}

// ResetParentOrderID resets all changes to the "parent_order_id" field.
func (m *OrderMutation) ResetParentOrderID() {
	m.parent_order_id = nil
	delete(m.clearedFields, order.FieldParentOrderID)
}

// SetPayWithParent sets the "pay_with_parent" field.
func (m *OrderMutation) SetPayWithParent(b bool) {
	m.pay_with_parent = &b
}

// PayWithParent returns the value of the "pay_with_parent" field in the mutation.
func (m *OrderMutation) PayWithParent() (r bool, exists bool) {
	v := m.pay_with_parent
	if v == nil {
		return
	}
	return *v, true
}

// OldPayWithParent returns the old "pay_with_parent" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPayWithParent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayWithParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayWithParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayWithParent: %w", err)
	}
	return oldValue.PayWithParent, nil
}

// ClearPayWithParent clears the value of the "pay_with_parent" field.
func (m *OrderMutation) ClearPayWithParent() {
	m.pay_with_parent = nil
	m.clearedFields[order.FieldPayWithParent] = struct{}{}
}

// PayWithParentCleared returns if the "pay_with_parent" field was cleared in this mutation.
func (m *OrderMutation) PayWithParentCleared() bool {
	_, ok := m.clearedFields[order.FieldPayWithParent]
	return ok
}

// ResetPayWithParent resets all changes to the "pay_with_parent" field.
func (m *OrderMutation) ResetPayWithParent() {
	m.pay_with_parent = nil
	delete(m.clearedFields, order.FieldPayWithParent)
}

// SetUnits sets the "units" field.
func (m *OrderMutation) SetUnits(u uint32) {
	m.units = &u
	m.addunits = nil
}

// Units returns the value of the "units" field in the mutation.
func (m *OrderMutation) Units() (r uint32, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUnits(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// AddUnits adds u to the "units" field.
func (m *OrderMutation) AddUnits(u int32) {
	if m.addunits != nil {
		*m.addunits += u
	} else {
		m.addunits = &u
	}
}

// AddedUnits returns the value that was added to the "units" field in this mutation.
func (m *OrderMutation) AddedUnits() (r int32, exists bool) {
	v := m.addunits
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnits clears the value of the "units" field.
func (m *OrderMutation) ClearUnits() {
	m.units = nil
	m.addunits = nil
	m.clearedFields[order.FieldUnits] = struct{}{}
}

// UnitsCleared returns if the "units" field was cleared in this mutation.
func (m *OrderMutation) UnitsCleared() bool {
	_, ok := m.clearedFields[order.FieldUnits]
	return ok
}

// ResetUnits resets all changes to the "units" field.
func (m *OrderMutation) ResetUnits() {
	m.units = nil
	m.addunits = nil
	delete(m.clearedFields, order.FieldUnits)
}

// SetUnitsV1 sets the "units_v1" field.
func (m *OrderMutation) SetUnitsV1(d decimal.Decimal) {
	m.units_v1 = &d
}

// UnitsV1 returns the value of the "units_v1" field in the mutation.
func (m *OrderMutation) UnitsV1() (r decimal.Decimal, exists bool) {
	v := m.units_v1
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitsV1 returns the old "units_v1" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUnitsV1(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitsV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitsV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitsV1: %w", err)
	}
	return oldValue.UnitsV1, nil
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (m *OrderMutation) ClearUnitsV1() {
	m.units_v1 = nil
	m.clearedFields[order.FieldUnitsV1] = struct{}{}
}

// UnitsV1Cleared returns if the "units_v1" field was cleared in this mutation.
func (m *OrderMutation) UnitsV1Cleared() bool {
	_, ok := m.clearedFields[order.FieldUnitsV1]
	return ok
}

// ResetUnitsV1 resets all changes to the "units_v1" field.
func (m *OrderMutation) ResetUnitsV1() {
	m.units_v1 = nil
	delete(m.clearedFields, order.FieldUnitsV1)
}

// SetPromotionID sets the "promotion_id" field.
func (m *OrderMutation) SetPromotionID(u uuid.UUID) {
	m.promotion_id = &u
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *OrderMutation) PromotionID() (r uuid.UUID, exists bool) {
	v := m.promotion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPromotionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (m *OrderMutation) ClearPromotionID() {
	m.promotion_id = nil
	m.clearedFields[order.FieldPromotionID] = struct{}{}
}

// PromotionIDCleared returns if the "promotion_id" field was cleared in this mutation.
func (m *OrderMutation) PromotionIDCleared() bool {
	_, ok := m.clearedFields[order.FieldPromotionID]
	return ok
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *OrderMutation) ResetPromotionID() {
	m.promotion_id = nil
	delete(m.clearedFields, order.FieldPromotionID)
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (m *OrderMutation) SetDiscountCouponID(u uuid.UUID) {
	m.discount_coupon_id = &u
}

// DiscountCouponID returns the value of the "discount_coupon_id" field in the mutation.
func (m *OrderMutation) DiscountCouponID() (r uuid.UUID, exists bool) {
	v := m.discount_coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountCouponID returns the old "discount_coupon_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDiscountCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountCouponID: %w", err)
	}
	return oldValue.DiscountCouponID, nil
}

// ClearDiscountCouponID clears the value of the "discount_coupon_id" field.
func (m *OrderMutation) ClearDiscountCouponID() {
	m.discount_coupon_id = nil
	m.clearedFields[order.FieldDiscountCouponID] = struct{}{}
}

// DiscountCouponIDCleared returns if the "discount_coupon_id" field was cleared in this mutation.
func (m *OrderMutation) DiscountCouponIDCleared() bool {
	_, ok := m.clearedFields[order.FieldDiscountCouponID]
	return ok
}

// ResetDiscountCouponID resets all changes to the "discount_coupon_id" field.
func (m *OrderMutation) ResetDiscountCouponID() {
	m.discount_coupon_id = nil
	delete(m.clearedFields, order.FieldDiscountCouponID)
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (m *OrderMutation) SetUserSpecialReductionID(u uuid.UUID) {
	m.user_special_reduction_id = &u
}

// UserSpecialReductionID returns the value of the "user_special_reduction_id" field in the mutation.
func (m *OrderMutation) UserSpecialReductionID() (r uuid.UUID, exists bool) {
	v := m.user_special_reduction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSpecialReductionID returns the old "user_special_reduction_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserSpecialReductionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSpecialReductionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSpecialReductionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSpecialReductionID: %w", err)
	}
	return oldValue.UserSpecialReductionID, nil
}

// ClearUserSpecialReductionID clears the value of the "user_special_reduction_id" field.
func (m *OrderMutation) ClearUserSpecialReductionID() {
	m.user_special_reduction_id = nil
	m.clearedFields[order.FieldUserSpecialReductionID] = struct{}{}
}

// UserSpecialReductionIDCleared returns if the "user_special_reduction_id" field was cleared in this mutation.
func (m *OrderMutation) UserSpecialReductionIDCleared() bool {
	_, ok := m.clearedFields[order.FieldUserSpecialReductionID]
	return ok
}

// ResetUserSpecialReductionID resets all changes to the "user_special_reduction_id" field.
func (m *OrderMutation) ResetUserSpecialReductionID() {
	m.user_special_reduction_id = nil
	delete(m.clearedFields, order.FieldUserSpecialReductionID)
}

// SetStartAt sets the "start_at" field.
func (m *OrderMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OrderMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OrderMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OrderMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OrderMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[order.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OrderMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[order.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OrderMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, order.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *OrderMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *OrderMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *OrderMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *OrderMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *OrderMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[order.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *OrderMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[order.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *OrderMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, order.FieldEndAt)
}

// SetFixAmountCouponID sets the "fix_amount_coupon_id" field.
func (m *OrderMutation) SetFixAmountCouponID(u uuid.UUID) {
	m.fix_amount_coupon_id = &u
}

// FixAmountCouponID returns the value of the "fix_amount_coupon_id" field in the mutation.
func (m *OrderMutation) FixAmountCouponID() (r uuid.UUID, exists bool) {
	v := m.fix_amount_coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFixAmountCouponID returns the old "fix_amount_coupon_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldFixAmountCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFixAmountCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFixAmountCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixAmountCouponID: %w", err)
	}
	return oldValue.FixAmountCouponID, nil
}

// ClearFixAmountCouponID clears the value of the "fix_amount_coupon_id" field.
func (m *OrderMutation) ClearFixAmountCouponID() {
	m.fix_amount_coupon_id = nil
	m.clearedFields[order.FieldFixAmountCouponID] = struct{}{}
}

// FixAmountCouponIDCleared returns if the "fix_amount_coupon_id" field was cleared in this mutation.
func (m *OrderMutation) FixAmountCouponIDCleared() bool {
	_, ok := m.clearedFields[order.FieldFixAmountCouponID]
	return ok
}

// ResetFixAmountCouponID resets all changes to the "fix_amount_coupon_id" field.
func (m *OrderMutation) ResetFixAmountCouponID() {
	m.fix_amount_coupon_id = nil
	delete(m.clearedFields, order.FieldFixAmountCouponID)
}

// SetType sets the "type" field.
func (m *OrderMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *OrderMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *OrderMutation) ClearType() {
	m._type = nil
	m.clearedFields[order.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *OrderMutation) TypeCleared() bool {
	_, ok := m.clearedFields[order.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *OrderMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, order.FieldType)
}

// SetState sets the "state" field.
func (m *OrderMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *OrderMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *OrderMutation) ClearState() {
	m.state = nil
	m.clearedFields[order.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *OrderMutation) StateCleared() bool {
	_, ok := m.clearedFields[order.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *OrderMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, order.FieldState)
}

// SetCouponIds sets the "coupon_ids" field.
func (m *OrderMutation) SetCouponIds(u []uuid.UUID) {
	m.coupon_ids = &u
}

// CouponIds returns the value of the "coupon_ids" field in the mutation.
func (m *OrderMutation) CouponIds() (r []uuid.UUID, exists bool) {
	v := m.coupon_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponIds returns the old "coupon_ids" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCouponIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponIds: %w", err)
	}
	return oldValue.CouponIds, nil
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (m *OrderMutation) ClearCouponIds() {
	m.coupon_ids = nil
	m.clearedFields[order.FieldCouponIds] = struct{}{}
}

// CouponIdsCleared returns if the "coupon_ids" field was cleared in this mutation.
func (m *OrderMutation) CouponIdsCleared() bool {
	_, ok := m.clearedFields[order.FieldCouponIds]
	return ok
}

// ResetCouponIds resets all changes to the "coupon_ids" field.
func (m *OrderMutation) ResetCouponIds() {
	m.coupon_ids = nil
	delete(m.clearedFields, order.FieldCouponIds)
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (m *OrderMutation) SetLastBenefitAt(u uint32) {
	m.last_benefit_at = &u
	m.addlast_benefit_at = nil
}

// LastBenefitAt returns the value of the "last_benefit_at" field in the mutation.
func (m *OrderMutation) LastBenefitAt() (r uint32, exists bool) {
	v := m.last_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitAt returns the old "last_benefit_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldLastBenefitAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitAt: %w", err)
	}
	return oldValue.LastBenefitAt, nil
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (m *OrderMutation) AddLastBenefitAt(u int32) {
	if m.addlast_benefit_at != nil {
		*m.addlast_benefit_at += u
	} else {
		m.addlast_benefit_at = &u
	}
}

// AddedLastBenefitAt returns the value that was added to the "last_benefit_at" field in this mutation.
func (m *OrderMutation) AddedLastBenefitAt() (r int32, exists bool) {
	v := m.addlast_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (m *OrderMutation) ClearLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	m.clearedFields[order.FieldLastBenefitAt] = struct{}{}
}

// LastBenefitAtCleared returns if the "last_benefit_at" field was cleared in this mutation.
func (m *OrderMutation) LastBenefitAtCleared() bool {
	_, ok := m.clearedFields[order.FieldLastBenefitAt]
	return ok
}

// ResetLastBenefitAt resets all changes to the "last_benefit_at" field.
func (m *OrderMutation) ResetLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	delete(m.clearedFields, order.FieldLastBenefitAt)
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, order.FieldGoodID)
	}
	if m.app_id != nil {
		fields = append(fields, order.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	if m.parent_order_id != nil {
		fields = append(fields, order.FieldParentOrderID)
	}
	if m.pay_with_parent != nil {
		fields = append(fields, order.FieldPayWithParent)
	}
	if m.units != nil {
		fields = append(fields, order.FieldUnits)
	}
	if m.units_v1 != nil {
		fields = append(fields, order.FieldUnitsV1)
	}
	if m.promotion_id != nil {
		fields = append(fields, order.FieldPromotionID)
	}
	if m.discount_coupon_id != nil {
		fields = append(fields, order.FieldDiscountCouponID)
	}
	if m.user_special_reduction_id != nil {
		fields = append(fields, order.FieldUserSpecialReductionID)
	}
	if m.start_at != nil {
		fields = append(fields, order.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, order.FieldEndAt)
	}
	if m.fix_amount_coupon_id != nil {
		fields = append(fields, order.FieldFixAmountCouponID)
	}
	if m._type != nil {
		fields = append(fields, order.FieldType)
	}
	if m.state != nil {
		fields = append(fields, order.FieldState)
	}
	if m.coupon_ids != nil {
		fields = append(fields, order.FieldCouponIds)
	}
	if m.last_benefit_at != nil {
		fields = append(fields, order.FieldLastBenefitAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldDeletedAt:
		return m.DeletedAt()
	case order.FieldGoodID:
		return m.GoodID()
	case order.FieldAppID:
		return m.AppID()
	case order.FieldUserID:
		return m.UserID()
	case order.FieldParentOrderID:
		return m.ParentOrderID()
	case order.FieldPayWithParent:
		return m.PayWithParent()
	case order.FieldUnits:
		return m.Units()
	case order.FieldUnitsV1:
		return m.UnitsV1()
	case order.FieldPromotionID:
		return m.PromotionID()
	case order.FieldDiscountCouponID:
		return m.DiscountCouponID()
	case order.FieldUserSpecialReductionID:
		return m.UserSpecialReductionID()
	case order.FieldStartAt:
		return m.StartAt()
	case order.FieldEndAt:
		return m.EndAt()
	case order.FieldFixAmountCouponID:
		return m.FixAmountCouponID()
	case order.FieldType:
		return m.GetType()
	case order.FieldState:
		return m.State()
	case order.FieldCouponIds:
		return m.CouponIds()
	case order.FieldLastBenefitAt:
		return m.LastBenefitAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case order.FieldGoodID:
		return m.OldGoodID(ctx)
	case order.FieldAppID:
		return m.OldAppID(ctx)
	case order.FieldUserID:
		return m.OldUserID(ctx)
	case order.FieldParentOrderID:
		return m.OldParentOrderID(ctx)
	case order.FieldPayWithParent:
		return m.OldPayWithParent(ctx)
	case order.FieldUnits:
		return m.OldUnits(ctx)
	case order.FieldUnitsV1:
		return m.OldUnitsV1(ctx)
	case order.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case order.FieldDiscountCouponID:
		return m.OldDiscountCouponID(ctx)
	case order.FieldUserSpecialReductionID:
		return m.OldUserSpecialReductionID(ctx)
	case order.FieldStartAt:
		return m.OldStartAt(ctx)
	case order.FieldEndAt:
		return m.OldEndAt(ctx)
	case order.FieldFixAmountCouponID:
		return m.OldFixAmountCouponID(ctx)
	case order.FieldType:
		return m.OldType(ctx)
	case order.FieldState:
		return m.OldState(ctx)
	case order.FieldCouponIds:
		return m.OldCouponIds(ctx)
	case order.FieldLastBenefitAt:
		return m.OldLastBenefitAt(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case order.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case order.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case order.FieldParentOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentOrderID(v)
		return nil
	case order.FieldPayWithParent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayWithParent(v)
		return nil
	case order.FieldUnits:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case order.FieldUnitsV1:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitsV1(v)
		return nil
	case order.FieldPromotionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case order.FieldDiscountCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountCouponID(v)
		return nil
	case order.FieldUserSpecialReductionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSpecialReductionID(v)
		return nil
	case order.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case order.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case order.FieldFixAmountCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixAmountCouponID(v)
		return nil
	case order.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case order.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case order.FieldCouponIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponIds(v)
		return nil
	case order.FieldLastBenefitAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitAt(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.addunits != nil {
		fields = append(fields, order.FieldUnits)
	}
	if m.addstart_at != nil {
		fields = append(fields, order.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, order.FieldEndAt)
	}
	if m.addlast_benefit_at != nil {
		fields = append(fields, order.FieldLastBenefitAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.AddedCreatedAt()
	case order.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case order.FieldDeletedAt:
		return m.AddedDeletedAt()
	case order.FieldUnits:
		return m.AddedUnits()
	case order.FieldStartAt:
		return m.AddedStartAt()
	case order.FieldEndAt:
		return m.AddedEndAt()
	case order.FieldLastBenefitAt:
		return m.AddedLastBenefitAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case order.FieldUnits:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnits(v)
		return nil
	case order.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case order.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	case order.FieldLastBenefitAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitAt(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldParentOrderID) {
		fields = append(fields, order.FieldParentOrderID)
	}
	if m.FieldCleared(order.FieldPayWithParent) {
		fields = append(fields, order.FieldPayWithParent)
	}
	if m.FieldCleared(order.FieldUnits) {
		fields = append(fields, order.FieldUnits)
	}
	if m.FieldCleared(order.FieldUnitsV1) {
		fields = append(fields, order.FieldUnitsV1)
	}
	if m.FieldCleared(order.FieldPromotionID) {
		fields = append(fields, order.FieldPromotionID)
	}
	if m.FieldCleared(order.FieldDiscountCouponID) {
		fields = append(fields, order.FieldDiscountCouponID)
	}
	if m.FieldCleared(order.FieldUserSpecialReductionID) {
		fields = append(fields, order.FieldUserSpecialReductionID)
	}
	if m.FieldCleared(order.FieldStartAt) {
		fields = append(fields, order.FieldStartAt)
	}
	if m.FieldCleared(order.FieldEndAt) {
		fields = append(fields, order.FieldEndAt)
	}
	if m.FieldCleared(order.FieldFixAmountCouponID) {
		fields = append(fields, order.FieldFixAmountCouponID)
	}
	if m.FieldCleared(order.FieldType) {
		fields = append(fields, order.FieldType)
	}
	if m.FieldCleared(order.FieldState) {
		fields = append(fields, order.FieldState)
	}
	if m.FieldCleared(order.FieldCouponIds) {
		fields = append(fields, order.FieldCouponIds)
	}
	if m.FieldCleared(order.FieldLastBenefitAt) {
		fields = append(fields, order.FieldLastBenefitAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldParentOrderID:
		m.ClearParentOrderID()
		return nil
	case order.FieldPayWithParent:
		m.ClearPayWithParent()
		return nil
	case order.FieldUnits:
		m.ClearUnits()
		return nil
	case order.FieldUnitsV1:
		m.ClearUnitsV1()
		return nil
	case order.FieldPromotionID:
		m.ClearPromotionID()
		return nil
	case order.FieldDiscountCouponID:
		m.ClearDiscountCouponID()
		return nil
	case order.FieldUserSpecialReductionID:
		m.ClearUserSpecialReductionID()
		return nil
	case order.FieldStartAt:
		m.ClearStartAt()
		return nil
	case order.FieldEndAt:
		m.ClearEndAt()
		return nil
	case order.FieldFixAmountCouponID:
		m.ClearFixAmountCouponID()
		return nil
	case order.FieldType:
		m.ClearType()
		return nil
	case order.FieldState:
		m.ClearState()
		return nil
	case order.FieldCouponIds:
		m.ClearCouponIds()
		return nil
	case order.FieldLastBenefitAt:
		m.ClearLastBenefitAt()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case order.FieldGoodID:
		m.ResetGoodID()
		return nil
	case order.FieldAppID:
		m.ResetAppID()
		return nil
	case order.FieldUserID:
		m.ResetUserID()
		return nil
	case order.FieldParentOrderID:
		m.ResetParentOrderID()
		return nil
	case order.FieldPayWithParent:
		m.ResetPayWithParent()
		return nil
	case order.FieldUnits:
		m.ResetUnits()
		return nil
	case order.FieldUnitsV1:
		m.ResetUnitsV1()
		return nil
	case order.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case order.FieldDiscountCouponID:
		m.ResetDiscountCouponID()
		return nil
	case order.FieldUserSpecialReductionID:
		m.ResetUserSpecialReductionID()
		return nil
	case order.FieldStartAt:
		m.ResetStartAt()
		return nil
	case order.FieldEndAt:
		m.ResetEndAt()
		return nil
	case order.FieldFixAmountCouponID:
		m.ResetFixAmountCouponID()
		return nil
	case order.FieldType:
		m.ResetType()
		return nil
	case order.FieldState:
		m.ResetState()
		return nil
	case order.FieldCouponIds:
		m.ResetCouponIds()
		return nil
	case order.FieldLastBenefitAt:
		m.ResetLastBenefitAt()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// OutOfGasMutation represents an operation that mutates the OutOfGas nodes in the graph.
type OutOfGasMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	order_id      *uuid.UUID
	start         *uint32
	addstart      *int32
	end           *uint32
	addend        *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OutOfGas, error)
	predicates    []predicate.OutOfGas
}

var _ ent.Mutation = (*OutOfGasMutation)(nil)

// outofgasOption allows management of the mutation configuration using functional options.
type outofgasOption func(*OutOfGasMutation)

// newOutOfGasMutation creates new mutation for the OutOfGas entity.
func newOutOfGasMutation(c config, op Op, opts ...outofgasOption) *OutOfGasMutation {
	m := &OutOfGasMutation{
		config:        c,
		op:            op,
		typ:           TypeOutOfGas,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutOfGasID sets the ID field of the mutation.
func withOutOfGasID(id uuid.UUID) outofgasOption {
	return func(m *OutOfGasMutation) {
		var (
			err   error
			once  sync.Once
			value *OutOfGas
		)
		m.oldValue = func(ctx context.Context) (*OutOfGas, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OutOfGas.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutOfGas sets the old OutOfGas of the mutation.
func withOutOfGas(node *OutOfGas) outofgasOption {
	return func(m *OutOfGasMutation) {
		m.oldValue = func(context.Context) (*OutOfGas, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutOfGasMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutOfGasMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OutOfGas entities.
func (m *OutOfGasMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutOfGasMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutOfGasMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OutOfGas.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OutOfGasMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OutOfGasMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OutOfGasMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OutOfGasMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OutOfGasMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OutOfGasMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OutOfGasMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OutOfGasMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OutOfGasMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OutOfGasMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OutOfGasMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OutOfGasMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OutOfGasMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OutOfGasMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OutOfGasMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetOrderID sets the "order_id" field.
func (m *OutOfGasMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OutOfGasMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OutOfGasMutation) ResetOrderID() {
	m.order_id = nil
}

// SetStart sets the "start" field.
func (m *OutOfGasMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *OutOfGasMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *OutOfGasMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *OutOfGasMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ClearStart clears the value of the "start" field.
func (m *OutOfGasMutation) ClearStart() {
	m.start = nil
	m.addstart = nil
	m.clearedFields[outofgas.FieldStart] = struct{}{}
}

// StartCleared returns if the "start" field was cleared in this mutation.
func (m *OutOfGasMutation) StartCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldStart]
	return ok
}

// ResetStart resets all changes to the "start" field.
func (m *OutOfGasMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
	delete(m.clearedFields, outofgas.FieldStart)
}

// SetEnd sets the "end" field.
func (m *OutOfGasMutation) SetEnd(u uint32) {
	m.end = &u
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *OutOfGasMutation) End() (r uint32, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldEnd(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds u to the "end" field.
func (m *OutOfGasMutation) AddEnd(u int32) {
	if m.addend != nil {
		*m.addend += u
	} else {
		m.addend = &u
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *OutOfGasMutation) AddedEnd() (r int32, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ClearEnd clears the value of the "end" field.
func (m *OutOfGasMutation) ClearEnd() {
	m.end = nil
	m.addend = nil
	m.clearedFields[outofgas.FieldEnd] = struct{}{}
}

// EndCleared returns if the "end" field was cleared in this mutation.
func (m *OutOfGasMutation) EndCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldEnd]
	return ok
}

// ResetEnd resets all changes to the "end" field.
func (m *OutOfGasMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
	delete(m.clearedFields, outofgas.FieldEnd)
}

// Where appends a list predicates to the OutOfGasMutation builder.
func (m *OutOfGasMutation) Where(ps ...predicate.OutOfGas) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutOfGasMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OutOfGas).
func (m *OutOfGasMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutOfGasMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.order_id != nil {
		fields = append(fields, outofgas.FieldOrderID)
	}
	if m.start != nil {
		fields = append(fields, outofgas.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, outofgas.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutOfGasMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.CreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.UpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.DeletedAt()
	case outofgas.FieldOrderID:
		return m.OrderID()
	case outofgas.FieldStart:
		return m.Start()
	case outofgas.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutOfGasMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case outofgas.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case outofgas.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case outofgas.FieldOrderID:
		return m.OldOrderID(ctx)
	case outofgas.FieldStart:
		return m.OldStart(ctx)
	case outofgas.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown OutOfGas field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case outofgas.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case outofgas.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case outofgas.FieldEnd:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutOfGasMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.addstart != nil {
		fields = append(fields, outofgas.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, outofgas.FieldEnd)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutOfGasMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.AddedCreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.AddedDeletedAt()
	case outofgas.FieldStart:
		return m.AddedStart()
	case outofgas.FieldEnd:
		return m.AddedEnd()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case outofgas.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case outofgas.FieldEnd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutOfGasMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outofgas.FieldStart) {
		fields = append(fields, outofgas.FieldStart)
	}
	if m.FieldCleared(outofgas.FieldEnd) {
		fields = append(fields, outofgas.FieldEnd)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutOfGasMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutOfGasMutation) ClearField(name string) error {
	switch name {
	case outofgas.FieldStart:
		m.ClearStart()
		return nil
	case outofgas.FieldEnd:
		m.ClearEnd()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutOfGasMutation) ResetField(name string) error {
	switch name {
	case outofgas.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case outofgas.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case outofgas.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case outofgas.FieldOrderID:
		m.ResetOrderID()
		return nil
	case outofgas.FieldStart:
		m.ResetStart()
		return nil
	case outofgas.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutOfGasMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutOfGasMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutOfGasMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutOfGasMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutOfGasMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutOfGasMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutOfGasMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutOfGasMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *uint32
	addcreated_at           *int32
	updated_at              *uint32
	addupdated_at           *int32
	deleted_at              *uint32
	adddeleted_at           *int32
	app_id                  *uuid.UUID
	user_id                 *uuid.UUID
	good_id                 *uuid.UUID
	order_id                *uuid.UUID
	account_id              *uuid.UUID
	start_amount            *decimal.Decimal
	amount                  *decimal.Decimal
	pay_with_balance_amount *decimal.Decimal
	finish_amount           *decimal.Decimal
	coin_usd_currency       *decimal.Decimal
	local_coin_usd_currency *decimal.Decimal
	live_coin_usd_currency  *decimal.Decimal
	coin_info_id            *uuid.UUID
	state                   *string
	chain_transaction_id    *string
	user_set_paid           *bool
	user_set_canceled       *bool
	fake_payment            *bool
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Payment, error)
	predicates              []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id uuid.UUID) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PaymentMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PaymentMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PaymentMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PaymentMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PaymentMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PaymentMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PaymentMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PaymentMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PaymentMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *PaymentMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *PaymentMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *PaymentMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *PaymentMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PaymentMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PaymentMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *PaymentMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PaymentMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PaymentMutation) ResetGoodID() {
	m.good_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PaymentMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PaymentMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PaymentMutation) ResetOrderID() {
	m.order_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *PaymentMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *PaymentMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *PaymentMutation) ResetAccountID() {
	m.account_id = nil
}

// SetStartAmount sets the "start_amount" field.
func (m *PaymentMutation) SetStartAmount(d decimal.Decimal) {
	m.start_amount = &d
}

// StartAmount returns the value of the "start_amount" field in the mutation.
func (m *PaymentMutation) StartAmount() (r decimal.Decimal, exists bool) {
	v := m.start_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAmount returns the old "start_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStartAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAmount: %w", err)
	}
	return oldValue.StartAmount, nil
}

// ClearStartAmount clears the value of the "start_amount" field.
func (m *PaymentMutation) ClearStartAmount() {
	m.start_amount = nil
	m.clearedFields[payment.FieldStartAmount] = struct{}{}
}

// StartAmountCleared returns if the "start_amount" field was cleared in this mutation.
func (m *PaymentMutation) StartAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldStartAmount]
	return ok
}

// ResetStartAmount resets all changes to the "start_amount" field.
func (m *PaymentMutation) ResetStartAmount() {
	m.start_amount = nil
	delete(m.clearedFields, payment.FieldStartAmount)
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *PaymentMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[payment.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *PaymentMutation) AmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, payment.FieldAmount)
}

// SetPayWithBalanceAmount sets the "pay_with_balance_amount" field.
func (m *PaymentMutation) SetPayWithBalanceAmount(d decimal.Decimal) {
	m.pay_with_balance_amount = &d
}

// PayWithBalanceAmount returns the value of the "pay_with_balance_amount" field in the mutation.
func (m *PaymentMutation) PayWithBalanceAmount() (r decimal.Decimal, exists bool) {
	v := m.pay_with_balance_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayWithBalanceAmount returns the old "pay_with_balance_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPayWithBalanceAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayWithBalanceAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayWithBalanceAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayWithBalanceAmount: %w", err)
	}
	return oldValue.PayWithBalanceAmount, nil
}

// ClearPayWithBalanceAmount clears the value of the "pay_with_balance_amount" field.
func (m *PaymentMutation) ClearPayWithBalanceAmount() {
	m.pay_with_balance_amount = nil
	m.clearedFields[payment.FieldPayWithBalanceAmount] = struct{}{}
}

// PayWithBalanceAmountCleared returns if the "pay_with_balance_amount" field was cleared in this mutation.
func (m *PaymentMutation) PayWithBalanceAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldPayWithBalanceAmount]
	return ok
}

// ResetPayWithBalanceAmount resets all changes to the "pay_with_balance_amount" field.
func (m *PaymentMutation) ResetPayWithBalanceAmount() {
	m.pay_with_balance_amount = nil
	delete(m.clearedFields, payment.FieldPayWithBalanceAmount)
}

// SetFinishAmount sets the "finish_amount" field.
func (m *PaymentMutation) SetFinishAmount(d decimal.Decimal) {
	m.finish_amount = &d
}

// FinishAmount returns the value of the "finish_amount" field in the mutation.
func (m *PaymentMutation) FinishAmount() (r decimal.Decimal, exists bool) {
	v := m.finish_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishAmount returns the old "finish_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldFinishAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishAmount: %w", err)
	}
	return oldValue.FinishAmount, nil
}

// ClearFinishAmount clears the value of the "finish_amount" field.
func (m *PaymentMutation) ClearFinishAmount() {
	m.finish_amount = nil
	m.clearedFields[payment.FieldFinishAmount] = struct{}{}
}

// FinishAmountCleared returns if the "finish_amount" field was cleared in this mutation.
func (m *PaymentMutation) FinishAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldFinishAmount]
	return ok
}

// ResetFinishAmount resets all changes to the "finish_amount" field.
func (m *PaymentMutation) ResetFinishAmount() {
	m.finish_amount = nil
	delete(m.clearedFields, payment.FieldFinishAmount)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *PaymentMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *PaymentMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *PaymentMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.clearedFields[payment.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *PaymentMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldCoinUsdCurrency)
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (m *PaymentMutation) SetLocalCoinUsdCurrency(d decimal.Decimal) {
	m.local_coin_usd_currency = &d
}

// LocalCoinUsdCurrency returns the value of the "local_coin_usd_currency" field in the mutation.
func (m *PaymentMutation) LocalCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.local_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalCoinUsdCurrency returns the old "local_coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldLocalCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalCoinUsdCurrency: %w", err)
	}
	return oldValue.LocalCoinUsdCurrency, nil
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (m *PaymentMutation) ClearLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	m.clearedFields[payment.FieldLocalCoinUsdCurrency] = struct{}{}
}

// LocalCoinUsdCurrencyCleared returns if the "local_coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) LocalCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldLocalCoinUsdCurrency]
	return ok
}

// ResetLocalCoinUsdCurrency resets all changes to the "local_coin_usd_currency" field.
func (m *PaymentMutation) ResetLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldLocalCoinUsdCurrency)
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (m *PaymentMutation) SetLiveCoinUsdCurrency(d decimal.Decimal) {
	m.live_coin_usd_currency = &d
}

// LiveCoinUsdCurrency returns the value of the "live_coin_usd_currency" field in the mutation.
func (m *PaymentMutation) LiveCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.live_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveCoinUsdCurrency returns the old "live_coin_usd_currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldLiveCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveCoinUsdCurrency: %w", err)
	}
	return oldValue.LiveCoinUsdCurrency, nil
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (m *PaymentMutation) ClearLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	m.clearedFields[payment.FieldLiveCoinUsdCurrency] = struct{}{}
}

// LiveCoinUsdCurrencyCleared returns if the "live_coin_usd_currency" field was cleared in this mutation.
func (m *PaymentMutation) LiveCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[payment.FieldLiveCoinUsdCurrency]
	return ok
}

// ResetLiveCoinUsdCurrency resets all changes to the "live_coin_usd_currency" field.
func (m *PaymentMutation) ResetLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	delete(m.clearedFields, payment.FieldLiveCoinUsdCurrency)
}

// SetCoinInfoID sets the "coin_info_id" field.
func (m *PaymentMutation) SetCoinInfoID(u uuid.UUID) {
	m.coin_info_id = &u
}

// CoinInfoID returns the value of the "coin_info_id" field in the mutation.
func (m *PaymentMutation) CoinInfoID() (r uuid.UUID, exists bool) {
	v := m.coin_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinInfoID returns the old "coin_info_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinInfoID: %w", err)
	}
	return oldValue.CoinInfoID, nil
}

// ResetCoinInfoID resets all changes to the "coin_info_id" field.
func (m *PaymentMutation) ResetCoinInfoID() {
	m.coin_info_id = nil
}

// SetState sets the "state" field.
func (m *PaymentMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *PaymentMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *PaymentMutation) ClearState() {
	m.state = nil
	m.clearedFields[payment.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *PaymentMutation) StateCleared() bool {
	_, ok := m.clearedFields[payment.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *PaymentMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, payment.FieldState)
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *PaymentMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *PaymentMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (m *PaymentMutation) ClearChainTransactionID() {
	m.chain_transaction_id = nil
	m.clearedFields[payment.FieldChainTransactionID] = struct{}{}
}

// ChainTransactionIDCleared returns if the "chain_transaction_id" field was cleared in this mutation.
func (m *PaymentMutation) ChainTransactionIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldChainTransactionID]
	return ok
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *PaymentMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
	delete(m.clearedFields, payment.FieldChainTransactionID)
}

// SetUserSetPaid sets the "user_set_paid" field.
func (m *PaymentMutation) SetUserSetPaid(b bool) {
	m.user_set_paid = &b
}

// UserSetPaid returns the value of the "user_set_paid" field in the mutation.
func (m *PaymentMutation) UserSetPaid() (r bool, exists bool) {
	v := m.user_set_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetPaid returns the old "user_set_paid" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUserSetPaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetPaid: %w", err)
	}
	return oldValue.UserSetPaid, nil
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (m *PaymentMutation) ClearUserSetPaid() {
	m.user_set_paid = nil
	m.clearedFields[payment.FieldUserSetPaid] = struct{}{}
}

// UserSetPaidCleared returns if the "user_set_paid" field was cleared in this mutation.
func (m *PaymentMutation) UserSetPaidCleared() bool {
	_, ok := m.clearedFields[payment.FieldUserSetPaid]
	return ok
}

// ResetUserSetPaid resets all changes to the "user_set_paid" field.
func (m *PaymentMutation) ResetUserSetPaid() {
	m.user_set_paid = nil
	delete(m.clearedFields, payment.FieldUserSetPaid)
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (m *PaymentMutation) SetUserSetCanceled(b bool) {
	m.user_set_canceled = &b
}

// UserSetCanceled returns the value of the "user_set_canceled" field in the mutation.
func (m *PaymentMutation) UserSetCanceled() (r bool, exists bool) {
	v := m.user_set_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetCanceled returns the old "user_set_canceled" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUserSetCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetCanceled: %w", err)
	}
	return oldValue.UserSetCanceled, nil
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (m *PaymentMutation) ClearUserSetCanceled() {
	m.user_set_canceled = nil
	m.clearedFields[payment.FieldUserSetCanceled] = struct{}{}
}

// UserSetCanceledCleared returns if the "user_set_canceled" field was cleared in this mutation.
func (m *PaymentMutation) UserSetCanceledCleared() bool {
	_, ok := m.clearedFields[payment.FieldUserSetCanceled]
	return ok
}

// ResetUserSetCanceled resets all changes to the "user_set_canceled" field.
func (m *PaymentMutation) ResetUserSetCanceled() {
	m.user_set_canceled = nil
	delete(m.clearedFields, payment.FieldUserSetCanceled)
}

// SetFakePayment sets the "fake_payment" field.
func (m *PaymentMutation) SetFakePayment(b bool) {
	m.fake_payment = &b
}

// FakePayment returns the value of the "fake_payment" field in the mutation.
func (m *PaymentMutation) FakePayment() (r bool, exists bool) {
	v := m.fake_payment
	if v == nil {
		return
	}
	return *v, true
}

// OldFakePayment returns the old "fake_payment" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldFakePayment(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFakePayment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFakePayment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFakePayment: %w", err)
	}
	return oldValue.FakePayment, nil
}

// ClearFakePayment clears the value of the "fake_payment" field.
func (m *PaymentMutation) ClearFakePayment() {
	m.fake_payment = nil
	m.clearedFields[payment.FieldFakePayment] = struct{}{}
}

// FakePaymentCleared returns if the "fake_payment" field was cleared in this mutation.
func (m *PaymentMutation) FakePaymentCleared() bool {
	_, ok := m.clearedFields[payment.FieldFakePayment]
	return ok
}

// ResetFakePayment resets all changes to the "fake_payment" field.
func (m *PaymentMutation) ResetFakePayment() {
	m.fake_payment = nil
	delete(m.clearedFields, payment.FieldFakePayment)
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, payment.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, payment.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, payment.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, payment.FieldOrderID)
	}
	if m.account_id != nil {
		fields = append(fields, payment.FieldAccountID)
	}
	if m.start_amount != nil {
		fields = append(fields, payment.FieldStartAmount)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.pay_with_balance_amount != nil {
		fields = append(fields, payment.FieldPayWithBalanceAmount)
	}
	if m.finish_amount != nil {
		fields = append(fields, payment.FieldFinishAmount)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, payment.FieldCoinUsdCurrency)
	}
	if m.local_coin_usd_currency != nil {
		fields = append(fields, payment.FieldLocalCoinUsdCurrency)
	}
	if m.live_coin_usd_currency != nil {
		fields = append(fields, payment.FieldLiveCoinUsdCurrency)
	}
	if m.coin_info_id != nil {
		fields = append(fields, payment.FieldCoinInfoID)
	}
	if m.state != nil {
		fields = append(fields, payment.FieldState)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, payment.FieldChainTransactionID)
	}
	if m.user_set_paid != nil {
		fields = append(fields, payment.FieldUserSetPaid)
	}
	if m.user_set_canceled != nil {
		fields = append(fields, payment.FieldUserSetCanceled)
	}
	if m.fake_payment != nil {
		fields = append(fields, payment.FieldFakePayment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	case payment.FieldDeletedAt:
		return m.DeletedAt()
	case payment.FieldAppID:
		return m.AppID()
	case payment.FieldUserID:
		return m.UserID()
	case payment.FieldGoodID:
		return m.GoodID()
	case payment.FieldOrderID:
		return m.OrderID()
	case payment.FieldAccountID:
		return m.AccountID()
	case payment.FieldStartAmount:
		return m.StartAmount()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldPayWithBalanceAmount:
		return m.PayWithBalanceAmount()
	case payment.FieldFinishAmount:
		return m.FinishAmount()
	case payment.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case payment.FieldLocalCoinUsdCurrency:
		return m.LocalCoinUsdCurrency()
	case payment.FieldLiveCoinUsdCurrency:
		return m.LiveCoinUsdCurrency()
	case payment.FieldCoinInfoID:
		return m.CoinInfoID()
	case payment.FieldState:
		return m.State()
	case payment.FieldChainTransactionID:
		return m.ChainTransactionID()
	case payment.FieldUserSetPaid:
		return m.UserSetPaid()
	case payment.FieldUserSetCanceled:
		return m.UserSetCanceled()
	case payment.FieldFakePayment:
		return m.FakePayment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case payment.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case payment.FieldAppID:
		return m.OldAppID(ctx)
	case payment.FieldUserID:
		return m.OldUserID(ctx)
	case payment.FieldGoodID:
		return m.OldGoodID(ctx)
	case payment.FieldOrderID:
		return m.OldOrderID(ctx)
	case payment.FieldAccountID:
		return m.OldAccountID(ctx)
	case payment.FieldStartAmount:
		return m.OldStartAmount(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldPayWithBalanceAmount:
		return m.OldPayWithBalanceAmount(ctx)
	case payment.FieldFinishAmount:
		return m.OldFinishAmount(ctx)
	case payment.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case payment.FieldLocalCoinUsdCurrency:
		return m.OldLocalCoinUsdCurrency(ctx)
	case payment.FieldLiveCoinUsdCurrency:
		return m.OldLiveCoinUsdCurrency(ctx)
	case payment.FieldCoinInfoID:
		return m.OldCoinInfoID(ctx)
	case payment.FieldState:
		return m.OldState(ctx)
	case payment.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case payment.FieldUserSetPaid:
		return m.OldUserSetPaid(ctx)
	case payment.FieldUserSetCanceled:
		return m.OldUserSetCanceled(ctx)
	case payment.FieldFakePayment:
		return m.OldFakePayment(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case payment.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case payment.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case payment.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case payment.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case payment.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case payment.FieldStartAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAmount(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldPayWithBalanceAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayWithBalanceAmount(v)
		return nil
	case payment.FieldFinishAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishAmount(v)
		return nil
	case payment.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalCoinUsdCurrency(v)
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveCoinUsdCurrency(v)
		return nil
	case payment.FieldCoinInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinInfoID(v)
		return nil
	case payment.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case payment.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case payment.FieldUserSetPaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetPaid(v)
		return nil
	case payment.FieldUserSetCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetCanceled(v)
		return nil
	case payment.FieldFakePayment:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFakePayment(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.AddedCreatedAt()
	case payment.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case payment.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldStartAmount) {
		fields = append(fields, payment.FieldStartAmount)
	}
	if m.FieldCleared(payment.FieldAmount) {
		fields = append(fields, payment.FieldAmount)
	}
	if m.FieldCleared(payment.FieldPayWithBalanceAmount) {
		fields = append(fields, payment.FieldPayWithBalanceAmount)
	}
	if m.FieldCleared(payment.FieldFinishAmount) {
		fields = append(fields, payment.FieldFinishAmount)
	}
	if m.FieldCleared(payment.FieldCoinUsdCurrency) {
		fields = append(fields, payment.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(payment.FieldLocalCoinUsdCurrency) {
		fields = append(fields, payment.FieldLocalCoinUsdCurrency)
	}
	if m.FieldCleared(payment.FieldLiveCoinUsdCurrency) {
		fields = append(fields, payment.FieldLiveCoinUsdCurrency)
	}
	if m.FieldCleared(payment.FieldState) {
		fields = append(fields, payment.FieldState)
	}
	if m.FieldCleared(payment.FieldChainTransactionID) {
		fields = append(fields, payment.FieldChainTransactionID)
	}
	if m.FieldCleared(payment.FieldUserSetPaid) {
		fields = append(fields, payment.FieldUserSetPaid)
	}
	if m.FieldCleared(payment.FieldUserSetCanceled) {
		fields = append(fields, payment.FieldUserSetCanceled)
	}
	if m.FieldCleared(payment.FieldFakePayment) {
		fields = append(fields, payment.FieldFakePayment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldStartAmount:
		m.ClearStartAmount()
		return nil
	case payment.FieldAmount:
		m.ClearAmount()
		return nil
	case payment.FieldPayWithBalanceAmount:
		m.ClearPayWithBalanceAmount()
		return nil
	case payment.FieldFinishAmount:
		m.ClearFinishAmount()
		return nil
	case payment.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		m.ClearLocalCoinUsdCurrency()
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		m.ClearLiveCoinUsdCurrency()
		return nil
	case payment.FieldState:
		m.ClearState()
		return nil
	case payment.FieldChainTransactionID:
		m.ClearChainTransactionID()
		return nil
	case payment.FieldUserSetPaid:
		m.ClearUserSetPaid()
		return nil
	case payment.FieldUserSetCanceled:
		m.ClearUserSetCanceled()
		return nil
	case payment.FieldFakePayment:
		m.ClearFakePayment()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case payment.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case payment.FieldAppID:
		m.ResetAppID()
		return nil
	case payment.FieldUserID:
		m.ResetUserID()
		return nil
	case payment.FieldGoodID:
		m.ResetGoodID()
		return nil
	case payment.FieldOrderID:
		m.ResetOrderID()
		return nil
	case payment.FieldAccountID:
		m.ResetAccountID()
		return nil
	case payment.FieldStartAmount:
		m.ResetStartAmount()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldPayWithBalanceAmount:
		m.ResetPayWithBalanceAmount()
		return nil
	case payment.FieldFinishAmount:
		m.ResetFinishAmount()
		return nil
	case payment.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case payment.FieldLocalCoinUsdCurrency:
		m.ResetLocalCoinUsdCurrency()
		return nil
	case payment.FieldLiveCoinUsdCurrency:
		m.ResetLiveCoinUsdCurrency()
		return nil
	case payment.FieldCoinInfoID:
		m.ResetCoinInfoID()
		return nil
	case payment.FieldState:
		m.ResetState()
		return nil
	case payment.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case payment.FieldUserSetPaid:
		m.ResetUserSetPaid()
		return nil
	case payment.FieldUserSetCanceled:
		m.ResetUserSetCanceled()
		return nil
	case payment.FieldFakePayment:
		m.ResetFakePayment()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Payment edge %s", name)
}
