// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/message/npool/order/mw/v1/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/appconfig"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/compensate"
	entorder "github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderbase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/ordercoupon"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderlock"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentbalance"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymentcontract"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderpaymenttransfer"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/orderstatebase"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/outofgas"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/payment"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/powerrentalstate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppConfig            = "AppConfig"
	TypeCompensate           = "Compensate"
	TypeOrder                = "Order"
	TypeOrderBase            = "OrderBase"
	TypeOrderCoupon          = "OrderCoupon"
	TypeOrderLock            = "OrderLock"
	TypeOrderPaymentBalance  = "OrderPaymentBalance"
	TypeOrderPaymentContract = "OrderPaymentContract"
	TypeOrderPaymentTransfer = "OrderPaymentTransfer"
	TypeOrderState           = "OrderState"
	TypeOrderStateBase       = "OrderStateBase"
	TypeOutOfGas             = "OutOfGas"
	TypePayment              = "Payment"
	TypePowerRental          = "PowerRental"
	TypePowerRentalState     = "PowerRentalState"
)

// AppConfigMutation represents an operation that mutates the AppConfig nodes in the graph.
type AppConfigMutation struct {
	config
	op                                         Op
	typ                                        string
	id                                         *uint32
	created_at                                 *uint32
	addcreated_at                              *int32
	updated_at                                 *uint32
	addupdated_at                              *int32
	deleted_at                                 *uint32
	adddeleted_at                              *int32
	ent_id                                     *uuid.UUID
	app_id                                     *uuid.UUID
	simulate_order_coupon_mode                 *string
	simulate_order_coupon_probability          *decimal.Decimal
	simulate_order_cashable_profit_probability *decimal.Decimal
	enable_simulate_order                      *bool
	max_unpaid_orders                          *uint32
	addmax_unpaid_orders                       *int32
	clearedFields                              map[string]struct{}
	done                                       bool
	oldValue                                   func(context.Context) (*AppConfig, error)
	predicates                                 []predicate.AppConfig
}

var _ ent.Mutation = (*AppConfigMutation)(nil)

// appconfigOption allows management of the mutation configuration using functional options.
type appconfigOption func(*AppConfigMutation)

// newAppConfigMutation creates new mutation for the AppConfig entity.
func newAppConfigMutation(c config, op Op, opts ...appconfigOption) *AppConfigMutation {
	m := &AppConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeAppConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppConfigID sets the ID field of the mutation.
func withAppConfigID(id uint32) appconfigOption {
	return func(m *AppConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *AppConfig
		)
		m.oldValue = func(ctx context.Context) (*AppConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppConfig sets the old AppConfig of the mutation.
func withAppConfig(node *AppConfig) appconfigOption {
	return func(m *AppConfigMutation) {
		m.oldValue = func(context.Context) (*AppConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppConfig entities.
func (m *AppConfigMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppConfigMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppConfigMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppConfigMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppConfigMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AppConfigMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AppConfigMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppConfigMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppConfigMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppConfigMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AppConfigMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AppConfigMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppConfigMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AppConfigMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AppConfigMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AppConfigMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AppConfigMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AppConfigMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *AppConfigMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *AppConfigMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *AppConfigMutation) ResetEntID() {
	m.ent_id = nil
}

// SetAppID sets the "app_id" field.
func (m *AppConfigMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppConfigMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AppConfigMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[appconfig.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AppConfigMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppConfigMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, appconfig.FieldAppID)
}

// SetSimulateOrderCouponMode sets the "simulate_order_coupon_mode" field.
func (m *AppConfigMutation) SetSimulateOrderCouponMode(s string) {
	m.simulate_order_coupon_mode = &s
}

// SimulateOrderCouponMode returns the value of the "simulate_order_coupon_mode" field in the mutation.
func (m *AppConfigMutation) SimulateOrderCouponMode() (r string, exists bool) {
	v := m.simulate_order_coupon_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldSimulateOrderCouponMode returns the old "simulate_order_coupon_mode" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldSimulateOrderCouponMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimulateOrderCouponMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimulateOrderCouponMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimulateOrderCouponMode: %w", err)
	}
	return oldValue.SimulateOrderCouponMode, nil
}

// ClearSimulateOrderCouponMode clears the value of the "simulate_order_coupon_mode" field.
func (m *AppConfigMutation) ClearSimulateOrderCouponMode() {
	m.simulate_order_coupon_mode = nil
	m.clearedFields[appconfig.FieldSimulateOrderCouponMode] = struct{}{}
}

// SimulateOrderCouponModeCleared returns if the "simulate_order_coupon_mode" field was cleared in this mutation.
func (m *AppConfigMutation) SimulateOrderCouponModeCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldSimulateOrderCouponMode]
	return ok
}

// ResetSimulateOrderCouponMode resets all changes to the "simulate_order_coupon_mode" field.
func (m *AppConfigMutation) ResetSimulateOrderCouponMode() {
	m.simulate_order_coupon_mode = nil
	delete(m.clearedFields, appconfig.FieldSimulateOrderCouponMode)
}

// SetSimulateOrderCouponProbability sets the "simulate_order_coupon_probability" field.
func (m *AppConfigMutation) SetSimulateOrderCouponProbability(d decimal.Decimal) {
	m.simulate_order_coupon_probability = &d
}

// SimulateOrderCouponProbability returns the value of the "simulate_order_coupon_probability" field in the mutation.
func (m *AppConfigMutation) SimulateOrderCouponProbability() (r decimal.Decimal, exists bool) {
	v := m.simulate_order_coupon_probability
	if v == nil {
		return
	}
	return *v, true
}

// OldSimulateOrderCouponProbability returns the old "simulate_order_coupon_probability" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldSimulateOrderCouponProbability(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimulateOrderCouponProbability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimulateOrderCouponProbability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimulateOrderCouponProbability: %w", err)
	}
	return oldValue.SimulateOrderCouponProbability, nil
}

// ClearSimulateOrderCouponProbability clears the value of the "simulate_order_coupon_probability" field.
func (m *AppConfigMutation) ClearSimulateOrderCouponProbability() {
	m.simulate_order_coupon_probability = nil
	m.clearedFields[appconfig.FieldSimulateOrderCouponProbability] = struct{}{}
}

// SimulateOrderCouponProbabilityCleared returns if the "simulate_order_coupon_probability" field was cleared in this mutation.
func (m *AppConfigMutation) SimulateOrderCouponProbabilityCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldSimulateOrderCouponProbability]
	return ok
}

// ResetSimulateOrderCouponProbability resets all changes to the "simulate_order_coupon_probability" field.
func (m *AppConfigMutation) ResetSimulateOrderCouponProbability() {
	m.simulate_order_coupon_probability = nil
	delete(m.clearedFields, appconfig.FieldSimulateOrderCouponProbability)
}

// SetSimulateOrderCashableProfitProbability sets the "simulate_order_cashable_profit_probability" field.
func (m *AppConfigMutation) SetSimulateOrderCashableProfitProbability(d decimal.Decimal) {
	m.simulate_order_cashable_profit_probability = &d
}

// SimulateOrderCashableProfitProbability returns the value of the "simulate_order_cashable_profit_probability" field in the mutation.
func (m *AppConfigMutation) SimulateOrderCashableProfitProbability() (r decimal.Decimal, exists bool) {
	v := m.simulate_order_cashable_profit_probability
	if v == nil {
		return
	}
	return *v, true
}

// OldSimulateOrderCashableProfitProbability returns the old "simulate_order_cashable_profit_probability" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldSimulateOrderCashableProfitProbability(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimulateOrderCashableProfitProbability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimulateOrderCashableProfitProbability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimulateOrderCashableProfitProbability: %w", err)
	}
	return oldValue.SimulateOrderCashableProfitProbability, nil
}

// ClearSimulateOrderCashableProfitProbability clears the value of the "simulate_order_cashable_profit_probability" field.
func (m *AppConfigMutation) ClearSimulateOrderCashableProfitProbability() {
	m.simulate_order_cashable_profit_probability = nil
	m.clearedFields[appconfig.FieldSimulateOrderCashableProfitProbability] = struct{}{}
}

// SimulateOrderCashableProfitProbabilityCleared returns if the "simulate_order_cashable_profit_probability" field was cleared in this mutation.
func (m *AppConfigMutation) SimulateOrderCashableProfitProbabilityCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldSimulateOrderCashableProfitProbability]
	return ok
}

// ResetSimulateOrderCashableProfitProbability resets all changes to the "simulate_order_cashable_profit_probability" field.
func (m *AppConfigMutation) ResetSimulateOrderCashableProfitProbability() {
	m.simulate_order_cashable_profit_probability = nil
	delete(m.clearedFields, appconfig.FieldSimulateOrderCashableProfitProbability)
}

// SetEnableSimulateOrder sets the "enable_simulate_order" field.
func (m *AppConfigMutation) SetEnableSimulateOrder(b bool) {
	m.enable_simulate_order = &b
}

// EnableSimulateOrder returns the value of the "enable_simulate_order" field in the mutation.
func (m *AppConfigMutation) EnableSimulateOrder() (r bool, exists bool) {
	v := m.enable_simulate_order
	if v == nil {
		return
	}
	return *v, true
}

// OldEnableSimulateOrder returns the old "enable_simulate_order" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldEnableSimulateOrder(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnableSimulateOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnableSimulateOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnableSimulateOrder: %w", err)
	}
	return oldValue.EnableSimulateOrder, nil
}

// ClearEnableSimulateOrder clears the value of the "enable_simulate_order" field.
func (m *AppConfigMutation) ClearEnableSimulateOrder() {
	m.enable_simulate_order = nil
	m.clearedFields[appconfig.FieldEnableSimulateOrder] = struct{}{}
}

// EnableSimulateOrderCleared returns if the "enable_simulate_order" field was cleared in this mutation.
func (m *AppConfigMutation) EnableSimulateOrderCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldEnableSimulateOrder]
	return ok
}

// ResetEnableSimulateOrder resets all changes to the "enable_simulate_order" field.
func (m *AppConfigMutation) ResetEnableSimulateOrder() {
	m.enable_simulate_order = nil
	delete(m.clearedFields, appconfig.FieldEnableSimulateOrder)
}

// SetMaxUnpaidOrders sets the "max_unpaid_orders" field.
func (m *AppConfigMutation) SetMaxUnpaidOrders(u uint32) {
	m.max_unpaid_orders = &u
	m.addmax_unpaid_orders = nil
}

// MaxUnpaidOrders returns the value of the "max_unpaid_orders" field in the mutation.
func (m *AppConfigMutation) MaxUnpaidOrders() (r uint32, exists bool) {
	v := m.max_unpaid_orders
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxUnpaidOrders returns the old "max_unpaid_orders" field's value of the AppConfig entity.
// If the AppConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppConfigMutation) OldMaxUnpaidOrders(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxUnpaidOrders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxUnpaidOrders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxUnpaidOrders: %w", err)
	}
	return oldValue.MaxUnpaidOrders, nil
}

// AddMaxUnpaidOrders adds u to the "max_unpaid_orders" field.
func (m *AppConfigMutation) AddMaxUnpaidOrders(u int32) {
	if m.addmax_unpaid_orders != nil {
		*m.addmax_unpaid_orders += u
	} else {
		m.addmax_unpaid_orders = &u
	}
}

// AddedMaxUnpaidOrders returns the value that was added to the "max_unpaid_orders" field in this mutation.
func (m *AppConfigMutation) AddedMaxUnpaidOrders() (r int32, exists bool) {
	v := m.addmax_unpaid_orders
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaxUnpaidOrders clears the value of the "max_unpaid_orders" field.
func (m *AppConfigMutation) ClearMaxUnpaidOrders() {
	m.max_unpaid_orders = nil
	m.addmax_unpaid_orders = nil
	m.clearedFields[appconfig.FieldMaxUnpaidOrders] = struct{}{}
}

// MaxUnpaidOrdersCleared returns if the "max_unpaid_orders" field was cleared in this mutation.
func (m *AppConfigMutation) MaxUnpaidOrdersCleared() bool {
	_, ok := m.clearedFields[appconfig.FieldMaxUnpaidOrders]
	return ok
}

// ResetMaxUnpaidOrders resets all changes to the "max_unpaid_orders" field.
func (m *AppConfigMutation) ResetMaxUnpaidOrders() {
	m.max_unpaid_orders = nil
	m.addmax_unpaid_orders = nil
	delete(m.clearedFields, appconfig.FieldMaxUnpaidOrders)
}

// Where appends a list predicates to the AppConfigMutation builder.
func (m *AppConfigMutation) Where(ps ...predicate.AppConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppConfig).
func (m *AppConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppConfigMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, appconfig.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appconfig.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, appconfig.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, appconfig.FieldEntID)
	}
	if m.app_id != nil {
		fields = append(fields, appconfig.FieldAppID)
	}
	if m.simulate_order_coupon_mode != nil {
		fields = append(fields, appconfig.FieldSimulateOrderCouponMode)
	}
	if m.simulate_order_coupon_probability != nil {
		fields = append(fields, appconfig.FieldSimulateOrderCouponProbability)
	}
	if m.simulate_order_cashable_profit_probability != nil {
		fields = append(fields, appconfig.FieldSimulateOrderCashableProfitProbability)
	}
	if m.enable_simulate_order != nil {
		fields = append(fields, appconfig.FieldEnableSimulateOrder)
	}
	if m.max_unpaid_orders != nil {
		fields = append(fields, appconfig.FieldMaxUnpaidOrders)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appconfig.FieldCreatedAt:
		return m.CreatedAt()
	case appconfig.FieldUpdatedAt:
		return m.UpdatedAt()
	case appconfig.FieldDeletedAt:
		return m.DeletedAt()
	case appconfig.FieldEntID:
		return m.EntID()
	case appconfig.FieldAppID:
		return m.AppID()
	case appconfig.FieldSimulateOrderCouponMode:
		return m.SimulateOrderCouponMode()
	case appconfig.FieldSimulateOrderCouponProbability:
		return m.SimulateOrderCouponProbability()
	case appconfig.FieldSimulateOrderCashableProfitProbability:
		return m.SimulateOrderCashableProfitProbability()
	case appconfig.FieldEnableSimulateOrder:
		return m.EnableSimulateOrder()
	case appconfig.FieldMaxUnpaidOrders:
		return m.MaxUnpaidOrders()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appconfig.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appconfig.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appconfig.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case appconfig.FieldEntID:
		return m.OldEntID(ctx)
	case appconfig.FieldAppID:
		return m.OldAppID(ctx)
	case appconfig.FieldSimulateOrderCouponMode:
		return m.OldSimulateOrderCouponMode(ctx)
	case appconfig.FieldSimulateOrderCouponProbability:
		return m.OldSimulateOrderCouponProbability(ctx)
	case appconfig.FieldSimulateOrderCashableProfitProbability:
		return m.OldSimulateOrderCashableProfitProbability(ctx)
	case appconfig.FieldEnableSimulateOrder:
		return m.OldEnableSimulateOrder(ctx)
	case appconfig.FieldMaxUnpaidOrders:
		return m.OldMaxUnpaidOrders(ctx)
	}
	return nil, fmt.Errorf("unknown AppConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appconfig.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appconfig.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appconfig.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case appconfig.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case appconfig.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appconfig.FieldSimulateOrderCouponMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimulateOrderCouponMode(v)
		return nil
	case appconfig.FieldSimulateOrderCouponProbability:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimulateOrderCouponProbability(v)
		return nil
	case appconfig.FieldSimulateOrderCashableProfitProbability:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimulateOrderCashableProfitProbability(v)
		return nil
	case appconfig.FieldEnableSimulateOrder:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnableSimulateOrder(v)
		return nil
	case appconfig.FieldMaxUnpaidOrders:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxUnpaidOrders(v)
		return nil
	}
	return fmt.Errorf("unknown AppConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppConfigMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, appconfig.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, appconfig.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, appconfig.FieldDeletedAt)
	}
	if m.addmax_unpaid_orders != nil {
		fields = append(fields, appconfig.FieldMaxUnpaidOrders)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appconfig.FieldCreatedAt:
		return m.AddedCreatedAt()
	case appconfig.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case appconfig.FieldDeletedAt:
		return m.AddedDeletedAt()
	case appconfig.FieldMaxUnpaidOrders:
		return m.AddedMaxUnpaidOrders()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appconfig.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case appconfig.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case appconfig.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case appconfig.FieldMaxUnpaidOrders:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxUnpaidOrders(v)
		return nil
	}
	return fmt.Errorf("unknown AppConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(appconfig.FieldAppID) {
		fields = append(fields, appconfig.FieldAppID)
	}
	if m.FieldCleared(appconfig.FieldSimulateOrderCouponMode) {
		fields = append(fields, appconfig.FieldSimulateOrderCouponMode)
	}
	if m.FieldCleared(appconfig.FieldSimulateOrderCouponProbability) {
		fields = append(fields, appconfig.FieldSimulateOrderCouponProbability)
	}
	if m.FieldCleared(appconfig.FieldSimulateOrderCashableProfitProbability) {
		fields = append(fields, appconfig.FieldSimulateOrderCashableProfitProbability)
	}
	if m.FieldCleared(appconfig.FieldEnableSimulateOrder) {
		fields = append(fields, appconfig.FieldEnableSimulateOrder)
	}
	if m.FieldCleared(appconfig.FieldMaxUnpaidOrders) {
		fields = append(fields, appconfig.FieldMaxUnpaidOrders)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppConfigMutation) ClearField(name string) error {
	switch name {
	case appconfig.FieldAppID:
		m.ClearAppID()
		return nil
	case appconfig.FieldSimulateOrderCouponMode:
		m.ClearSimulateOrderCouponMode()
		return nil
	case appconfig.FieldSimulateOrderCouponProbability:
		m.ClearSimulateOrderCouponProbability()
		return nil
	case appconfig.FieldSimulateOrderCashableProfitProbability:
		m.ClearSimulateOrderCashableProfitProbability()
		return nil
	case appconfig.FieldEnableSimulateOrder:
		m.ClearEnableSimulateOrder()
		return nil
	case appconfig.FieldMaxUnpaidOrders:
		m.ClearMaxUnpaidOrders()
		return nil
	}
	return fmt.Errorf("unknown AppConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppConfigMutation) ResetField(name string) error {
	switch name {
	case appconfig.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appconfig.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appconfig.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case appconfig.FieldEntID:
		m.ResetEntID()
		return nil
	case appconfig.FieldAppID:
		m.ResetAppID()
		return nil
	case appconfig.FieldSimulateOrderCouponMode:
		m.ResetSimulateOrderCouponMode()
		return nil
	case appconfig.FieldSimulateOrderCouponProbability:
		m.ResetSimulateOrderCouponProbability()
		return nil
	case appconfig.FieldSimulateOrderCashableProfitProbability:
		m.ResetSimulateOrderCashableProfitProbability()
		return nil
	case appconfig.FieldEnableSimulateOrder:
		m.ResetEnableSimulateOrder()
		return nil
	case appconfig.FieldMaxUnpaidOrders:
		m.ResetMaxUnpaidOrders()
		return nil
	}
	return fmt.Errorf("unknown AppConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppConfig edge %s", name)
}

// CompensateMutation represents an operation that mutates the Compensate nodes in the graph.
type CompensateMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	ent_id          *uuid.UUID
	order_id        *uuid.UUID
	start_at        *uint32
	addstart_at     *int32
	end_at          *uint32
	addend_at       *int32
	compensate_type *string
	title           *string
	message         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Compensate, error)
	predicates      []predicate.Compensate
}

var _ ent.Mutation = (*CompensateMutation)(nil)

// compensateOption allows management of the mutation configuration using functional options.
type compensateOption func(*CompensateMutation)

// newCompensateMutation creates new mutation for the Compensate entity.
func newCompensateMutation(c config, op Op, opts ...compensateOption) *CompensateMutation {
	m := &CompensateMutation{
		config:        c,
		op:            op,
		typ:           TypeCompensate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompensateID sets the ID field of the mutation.
func withCompensateID(id uint32) compensateOption {
	return func(m *CompensateMutation) {
		var (
			err   error
			once  sync.Once
			value *Compensate
		)
		m.oldValue = func(ctx context.Context) (*Compensate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Compensate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompensate sets the old Compensate of the mutation.
func withCompensate(node *Compensate) compensateOption {
	return func(m *CompensateMutation) {
		m.oldValue = func(context.Context) (*Compensate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompensateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompensateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Compensate entities.
func (m *CompensateMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompensateMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompensateMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Compensate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CompensateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CompensateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CompensateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CompensateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CompensateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CompensateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CompensateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CompensateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CompensateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CompensateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CompensateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CompensateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CompensateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CompensateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CompensateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *CompensateMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *CompensateMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *CompensateMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *CompensateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *CompensateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *CompensateMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[compensate.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *CompensateMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[compensate.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *CompensateMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, compensate.FieldOrderID)
}

// SetStartAt sets the "start_at" field.
func (m *CompensateMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *CompensateMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *CompensateMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *CompensateMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *CompensateMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[compensate.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *CompensateMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[compensate.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *CompensateMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, compensate.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *CompensateMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *CompensateMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *CompensateMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *CompensateMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *CompensateMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[compensate.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *CompensateMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[compensate.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *CompensateMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, compensate.FieldEndAt)
}

// SetCompensateType sets the "compensate_type" field.
func (m *CompensateMutation) SetCompensateType(s string) {
	m.compensate_type = &s
}

// CompensateType returns the value of the "compensate_type" field in the mutation.
func (m *CompensateMutation) CompensateType() (r string, exists bool) {
	v := m.compensate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateType returns the old "compensate_type" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldCompensateType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateType: %w", err)
	}
	return oldValue.CompensateType, nil
}

// ClearCompensateType clears the value of the "compensate_type" field.
func (m *CompensateMutation) ClearCompensateType() {
	m.compensate_type = nil
	m.clearedFields[compensate.FieldCompensateType] = struct{}{}
}

// CompensateTypeCleared returns if the "compensate_type" field was cleared in this mutation.
func (m *CompensateMutation) CompensateTypeCleared() bool {
	_, ok := m.clearedFields[compensate.FieldCompensateType]
	return ok
}

// ResetCompensateType resets all changes to the "compensate_type" field.
func (m *CompensateMutation) ResetCompensateType() {
	m.compensate_type = nil
	delete(m.clearedFields, compensate.FieldCompensateType)
}

// SetTitle sets the "title" field.
func (m *CompensateMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CompensateMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *CompensateMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[compensate.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *CompensateMutation) TitleCleared() bool {
	_, ok := m.clearedFields[compensate.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *CompensateMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, compensate.FieldTitle)
}

// SetMessage sets the "message" field.
func (m *CompensateMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CompensateMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Compensate entity.
// If the Compensate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompensateMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CompensateMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[compensate.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CompensateMutation) MessageCleared() bool {
	_, ok := m.clearedFields[compensate.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CompensateMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, compensate.FieldMessage)
}

// Where appends a list predicates to the CompensateMutation builder.
func (m *CompensateMutation) Where(ps ...predicate.Compensate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompensateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Compensate).
func (m *CompensateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompensateMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, compensate.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, compensate.FieldOrderID)
	}
	if m.start_at != nil {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, compensate.FieldEndAt)
	}
	if m.compensate_type != nil {
		fields = append(fields, compensate.FieldCompensateType)
	}
	if m.title != nil {
		fields = append(fields, compensate.FieldTitle)
	}
	if m.message != nil {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompensateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.CreatedAt()
	case compensate.FieldUpdatedAt:
		return m.UpdatedAt()
	case compensate.FieldDeletedAt:
		return m.DeletedAt()
	case compensate.FieldEntID:
		return m.EntID()
	case compensate.FieldOrderID:
		return m.OrderID()
	case compensate.FieldStartAt:
		return m.StartAt()
	case compensate.FieldEndAt:
		return m.EndAt()
	case compensate.FieldCompensateType:
		return m.CompensateType()
	case compensate.FieldTitle:
		return m.Title()
	case compensate.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompensateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case compensate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case compensate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case compensate.FieldEntID:
		return m.OldEntID(ctx)
	case compensate.FieldOrderID:
		return m.OldOrderID(ctx)
	case compensate.FieldStartAt:
		return m.OldStartAt(ctx)
	case compensate.FieldEndAt:
		return m.OldEndAt(ctx)
	case compensate.FieldCompensateType:
		return m.OldCompensateType(ctx)
	case compensate.FieldTitle:
		return m.OldTitle(ctx)
	case compensate.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Compensate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case compensate.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case compensate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case compensate.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case compensate.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case compensate.FieldCompensateType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateType(v)
		return nil
	case compensate.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case compensate.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompensateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, compensate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, compensate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, compensate.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, compensate.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompensateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case compensate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case compensate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case compensate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case compensate.FieldStartAt:
		return m.AddedStartAt()
	case compensate.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case compensate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case compensate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case compensate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case compensate.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case compensate.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Compensate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompensateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(compensate.FieldOrderID) {
		fields = append(fields, compensate.FieldOrderID)
	}
	if m.FieldCleared(compensate.FieldStartAt) {
		fields = append(fields, compensate.FieldStartAt)
	}
	if m.FieldCleared(compensate.FieldEndAt) {
		fields = append(fields, compensate.FieldEndAt)
	}
	if m.FieldCleared(compensate.FieldCompensateType) {
		fields = append(fields, compensate.FieldCompensateType)
	}
	if m.FieldCleared(compensate.FieldTitle) {
		fields = append(fields, compensate.FieldTitle)
	}
	if m.FieldCleared(compensate.FieldMessage) {
		fields = append(fields, compensate.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompensateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompensateMutation) ClearField(name string) error {
	switch name {
	case compensate.FieldOrderID:
		m.ClearOrderID()
		return nil
	case compensate.FieldStartAt:
		m.ClearStartAt()
		return nil
	case compensate.FieldEndAt:
		m.ClearEndAt()
		return nil
	case compensate.FieldCompensateType:
		m.ClearCompensateType()
		return nil
	case compensate.FieldTitle:
		m.ClearTitle()
		return nil
	case compensate.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompensateMutation) ResetField(name string) error {
	switch name {
	case compensate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case compensate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case compensate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case compensate.FieldEntID:
		m.ResetEntID()
		return nil
	case compensate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case compensate.FieldStartAt:
		m.ResetStartAt()
		return nil
	case compensate.FieldEndAt:
		m.ResetEndAt()
		return nil
	case compensate.FieldCompensateType:
		m.ResetCompensateType()
		return nil
	case compensate.FieldTitle:
		m.ResetTitle()
		return nil
	case compensate.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Compensate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompensateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompensateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompensateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompensateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompensateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompensateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompensateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Compensate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompensateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Compensate edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint32
	created_at              *uint32
	addcreated_at           *int32
	updated_at              *uint32
	addupdated_at           *int32
	deleted_at              *uint32
	adddeleted_at           *int32
	ent_id                  *uuid.UUID
	app_id                  *uuid.UUID
	user_id                 *uuid.UUID
	good_id                 *uuid.UUID
	app_good_id             *uuid.UUID
	payment_id              *uuid.UUID
	parent_order_id         *uuid.UUID
	units_v1                *decimal.Decimal
	good_value              *decimal.Decimal
	good_value_usd          *decimal.Decimal
	payment_amount          *decimal.Decimal
	discount_amount         *decimal.Decimal
	promotion_id            *uuid.UUID
	duration                *uint32
	addduration             *int32
	order_type              *string
	investment_type         *string
	coupon_ids              *[]uuid.UUID
	payment_type            *string
	coin_type_id            *uuid.UUID
	payment_coin_type_id    *uuid.UUID
	transfer_amount         *decimal.Decimal
	balance_amount          *decimal.Decimal
	coin_usd_currency       *decimal.Decimal
	local_coin_usd_currency *decimal.Decimal
	live_coin_usd_currency  *decimal.Decimal
	simulate                *bool
	create_method           *string
	multi_payment_coins     *bool
	payment_amounts         *[]order.PaymentAmount
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Order, error)
	predicates              []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uint32) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderMutation) ResetEntID() {
	m.ent_id = nil
}

// SetAppID sets the "app_id" field.
func (m *OrderMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *OrderMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *OrderMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *OrderMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *OrderMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *OrderMutation) ResetGoodID() {
	m.good_id = nil
}

// SetAppGoodID sets the "app_good_id" field.
func (m *OrderMutation) SetAppGoodID(u uuid.UUID) {
	m.app_good_id = &u
}

// AppGoodID returns the value of the "app_good_id" field in the mutation.
func (m *OrderMutation) AppGoodID() (r uuid.UUID, exists bool) {
	v := m.app_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppGoodID returns the old "app_good_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAppGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppGoodID: %w", err)
	}
	return oldValue.AppGoodID, nil
}

// ResetAppGoodID resets all changes to the "app_good_id" field.
func (m *OrderMutation) ResetAppGoodID() {
	m.app_good_id = nil
}

// SetPaymentID sets the "payment_id" field.
func (m *OrderMutation) SetPaymentID(u uuid.UUID) {
	m.payment_id = &u
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *OrderMutation) PaymentID() (r uuid.UUID, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *OrderMutation) ClearPaymentID() {
	m.payment_id = nil
	m.clearedFields[entorder.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *OrderMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *OrderMutation) ResetPaymentID() {
	m.payment_id = nil
	delete(m.clearedFields, entorder.FieldPaymentID)
}

// SetParentOrderID sets the "parent_order_id" field.
func (m *OrderMutation) SetParentOrderID(u uuid.UUID) {
	m.parent_order_id = &u
}

// ParentOrderID returns the value of the "parent_order_id" field in the mutation.
func (m *OrderMutation) ParentOrderID() (r uuid.UUID, exists bool) {
	v := m.parent_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentOrderID returns the old "parent_order_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldParentOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentOrderID: %w", err)
	}
	return oldValue.ParentOrderID, nil
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (m *OrderMutation) ClearParentOrderID() {
	m.parent_order_id = nil
	m.clearedFields[entorder.FieldParentOrderID] = struct{}{}
}

// ParentOrderIDCleared returns if the "parent_order_id" field was cleared in this mutation.
func (m *OrderMutation) ParentOrderIDCleared() bool {
	_, ok := m.clearedFields[entorder.FieldParentOrderID]
	return ok
}

// ResetParentOrderID resets all changes to the "parent_order_id" field.
func (m *OrderMutation) ResetParentOrderID() {
	m.parent_order_id = nil
	delete(m.clearedFields, entorder.FieldParentOrderID)
}

// SetUnitsV1 sets the "units_v1" field.
func (m *OrderMutation) SetUnitsV1(d decimal.Decimal) {
	m.units_v1 = &d
}

// UnitsV1 returns the value of the "units_v1" field in the mutation.
func (m *OrderMutation) UnitsV1() (r decimal.Decimal, exists bool) {
	v := m.units_v1
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitsV1 returns the old "units_v1" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUnitsV1(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitsV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitsV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitsV1: %w", err)
	}
	return oldValue.UnitsV1, nil
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (m *OrderMutation) ClearUnitsV1() {
	m.units_v1 = nil
	m.clearedFields[entorder.FieldUnitsV1] = struct{}{}
}

// UnitsV1Cleared returns if the "units_v1" field was cleared in this mutation.
func (m *OrderMutation) UnitsV1Cleared() bool {
	_, ok := m.clearedFields[entorder.FieldUnitsV1]
	return ok
}

// ResetUnitsV1 resets all changes to the "units_v1" field.
func (m *OrderMutation) ResetUnitsV1() {
	m.units_v1 = nil
	delete(m.clearedFields, entorder.FieldUnitsV1)
}

// SetGoodValue sets the "good_value" field.
func (m *OrderMutation) SetGoodValue(d decimal.Decimal) {
	m.good_value = &d
}

// GoodValue returns the value of the "good_value" field in the mutation.
func (m *OrderMutation) GoodValue() (r decimal.Decimal, exists bool) {
	v := m.good_value
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodValue returns the old "good_value" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodValue: %w", err)
	}
	return oldValue.GoodValue, nil
}

// ClearGoodValue clears the value of the "good_value" field.
func (m *OrderMutation) ClearGoodValue() {
	m.good_value = nil
	m.clearedFields[entorder.FieldGoodValue] = struct{}{}
}

// GoodValueCleared returns if the "good_value" field was cleared in this mutation.
func (m *OrderMutation) GoodValueCleared() bool {
	_, ok := m.clearedFields[entorder.FieldGoodValue]
	return ok
}

// ResetGoodValue resets all changes to the "good_value" field.
func (m *OrderMutation) ResetGoodValue() {
	m.good_value = nil
	delete(m.clearedFields, entorder.FieldGoodValue)
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (m *OrderMutation) SetGoodValueUsd(d decimal.Decimal) {
	m.good_value_usd = &d
}

// GoodValueUsd returns the value of the "good_value_usd" field in the mutation.
func (m *OrderMutation) GoodValueUsd() (r decimal.Decimal, exists bool) {
	v := m.good_value_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodValueUsd returns the old "good_value_usd" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldGoodValueUsd(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodValueUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodValueUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodValueUsd: %w", err)
	}
	return oldValue.GoodValueUsd, nil
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (m *OrderMutation) ClearGoodValueUsd() {
	m.good_value_usd = nil
	m.clearedFields[entorder.FieldGoodValueUsd] = struct{}{}
}

// GoodValueUsdCleared returns if the "good_value_usd" field was cleared in this mutation.
func (m *OrderMutation) GoodValueUsdCleared() bool {
	_, ok := m.clearedFields[entorder.FieldGoodValueUsd]
	return ok
}

// ResetGoodValueUsd resets all changes to the "good_value_usd" field.
func (m *OrderMutation) ResetGoodValueUsd() {
	m.good_value_usd = nil
	delete(m.clearedFields, entorder.FieldGoodValueUsd)
}

// SetPaymentAmount sets the "payment_amount" field.
func (m *OrderMutation) SetPaymentAmount(d decimal.Decimal) {
	m.payment_amount = &d
}

// PaymentAmount returns the value of the "payment_amount" field in the mutation.
func (m *OrderMutation) PaymentAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAmount returns the old "payment_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAmount: %w", err)
	}
	return oldValue.PaymentAmount, nil
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (m *OrderMutation) ClearPaymentAmount() {
	m.payment_amount = nil
	m.clearedFields[entorder.FieldPaymentAmount] = struct{}{}
}

// PaymentAmountCleared returns if the "payment_amount" field was cleared in this mutation.
func (m *OrderMutation) PaymentAmountCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPaymentAmount]
	return ok
}

// ResetPaymentAmount resets all changes to the "payment_amount" field.
func (m *OrderMutation) ResetPaymentAmount() {
	m.payment_amount = nil
	delete(m.clearedFields, entorder.FieldPaymentAmount)
}

// SetDiscountAmount sets the "discount_amount" field.
func (m *OrderMutation) SetDiscountAmount(d decimal.Decimal) {
	m.discount_amount = &d
}

// DiscountAmount returns the value of the "discount_amount" field in the mutation.
func (m *OrderMutation) DiscountAmount() (r decimal.Decimal, exists bool) {
	v := m.discount_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountAmount returns the old "discount_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDiscountAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountAmount: %w", err)
	}
	return oldValue.DiscountAmount, nil
}

// ClearDiscountAmount clears the value of the "discount_amount" field.
func (m *OrderMutation) ClearDiscountAmount() {
	m.discount_amount = nil
	m.clearedFields[entorder.FieldDiscountAmount] = struct{}{}
}

// DiscountAmountCleared returns if the "discount_amount" field was cleared in this mutation.
func (m *OrderMutation) DiscountAmountCleared() bool {
	_, ok := m.clearedFields[entorder.FieldDiscountAmount]
	return ok
}

// ResetDiscountAmount resets all changes to the "discount_amount" field.
func (m *OrderMutation) ResetDiscountAmount() {
	m.discount_amount = nil
	delete(m.clearedFields, entorder.FieldDiscountAmount)
}

// SetPromotionID sets the "promotion_id" field.
func (m *OrderMutation) SetPromotionID(u uuid.UUID) {
	m.promotion_id = &u
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *OrderMutation) PromotionID() (r uuid.UUID, exists bool) {
	v := m.promotion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPromotionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (m *OrderMutation) ClearPromotionID() {
	m.promotion_id = nil
	m.clearedFields[entorder.FieldPromotionID] = struct{}{}
}

// PromotionIDCleared returns if the "promotion_id" field was cleared in this mutation.
func (m *OrderMutation) PromotionIDCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPromotionID]
	return ok
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *OrderMutation) ResetPromotionID() {
	m.promotion_id = nil
	delete(m.clearedFields, entorder.FieldPromotionID)
}

// SetDuration sets the "duration" field.
func (m *OrderMutation) SetDuration(u uint32) {
	m.duration = &u
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *OrderMutation) Duration() (r uint32, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDuration(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds u to the "duration" field.
func (m *OrderMutation) AddDuration(u int32) {
	if m.addduration != nil {
		*m.addduration += u
	} else {
		m.addduration = &u
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *OrderMutation) AddedDuration() (r int32, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *OrderMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[entorder.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *OrderMutation) DurationCleared() bool {
	_, ok := m.clearedFields[entorder.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *OrderMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, entorder.FieldDuration)
}

// SetOrderType sets the "order_type" field.
func (m *OrderMutation) SetOrderType(s string) {
	m.order_type = &s
}

// OrderType returns the value of the "order_type" field in the mutation.
func (m *OrderMutation) OrderType() (r string, exists bool) {
	v := m.order_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderType returns the old "order_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderType: %w", err)
	}
	return oldValue.OrderType, nil
}

// ClearOrderType clears the value of the "order_type" field.
func (m *OrderMutation) ClearOrderType() {
	m.order_type = nil
	m.clearedFields[entorder.FieldOrderType] = struct{}{}
}

// OrderTypeCleared returns if the "order_type" field was cleared in this mutation.
func (m *OrderMutation) OrderTypeCleared() bool {
	_, ok := m.clearedFields[entorder.FieldOrderType]
	return ok
}

// ResetOrderType resets all changes to the "order_type" field.
func (m *OrderMutation) ResetOrderType() {
	m.order_type = nil
	delete(m.clearedFields, entorder.FieldOrderType)
}

// SetInvestmentType sets the "investment_type" field.
func (m *OrderMutation) SetInvestmentType(s string) {
	m.investment_type = &s
}

// InvestmentType returns the value of the "investment_type" field in the mutation.
func (m *OrderMutation) InvestmentType() (r string, exists bool) {
	v := m.investment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInvestmentType returns the old "investment_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldInvestmentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvestmentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvestmentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvestmentType: %w", err)
	}
	return oldValue.InvestmentType, nil
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (m *OrderMutation) ClearInvestmentType() {
	m.investment_type = nil
	m.clearedFields[entorder.FieldInvestmentType] = struct{}{}
}

// InvestmentTypeCleared returns if the "investment_type" field was cleared in this mutation.
func (m *OrderMutation) InvestmentTypeCleared() bool {
	_, ok := m.clearedFields[entorder.FieldInvestmentType]
	return ok
}

// ResetInvestmentType resets all changes to the "investment_type" field.
func (m *OrderMutation) ResetInvestmentType() {
	m.investment_type = nil
	delete(m.clearedFields, entorder.FieldInvestmentType)
}

// SetCouponIds sets the "coupon_ids" field.
func (m *OrderMutation) SetCouponIds(u []uuid.UUID) {
	m.coupon_ids = &u
}

// CouponIds returns the value of the "coupon_ids" field in the mutation.
func (m *OrderMutation) CouponIds() (r []uuid.UUID, exists bool) {
	v := m.coupon_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponIds returns the old "coupon_ids" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCouponIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponIds: %w", err)
	}
	return oldValue.CouponIds, nil
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (m *OrderMutation) ClearCouponIds() {
	m.coupon_ids = nil
	m.clearedFields[entorder.FieldCouponIds] = struct{}{}
}

// CouponIdsCleared returns if the "coupon_ids" field was cleared in this mutation.
func (m *OrderMutation) CouponIdsCleared() bool {
	_, ok := m.clearedFields[entorder.FieldCouponIds]
	return ok
}

// ResetCouponIds resets all changes to the "coupon_ids" field.
func (m *OrderMutation) ResetCouponIds() {
	m.coupon_ids = nil
	delete(m.clearedFields, entorder.FieldCouponIds)
}

// SetPaymentType sets the "payment_type" field.
func (m *OrderMutation) SetPaymentType(s string) {
	m.payment_type = &s
}

// PaymentType returns the value of the "payment_type" field in the mutation.
func (m *OrderMutation) PaymentType() (r string, exists bool) {
	v := m.payment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentType returns the old "payment_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentType: %w", err)
	}
	return oldValue.PaymentType, nil
}

// ClearPaymentType clears the value of the "payment_type" field.
func (m *OrderMutation) ClearPaymentType() {
	m.payment_type = nil
	m.clearedFields[entorder.FieldPaymentType] = struct{}{}
}

// PaymentTypeCleared returns if the "payment_type" field was cleared in this mutation.
func (m *OrderMutation) PaymentTypeCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPaymentType]
	return ok
}

// ResetPaymentType resets all changes to the "payment_type" field.
func (m *OrderMutation) ResetPaymentType() {
	m.payment_type = nil
	delete(m.clearedFields, entorder.FieldPaymentType)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *OrderMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *OrderMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *OrderMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (m *OrderMutation) SetPaymentCoinTypeID(u uuid.UUID) {
	m.payment_coin_type_id = &u
}

// PaymentCoinTypeID returns the value of the "payment_coin_type_id" field in the mutation.
func (m *OrderMutation) PaymentCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.payment_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentCoinTypeID returns the old "payment_coin_type_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentCoinTypeID: %w", err)
	}
	return oldValue.PaymentCoinTypeID, nil
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (m *OrderMutation) ClearPaymentCoinTypeID() {
	m.payment_coin_type_id = nil
	m.clearedFields[entorder.FieldPaymentCoinTypeID] = struct{}{}
}

// PaymentCoinTypeIDCleared returns if the "payment_coin_type_id" field was cleared in this mutation.
func (m *OrderMutation) PaymentCoinTypeIDCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPaymentCoinTypeID]
	return ok
}

// ResetPaymentCoinTypeID resets all changes to the "payment_coin_type_id" field.
func (m *OrderMutation) ResetPaymentCoinTypeID() {
	m.payment_coin_type_id = nil
	delete(m.clearedFields, entorder.FieldPaymentCoinTypeID)
}

// SetTransferAmount sets the "transfer_amount" field.
func (m *OrderMutation) SetTransferAmount(d decimal.Decimal) {
	m.transfer_amount = &d
}

// TransferAmount returns the value of the "transfer_amount" field in the mutation.
func (m *OrderMutation) TransferAmount() (r decimal.Decimal, exists bool) {
	v := m.transfer_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferAmount returns the old "transfer_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTransferAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferAmount: %w", err)
	}
	return oldValue.TransferAmount, nil
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (m *OrderMutation) ClearTransferAmount() {
	m.transfer_amount = nil
	m.clearedFields[entorder.FieldTransferAmount] = struct{}{}
}

// TransferAmountCleared returns if the "transfer_amount" field was cleared in this mutation.
func (m *OrderMutation) TransferAmountCleared() bool {
	_, ok := m.clearedFields[entorder.FieldTransferAmount]
	return ok
}

// ResetTransferAmount resets all changes to the "transfer_amount" field.
func (m *OrderMutation) ResetTransferAmount() {
	m.transfer_amount = nil
	delete(m.clearedFields, entorder.FieldTransferAmount)
}

// SetBalanceAmount sets the "balance_amount" field.
func (m *OrderMutation) SetBalanceAmount(d decimal.Decimal) {
	m.balance_amount = &d
}

// BalanceAmount returns the value of the "balance_amount" field in the mutation.
func (m *OrderMutation) BalanceAmount() (r decimal.Decimal, exists bool) {
	v := m.balance_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceAmount returns the old "balance_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldBalanceAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceAmount: %w", err)
	}
	return oldValue.BalanceAmount, nil
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (m *OrderMutation) ClearBalanceAmount() {
	m.balance_amount = nil
	m.clearedFields[entorder.FieldBalanceAmount] = struct{}{}
}

// BalanceAmountCleared returns if the "balance_amount" field was cleared in this mutation.
func (m *OrderMutation) BalanceAmountCleared() bool {
	_, ok := m.clearedFields[entorder.FieldBalanceAmount]
	return ok
}

// ResetBalanceAmount resets all changes to the "balance_amount" field.
func (m *OrderMutation) ResetBalanceAmount() {
	m.balance_amount = nil
	delete(m.clearedFields, entorder.FieldBalanceAmount)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *OrderMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *OrderMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *OrderMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.clearedFields[entorder.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *OrderMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[entorder.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *OrderMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	delete(m.clearedFields, entorder.FieldCoinUsdCurrency)
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (m *OrderMutation) SetLocalCoinUsdCurrency(d decimal.Decimal) {
	m.local_coin_usd_currency = &d
}

// LocalCoinUsdCurrency returns the value of the "local_coin_usd_currency" field in the mutation.
func (m *OrderMutation) LocalCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.local_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalCoinUsdCurrency returns the old "local_coin_usd_currency" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldLocalCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalCoinUsdCurrency: %w", err)
	}
	return oldValue.LocalCoinUsdCurrency, nil
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (m *OrderMutation) ClearLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	m.clearedFields[entorder.FieldLocalCoinUsdCurrency] = struct{}{}
}

// LocalCoinUsdCurrencyCleared returns if the "local_coin_usd_currency" field was cleared in this mutation.
func (m *OrderMutation) LocalCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[entorder.FieldLocalCoinUsdCurrency]
	return ok
}

// ResetLocalCoinUsdCurrency resets all changes to the "local_coin_usd_currency" field.
func (m *OrderMutation) ResetLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	delete(m.clearedFields, entorder.FieldLocalCoinUsdCurrency)
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (m *OrderMutation) SetLiveCoinUsdCurrency(d decimal.Decimal) {
	m.live_coin_usd_currency = &d
}

// LiveCoinUsdCurrency returns the value of the "live_coin_usd_currency" field in the mutation.
func (m *OrderMutation) LiveCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.live_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveCoinUsdCurrency returns the old "live_coin_usd_currency" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldLiveCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveCoinUsdCurrency: %w", err)
	}
	return oldValue.LiveCoinUsdCurrency, nil
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (m *OrderMutation) ClearLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	m.clearedFields[entorder.FieldLiveCoinUsdCurrency] = struct{}{}
}

// LiveCoinUsdCurrencyCleared returns if the "live_coin_usd_currency" field was cleared in this mutation.
func (m *OrderMutation) LiveCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[entorder.FieldLiveCoinUsdCurrency]
	return ok
}

// ResetLiveCoinUsdCurrency resets all changes to the "live_coin_usd_currency" field.
func (m *OrderMutation) ResetLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	delete(m.clearedFields, entorder.FieldLiveCoinUsdCurrency)
}

// SetSimulate sets the "simulate" field.
func (m *OrderMutation) SetSimulate(b bool) {
	m.simulate = &b
}

// Simulate returns the value of the "simulate" field in the mutation.
func (m *OrderMutation) Simulate() (r bool, exists bool) {
	v := m.simulate
	if v == nil {
		return
	}
	return *v, true
}

// OldSimulate returns the old "simulate" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldSimulate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimulate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimulate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimulate: %w", err)
	}
	return oldValue.Simulate, nil
}

// ClearSimulate clears the value of the "simulate" field.
func (m *OrderMutation) ClearSimulate() {
	m.simulate = nil
	m.clearedFields[entorder.FieldSimulate] = struct{}{}
}

// SimulateCleared returns if the "simulate" field was cleared in this mutation.
func (m *OrderMutation) SimulateCleared() bool {
	_, ok := m.clearedFields[entorder.FieldSimulate]
	return ok
}

// ResetSimulate resets all changes to the "simulate" field.
func (m *OrderMutation) ResetSimulate() {
	m.simulate = nil
	delete(m.clearedFields, entorder.FieldSimulate)
}

// SetCreateMethod sets the "create_method" field.
func (m *OrderMutation) SetCreateMethod(s string) {
	m.create_method = &s
}

// CreateMethod returns the value of the "create_method" field in the mutation.
func (m *OrderMutation) CreateMethod() (r string, exists bool) {
	v := m.create_method
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateMethod returns the old "create_method" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreateMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateMethod: %w", err)
	}
	return oldValue.CreateMethod, nil
}

// ClearCreateMethod clears the value of the "create_method" field.
func (m *OrderMutation) ClearCreateMethod() {
	m.create_method = nil
	m.clearedFields[entorder.FieldCreateMethod] = struct{}{}
}

// CreateMethodCleared returns if the "create_method" field was cleared in this mutation.
func (m *OrderMutation) CreateMethodCleared() bool {
	_, ok := m.clearedFields[entorder.FieldCreateMethod]
	return ok
}

// ResetCreateMethod resets all changes to the "create_method" field.
func (m *OrderMutation) ResetCreateMethod() {
	m.create_method = nil
	delete(m.clearedFields, entorder.FieldCreateMethod)
}

// SetMultiPaymentCoins sets the "multi_payment_coins" field.
func (m *OrderMutation) SetMultiPaymentCoins(b bool) {
	m.multi_payment_coins = &b
}

// MultiPaymentCoins returns the value of the "multi_payment_coins" field in the mutation.
func (m *OrderMutation) MultiPaymentCoins() (r bool, exists bool) {
	v := m.multi_payment_coins
	if v == nil {
		return
	}
	return *v, true
}

// OldMultiPaymentCoins returns the old "multi_payment_coins" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldMultiPaymentCoins(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMultiPaymentCoins is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMultiPaymentCoins requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMultiPaymentCoins: %w", err)
	}
	return oldValue.MultiPaymentCoins, nil
}

// ClearMultiPaymentCoins clears the value of the "multi_payment_coins" field.
func (m *OrderMutation) ClearMultiPaymentCoins() {
	m.multi_payment_coins = nil
	m.clearedFields[entorder.FieldMultiPaymentCoins] = struct{}{}
}

// MultiPaymentCoinsCleared returns if the "multi_payment_coins" field was cleared in this mutation.
func (m *OrderMutation) MultiPaymentCoinsCleared() bool {
	_, ok := m.clearedFields[entorder.FieldMultiPaymentCoins]
	return ok
}

// ResetMultiPaymentCoins resets all changes to the "multi_payment_coins" field.
func (m *OrderMutation) ResetMultiPaymentCoins() {
	m.multi_payment_coins = nil
	delete(m.clearedFields, entorder.FieldMultiPaymentCoins)
}

// SetPaymentAmounts sets the "payment_amounts" field.
func (m *OrderMutation) SetPaymentAmounts(oa []order.PaymentAmount) {
	m.payment_amounts = &oa
}

// PaymentAmounts returns the value of the "payment_amounts" field in the mutation.
func (m *OrderMutation) PaymentAmounts() (r []order.PaymentAmount, exists bool) {
	v := m.payment_amounts
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAmounts returns the old "payment_amounts" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentAmounts(ctx context.Context) (v []order.PaymentAmount, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAmounts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAmounts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAmounts: %w", err)
	}
	return oldValue.PaymentAmounts, nil
}

// ClearPaymentAmounts clears the value of the "payment_amounts" field.
func (m *OrderMutation) ClearPaymentAmounts() {
	m.payment_amounts = nil
	m.clearedFields[entorder.FieldPaymentAmounts] = struct{}{}
}

// PaymentAmountsCleared returns if the "payment_amounts" field was cleared in this mutation.
func (m *OrderMutation) PaymentAmountsCleared() bool {
	_, ok := m.clearedFields[entorder.FieldPaymentAmounts]
	return ok
}

// ResetPaymentAmounts resets all changes to the "payment_amounts" field.
func (m *OrderMutation) ResetPaymentAmounts() {
	m.payment_amounts = nil
	delete(m.clearedFields, entorder.FieldPaymentAmounts)
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 32)
	if m.created_at != nil {
		fields = append(fields, entorder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entorder.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, entorder.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, entorder.FieldEntID)
	}
	if m.app_id != nil {
		fields = append(fields, entorder.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, entorder.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, entorder.FieldGoodID)
	}
	if m.app_good_id != nil {
		fields = append(fields, entorder.FieldAppGoodID)
	}
	if m.payment_id != nil {
		fields = append(fields, entorder.FieldPaymentID)
	}
	if m.parent_order_id != nil {
		fields = append(fields, entorder.FieldParentOrderID)
	}
	if m.units_v1 != nil {
		fields = append(fields, entorder.FieldUnitsV1)
	}
	if m.good_value != nil {
		fields = append(fields, entorder.FieldGoodValue)
	}
	if m.good_value_usd != nil {
		fields = append(fields, entorder.FieldGoodValueUsd)
	}
	if m.payment_amount != nil {
		fields = append(fields, entorder.FieldPaymentAmount)
	}
	if m.discount_amount != nil {
		fields = append(fields, entorder.FieldDiscountAmount)
	}
	if m.promotion_id != nil {
		fields = append(fields, entorder.FieldPromotionID)
	}
	if m.duration != nil {
		fields = append(fields, entorder.FieldDuration)
	}
	if m.order_type != nil {
		fields = append(fields, entorder.FieldOrderType)
	}
	if m.investment_type != nil {
		fields = append(fields, entorder.FieldInvestmentType)
	}
	if m.coupon_ids != nil {
		fields = append(fields, entorder.FieldCouponIds)
	}
	if m.payment_type != nil {
		fields = append(fields, entorder.FieldPaymentType)
	}
	if m.coin_type_id != nil {
		fields = append(fields, entorder.FieldCoinTypeID)
	}
	if m.payment_coin_type_id != nil {
		fields = append(fields, entorder.FieldPaymentCoinTypeID)
	}
	if m.transfer_amount != nil {
		fields = append(fields, entorder.FieldTransferAmount)
	}
	if m.balance_amount != nil {
		fields = append(fields, entorder.FieldBalanceAmount)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, entorder.FieldCoinUsdCurrency)
	}
	if m.local_coin_usd_currency != nil {
		fields = append(fields, entorder.FieldLocalCoinUsdCurrency)
	}
	if m.live_coin_usd_currency != nil {
		fields = append(fields, entorder.FieldLiveCoinUsdCurrency)
	}
	if m.simulate != nil {
		fields = append(fields, entorder.FieldSimulate)
	}
	if m.create_method != nil {
		fields = append(fields, entorder.FieldCreateMethod)
	}
	if m.multi_payment_coins != nil {
		fields = append(fields, entorder.FieldMultiPaymentCoins)
	}
	if m.payment_amounts != nil {
		fields = append(fields, entorder.FieldPaymentAmounts)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entorder.FieldCreatedAt:
		return m.CreatedAt()
	case entorder.FieldUpdatedAt:
		return m.UpdatedAt()
	case entorder.FieldDeletedAt:
		return m.DeletedAt()
	case entorder.FieldEntID:
		return m.EntID()
	case entorder.FieldAppID:
		return m.AppID()
	case entorder.FieldUserID:
		return m.UserID()
	case entorder.FieldGoodID:
		return m.GoodID()
	case entorder.FieldAppGoodID:
		return m.AppGoodID()
	case entorder.FieldPaymentID:
		return m.PaymentID()
	case entorder.FieldParentOrderID:
		return m.ParentOrderID()
	case entorder.FieldUnitsV1:
		return m.UnitsV1()
	case entorder.FieldGoodValue:
		return m.GoodValue()
	case entorder.FieldGoodValueUsd:
		return m.GoodValueUsd()
	case entorder.FieldPaymentAmount:
		return m.PaymentAmount()
	case entorder.FieldDiscountAmount:
		return m.DiscountAmount()
	case entorder.FieldPromotionID:
		return m.PromotionID()
	case entorder.FieldDuration:
		return m.Duration()
	case entorder.FieldOrderType:
		return m.OrderType()
	case entorder.FieldInvestmentType:
		return m.InvestmentType()
	case entorder.FieldCouponIds:
		return m.CouponIds()
	case entorder.FieldPaymentType:
		return m.PaymentType()
	case entorder.FieldCoinTypeID:
		return m.CoinTypeID()
	case entorder.FieldPaymentCoinTypeID:
		return m.PaymentCoinTypeID()
	case entorder.FieldTransferAmount:
		return m.TransferAmount()
	case entorder.FieldBalanceAmount:
		return m.BalanceAmount()
	case entorder.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case entorder.FieldLocalCoinUsdCurrency:
		return m.LocalCoinUsdCurrency()
	case entorder.FieldLiveCoinUsdCurrency:
		return m.LiveCoinUsdCurrency()
	case entorder.FieldSimulate:
		return m.Simulate()
	case entorder.FieldCreateMethod:
		return m.CreateMethod()
	case entorder.FieldMultiPaymentCoins:
		return m.MultiPaymentCoins()
	case entorder.FieldPaymentAmounts:
		return m.PaymentAmounts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entorder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entorder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entorder.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case entorder.FieldEntID:
		return m.OldEntID(ctx)
	case entorder.FieldAppID:
		return m.OldAppID(ctx)
	case entorder.FieldUserID:
		return m.OldUserID(ctx)
	case entorder.FieldGoodID:
		return m.OldGoodID(ctx)
	case entorder.FieldAppGoodID:
		return m.OldAppGoodID(ctx)
	case entorder.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case entorder.FieldParentOrderID:
		return m.OldParentOrderID(ctx)
	case entorder.FieldUnitsV1:
		return m.OldUnitsV1(ctx)
	case entorder.FieldGoodValue:
		return m.OldGoodValue(ctx)
	case entorder.FieldGoodValueUsd:
		return m.OldGoodValueUsd(ctx)
	case entorder.FieldPaymentAmount:
		return m.OldPaymentAmount(ctx)
	case entorder.FieldDiscountAmount:
		return m.OldDiscountAmount(ctx)
	case entorder.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case entorder.FieldDuration:
		return m.OldDuration(ctx)
	case entorder.FieldOrderType:
		return m.OldOrderType(ctx)
	case entorder.FieldInvestmentType:
		return m.OldInvestmentType(ctx)
	case entorder.FieldCouponIds:
		return m.OldCouponIds(ctx)
	case entorder.FieldPaymentType:
		return m.OldPaymentType(ctx)
	case entorder.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case entorder.FieldPaymentCoinTypeID:
		return m.OldPaymentCoinTypeID(ctx)
	case entorder.FieldTransferAmount:
		return m.OldTransferAmount(ctx)
	case entorder.FieldBalanceAmount:
		return m.OldBalanceAmount(ctx)
	case entorder.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case entorder.FieldLocalCoinUsdCurrency:
		return m.OldLocalCoinUsdCurrency(ctx)
	case entorder.FieldLiveCoinUsdCurrency:
		return m.OldLiveCoinUsdCurrency(ctx)
	case entorder.FieldSimulate:
		return m.OldSimulate(ctx)
	case entorder.FieldCreateMethod:
		return m.OldCreateMethod(ctx)
	case entorder.FieldMultiPaymentCoins:
		return m.OldMultiPaymentCoins(ctx)
	case entorder.FieldPaymentAmounts:
		return m.OldPaymentAmounts(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entorder.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entorder.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entorder.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case entorder.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case entorder.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case entorder.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case entorder.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case entorder.FieldAppGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppGoodID(v)
		return nil
	case entorder.FieldPaymentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case entorder.FieldParentOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentOrderID(v)
		return nil
	case entorder.FieldUnitsV1:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitsV1(v)
		return nil
	case entorder.FieldGoodValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodValue(v)
		return nil
	case entorder.FieldGoodValueUsd:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodValueUsd(v)
		return nil
	case entorder.FieldPaymentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAmount(v)
		return nil
	case entorder.FieldDiscountAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountAmount(v)
		return nil
	case entorder.FieldPromotionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case entorder.FieldDuration:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case entorder.FieldOrderType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderType(v)
		return nil
	case entorder.FieldInvestmentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvestmentType(v)
		return nil
	case entorder.FieldCouponIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponIds(v)
		return nil
	case entorder.FieldPaymentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentType(v)
		return nil
	case entorder.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case entorder.FieldPaymentCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentCoinTypeID(v)
		return nil
	case entorder.FieldTransferAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferAmount(v)
		return nil
	case entorder.FieldBalanceAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceAmount(v)
		return nil
	case entorder.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case entorder.FieldLocalCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalCoinUsdCurrency(v)
		return nil
	case entorder.FieldLiveCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveCoinUsdCurrency(v)
		return nil
	case entorder.FieldSimulate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimulate(v)
		return nil
	case entorder.FieldCreateMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateMethod(v)
		return nil
	case entorder.FieldMultiPaymentCoins:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMultiPaymentCoins(v)
		return nil
	case entorder.FieldPaymentAmounts:
		v, ok := value.([]order.PaymentAmount)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAmounts(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, entorder.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, entorder.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, entorder.FieldDeletedAt)
	}
	if m.addduration != nil {
		fields = append(fields, entorder.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entorder.FieldCreatedAt:
		return m.AddedCreatedAt()
	case entorder.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case entorder.FieldDeletedAt:
		return m.AddedDeletedAt()
	case entorder.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entorder.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case entorder.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case entorder.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case entorder.FieldDuration:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entorder.FieldPaymentID) {
		fields = append(fields, entorder.FieldPaymentID)
	}
	if m.FieldCleared(entorder.FieldParentOrderID) {
		fields = append(fields, entorder.FieldParentOrderID)
	}
	if m.FieldCleared(entorder.FieldUnitsV1) {
		fields = append(fields, entorder.FieldUnitsV1)
	}
	if m.FieldCleared(entorder.FieldGoodValue) {
		fields = append(fields, entorder.FieldGoodValue)
	}
	if m.FieldCleared(entorder.FieldGoodValueUsd) {
		fields = append(fields, entorder.FieldGoodValueUsd)
	}
	if m.FieldCleared(entorder.FieldPaymentAmount) {
		fields = append(fields, entorder.FieldPaymentAmount)
	}
	if m.FieldCleared(entorder.FieldDiscountAmount) {
		fields = append(fields, entorder.FieldDiscountAmount)
	}
	if m.FieldCleared(entorder.FieldPromotionID) {
		fields = append(fields, entorder.FieldPromotionID)
	}
	if m.FieldCleared(entorder.FieldDuration) {
		fields = append(fields, entorder.FieldDuration)
	}
	if m.FieldCleared(entorder.FieldOrderType) {
		fields = append(fields, entorder.FieldOrderType)
	}
	if m.FieldCleared(entorder.FieldInvestmentType) {
		fields = append(fields, entorder.FieldInvestmentType)
	}
	if m.FieldCleared(entorder.FieldCouponIds) {
		fields = append(fields, entorder.FieldCouponIds)
	}
	if m.FieldCleared(entorder.FieldPaymentType) {
		fields = append(fields, entorder.FieldPaymentType)
	}
	if m.FieldCleared(entorder.FieldPaymentCoinTypeID) {
		fields = append(fields, entorder.FieldPaymentCoinTypeID)
	}
	if m.FieldCleared(entorder.FieldTransferAmount) {
		fields = append(fields, entorder.FieldTransferAmount)
	}
	if m.FieldCleared(entorder.FieldBalanceAmount) {
		fields = append(fields, entorder.FieldBalanceAmount)
	}
	if m.FieldCleared(entorder.FieldCoinUsdCurrency) {
		fields = append(fields, entorder.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(entorder.FieldLocalCoinUsdCurrency) {
		fields = append(fields, entorder.FieldLocalCoinUsdCurrency)
	}
	if m.FieldCleared(entorder.FieldLiveCoinUsdCurrency) {
		fields = append(fields, entorder.FieldLiveCoinUsdCurrency)
	}
	if m.FieldCleared(entorder.FieldSimulate) {
		fields = append(fields, entorder.FieldSimulate)
	}
	if m.FieldCleared(entorder.FieldCreateMethod) {
		fields = append(fields, entorder.FieldCreateMethod)
	}
	if m.FieldCleared(entorder.FieldMultiPaymentCoins) {
		fields = append(fields, entorder.FieldMultiPaymentCoins)
	}
	if m.FieldCleared(entorder.FieldPaymentAmounts) {
		fields = append(fields, entorder.FieldPaymentAmounts)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case entorder.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	case entorder.FieldParentOrderID:
		m.ClearParentOrderID()
		return nil
	case entorder.FieldUnitsV1:
		m.ClearUnitsV1()
		return nil
	case entorder.FieldGoodValue:
		m.ClearGoodValue()
		return nil
	case entorder.FieldGoodValueUsd:
		m.ClearGoodValueUsd()
		return nil
	case entorder.FieldPaymentAmount:
		m.ClearPaymentAmount()
		return nil
	case entorder.FieldDiscountAmount:
		m.ClearDiscountAmount()
		return nil
	case entorder.FieldPromotionID:
		m.ClearPromotionID()
		return nil
	case entorder.FieldDuration:
		m.ClearDuration()
		return nil
	case entorder.FieldOrderType:
		m.ClearOrderType()
		return nil
	case entorder.FieldInvestmentType:
		m.ClearInvestmentType()
		return nil
	case entorder.FieldCouponIds:
		m.ClearCouponIds()
		return nil
	case entorder.FieldPaymentType:
		m.ClearPaymentType()
		return nil
	case entorder.FieldPaymentCoinTypeID:
		m.ClearPaymentCoinTypeID()
		return nil
	case entorder.FieldTransferAmount:
		m.ClearTransferAmount()
		return nil
	case entorder.FieldBalanceAmount:
		m.ClearBalanceAmount()
		return nil
	case entorder.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case entorder.FieldLocalCoinUsdCurrency:
		m.ClearLocalCoinUsdCurrency()
		return nil
	case entorder.FieldLiveCoinUsdCurrency:
		m.ClearLiveCoinUsdCurrency()
		return nil
	case entorder.FieldSimulate:
		m.ClearSimulate()
		return nil
	case entorder.FieldCreateMethod:
		m.ClearCreateMethod()
		return nil
	case entorder.FieldMultiPaymentCoins:
		m.ClearMultiPaymentCoins()
		return nil
	case entorder.FieldPaymentAmounts:
		m.ClearPaymentAmounts()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case entorder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entorder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entorder.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case entorder.FieldEntID:
		m.ResetEntID()
		return nil
	case entorder.FieldAppID:
		m.ResetAppID()
		return nil
	case entorder.FieldUserID:
		m.ResetUserID()
		return nil
	case entorder.FieldGoodID:
		m.ResetGoodID()
		return nil
	case entorder.FieldAppGoodID:
		m.ResetAppGoodID()
		return nil
	case entorder.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case entorder.FieldParentOrderID:
		m.ResetParentOrderID()
		return nil
	case entorder.FieldUnitsV1:
		m.ResetUnitsV1()
		return nil
	case entorder.FieldGoodValue:
		m.ResetGoodValue()
		return nil
	case entorder.FieldGoodValueUsd:
		m.ResetGoodValueUsd()
		return nil
	case entorder.FieldPaymentAmount:
		m.ResetPaymentAmount()
		return nil
	case entorder.FieldDiscountAmount:
		m.ResetDiscountAmount()
		return nil
	case entorder.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case entorder.FieldDuration:
		m.ResetDuration()
		return nil
	case entorder.FieldOrderType:
		m.ResetOrderType()
		return nil
	case entorder.FieldInvestmentType:
		m.ResetInvestmentType()
		return nil
	case entorder.FieldCouponIds:
		m.ResetCouponIds()
		return nil
	case entorder.FieldPaymentType:
		m.ResetPaymentType()
		return nil
	case entorder.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case entorder.FieldPaymentCoinTypeID:
		m.ResetPaymentCoinTypeID()
		return nil
	case entorder.FieldTransferAmount:
		m.ResetTransferAmount()
		return nil
	case entorder.FieldBalanceAmount:
		m.ResetBalanceAmount()
		return nil
	case entorder.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case entorder.FieldLocalCoinUsdCurrency:
		m.ResetLocalCoinUsdCurrency()
		return nil
	case entorder.FieldLiveCoinUsdCurrency:
		m.ResetLiveCoinUsdCurrency()
		return nil
	case entorder.FieldSimulate:
		m.ResetSimulate()
		return nil
	case entorder.FieldCreateMethod:
		m.ResetCreateMethod()
		return nil
	case entorder.FieldMultiPaymentCoins:
		m.ResetMultiPaymentCoins()
		return nil
	case entorder.FieldPaymentAmounts:
		m.ResetPaymentAmounts()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// OrderBaseMutation represents an operation that mutates the OrderBase nodes in the graph.
type OrderBaseMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	ent_id          *uuid.UUID
	user_id         *uuid.UUID
	app_good_id     *uuid.UUID
	parent_order_id *uuid.UUID
	order_type      *string
	payment_type    *string
	create_method   *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*OrderBase, error)
	predicates      []predicate.OrderBase
}

var _ ent.Mutation = (*OrderBaseMutation)(nil)

// orderbaseOption allows management of the mutation configuration using functional options.
type orderbaseOption func(*OrderBaseMutation)

// newOrderBaseMutation creates new mutation for the OrderBase entity.
func newOrderBaseMutation(c config, op Op, opts ...orderbaseOption) *OrderBaseMutation {
	m := &OrderBaseMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderBaseID sets the ID field of the mutation.
func withOrderBaseID(id uint32) orderbaseOption {
	return func(m *OrderBaseMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderBase
		)
		m.oldValue = func(ctx context.Context) (*OrderBase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderBase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderBase sets the old OrderBase of the mutation.
func withOrderBase(node *OrderBase) orderbaseOption {
	return func(m *OrderBaseMutation) {
		m.oldValue = func(context.Context) (*OrderBase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderBaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderBaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderBase entities.
func (m *OrderBaseMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderBaseMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderBaseMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderBase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderBaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderBaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderBaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderBaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderBaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderBaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderBaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderBaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderBaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderBaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderBaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderBaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderBaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderBaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderBaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderBaseMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderBaseMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderBaseMutation) ResetEntID() {
	m.ent_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderBaseMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderBaseMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *OrderBaseMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[orderbase.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *OrderBaseMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderBaseMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, orderbase.FieldUserID)
}

// SetAppGoodID sets the "app_good_id" field.
func (m *OrderBaseMutation) SetAppGoodID(u uuid.UUID) {
	m.app_good_id = &u
}

// AppGoodID returns the value of the "app_good_id" field in the mutation.
func (m *OrderBaseMutation) AppGoodID() (r uuid.UUID, exists bool) {
	v := m.app_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppGoodID returns the old "app_good_id" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldAppGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppGoodID: %w", err)
	}
	return oldValue.AppGoodID, nil
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (m *OrderBaseMutation) ClearAppGoodID() {
	m.app_good_id = nil
	m.clearedFields[orderbase.FieldAppGoodID] = struct{}{}
}

// AppGoodIDCleared returns if the "app_good_id" field was cleared in this mutation.
func (m *OrderBaseMutation) AppGoodIDCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldAppGoodID]
	return ok
}

// ResetAppGoodID resets all changes to the "app_good_id" field.
func (m *OrderBaseMutation) ResetAppGoodID() {
	m.app_good_id = nil
	delete(m.clearedFields, orderbase.FieldAppGoodID)
}

// SetParentOrderID sets the "parent_order_id" field.
func (m *OrderBaseMutation) SetParentOrderID(u uuid.UUID) {
	m.parent_order_id = &u
}

// ParentOrderID returns the value of the "parent_order_id" field in the mutation.
func (m *OrderBaseMutation) ParentOrderID() (r uuid.UUID, exists bool) {
	v := m.parent_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentOrderID returns the old "parent_order_id" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldParentOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentOrderID: %w", err)
	}
	return oldValue.ParentOrderID, nil
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (m *OrderBaseMutation) ClearParentOrderID() {
	m.parent_order_id = nil
	m.clearedFields[orderbase.FieldParentOrderID] = struct{}{}
}

// ParentOrderIDCleared returns if the "parent_order_id" field was cleared in this mutation.
func (m *OrderBaseMutation) ParentOrderIDCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldParentOrderID]
	return ok
}

// ResetParentOrderID resets all changes to the "parent_order_id" field.
func (m *OrderBaseMutation) ResetParentOrderID() {
	m.parent_order_id = nil
	delete(m.clearedFields, orderbase.FieldParentOrderID)
}

// SetOrderType sets the "order_type" field.
func (m *OrderBaseMutation) SetOrderType(s string) {
	m.order_type = &s
}

// OrderType returns the value of the "order_type" field in the mutation.
func (m *OrderBaseMutation) OrderType() (r string, exists bool) {
	v := m.order_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderType returns the old "order_type" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldOrderType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderType: %w", err)
	}
	return oldValue.OrderType, nil
}

// ClearOrderType clears the value of the "order_type" field.
func (m *OrderBaseMutation) ClearOrderType() {
	m.order_type = nil
	m.clearedFields[orderbase.FieldOrderType] = struct{}{}
}

// OrderTypeCleared returns if the "order_type" field was cleared in this mutation.
func (m *OrderBaseMutation) OrderTypeCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldOrderType]
	return ok
}

// ResetOrderType resets all changes to the "order_type" field.
func (m *OrderBaseMutation) ResetOrderType() {
	m.order_type = nil
	delete(m.clearedFields, orderbase.FieldOrderType)
}

// SetPaymentType sets the "payment_type" field.
func (m *OrderBaseMutation) SetPaymentType(s string) {
	m.payment_type = &s
}

// PaymentType returns the value of the "payment_type" field in the mutation.
func (m *OrderBaseMutation) PaymentType() (r string, exists bool) {
	v := m.payment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentType returns the old "payment_type" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldPaymentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentType: %w", err)
	}
	return oldValue.PaymentType, nil
}

// ClearPaymentType clears the value of the "payment_type" field.
func (m *OrderBaseMutation) ClearPaymentType() {
	m.payment_type = nil
	m.clearedFields[orderbase.FieldPaymentType] = struct{}{}
}

// PaymentTypeCleared returns if the "payment_type" field was cleared in this mutation.
func (m *OrderBaseMutation) PaymentTypeCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldPaymentType]
	return ok
}

// ResetPaymentType resets all changes to the "payment_type" field.
func (m *OrderBaseMutation) ResetPaymentType() {
	m.payment_type = nil
	delete(m.clearedFields, orderbase.FieldPaymentType)
}

// SetCreateMethod sets the "create_method" field.
func (m *OrderBaseMutation) SetCreateMethod(s string) {
	m.create_method = &s
}

// CreateMethod returns the value of the "create_method" field in the mutation.
func (m *OrderBaseMutation) CreateMethod() (r string, exists bool) {
	v := m.create_method
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateMethod returns the old "create_method" field's value of the OrderBase entity.
// If the OrderBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderBaseMutation) OldCreateMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateMethod: %w", err)
	}
	return oldValue.CreateMethod, nil
}

// ClearCreateMethod clears the value of the "create_method" field.
func (m *OrderBaseMutation) ClearCreateMethod() {
	m.create_method = nil
	m.clearedFields[orderbase.FieldCreateMethod] = struct{}{}
}

// CreateMethodCleared returns if the "create_method" field was cleared in this mutation.
func (m *OrderBaseMutation) CreateMethodCleared() bool {
	_, ok := m.clearedFields[orderbase.FieldCreateMethod]
	return ok
}

// ResetCreateMethod resets all changes to the "create_method" field.
func (m *OrderBaseMutation) ResetCreateMethod() {
	m.create_method = nil
	delete(m.clearedFields, orderbase.FieldCreateMethod)
}

// Where appends a list predicates to the OrderBaseMutation builder.
func (m *OrderBaseMutation) Where(ps ...predicate.OrderBase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderBaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderBase).
func (m *OrderBaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderBaseMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, orderbase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderbase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderbase.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderbase.FieldEntID)
	}
	if m.user_id != nil {
		fields = append(fields, orderbase.FieldUserID)
	}
	if m.app_good_id != nil {
		fields = append(fields, orderbase.FieldAppGoodID)
	}
	if m.parent_order_id != nil {
		fields = append(fields, orderbase.FieldParentOrderID)
	}
	if m.order_type != nil {
		fields = append(fields, orderbase.FieldOrderType)
	}
	if m.payment_type != nil {
		fields = append(fields, orderbase.FieldPaymentType)
	}
	if m.create_method != nil {
		fields = append(fields, orderbase.FieldCreateMethod)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderBaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderbase.FieldCreatedAt:
		return m.CreatedAt()
	case orderbase.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderbase.FieldDeletedAt:
		return m.DeletedAt()
	case orderbase.FieldEntID:
		return m.EntID()
	case orderbase.FieldUserID:
		return m.UserID()
	case orderbase.FieldAppGoodID:
		return m.AppGoodID()
	case orderbase.FieldParentOrderID:
		return m.ParentOrderID()
	case orderbase.FieldOrderType:
		return m.OrderType()
	case orderbase.FieldPaymentType:
		return m.PaymentType()
	case orderbase.FieldCreateMethod:
		return m.CreateMethod()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderBaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderbase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderbase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderbase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderbase.FieldEntID:
		return m.OldEntID(ctx)
	case orderbase.FieldUserID:
		return m.OldUserID(ctx)
	case orderbase.FieldAppGoodID:
		return m.OldAppGoodID(ctx)
	case orderbase.FieldParentOrderID:
		return m.OldParentOrderID(ctx)
	case orderbase.FieldOrderType:
		return m.OldOrderType(ctx)
	case orderbase.FieldPaymentType:
		return m.OldPaymentType(ctx)
	case orderbase.FieldCreateMethod:
		return m.OldCreateMethod(ctx)
	}
	return nil, fmt.Errorf("unknown OrderBase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderBaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderbase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderbase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderbase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderbase.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderbase.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case orderbase.FieldAppGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppGoodID(v)
		return nil
	case orderbase.FieldParentOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentOrderID(v)
		return nil
	case orderbase.FieldOrderType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderType(v)
		return nil
	case orderbase.FieldPaymentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentType(v)
		return nil
	case orderbase.FieldCreateMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateMethod(v)
		return nil
	}
	return fmt.Errorf("unknown OrderBase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderBaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderbase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderbase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderbase.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderBaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderbase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderbase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderbase.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderBaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderbase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderbase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderbase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderBase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderBaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderbase.FieldUserID) {
		fields = append(fields, orderbase.FieldUserID)
	}
	if m.FieldCleared(orderbase.FieldAppGoodID) {
		fields = append(fields, orderbase.FieldAppGoodID)
	}
	if m.FieldCleared(orderbase.FieldParentOrderID) {
		fields = append(fields, orderbase.FieldParentOrderID)
	}
	if m.FieldCleared(orderbase.FieldOrderType) {
		fields = append(fields, orderbase.FieldOrderType)
	}
	if m.FieldCleared(orderbase.FieldPaymentType) {
		fields = append(fields, orderbase.FieldPaymentType)
	}
	if m.FieldCleared(orderbase.FieldCreateMethod) {
		fields = append(fields, orderbase.FieldCreateMethod)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderBaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderBaseMutation) ClearField(name string) error {
	switch name {
	case orderbase.FieldUserID:
		m.ClearUserID()
		return nil
	case orderbase.FieldAppGoodID:
		m.ClearAppGoodID()
		return nil
	case orderbase.FieldParentOrderID:
		m.ClearParentOrderID()
		return nil
	case orderbase.FieldOrderType:
		m.ClearOrderType()
		return nil
	case orderbase.FieldPaymentType:
		m.ClearPaymentType()
		return nil
	case orderbase.FieldCreateMethod:
		m.ClearCreateMethod()
		return nil
	}
	return fmt.Errorf("unknown OrderBase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderBaseMutation) ResetField(name string) error {
	switch name {
	case orderbase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderbase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderbase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderbase.FieldEntID:
		m.ResetEntID()
		return nil
	case orderbase.FieldUserID:
		m.ResetUserID()
		return nil
	case orderbase.FieldAppGoodID:
		m.ResetAppGoodID()
		return nil
	case orderbase.FieldParentOrderID:
		m.ResetParentOrderID()
		return nil
	case orderbase.FieldOrderType:
		m.ResetOrderType()
		return nil
	case orderbase.FieldPaymentType:
		m.ResetPaymentType()
		return nil
	case orderbase.FieldCreateMethod:
		m.ResetCreateMethod()
		return nil
	}
	return fmt.Errorf("unknown OrderBase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderBaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderBaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderBaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderBaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderBaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderBaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderBaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderBase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderBaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderBase edge %s", name)
}

// OrderCouponMutation represents an operation that mutates the OrderCoupon nodes in the graph.
type OrderCouponMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	ent_id        *uuid.UUID
	order_id      *uuid.UUID
	coupon_id     *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OrderCoupon, error)
	predicates    []predicate.OrderCoupon
}

var _ ent.Mutation = (*OrderCouponMutation)(nil)

// ordercouponOption allows management of the mutation configuration using functional options.
type ordercouponOption func(*OrderCouponMutation)

// newOrderCouponMutation creates new mutation for the OrderCoupon entity.
func newOrderCouponMutation(c config, op Op, opts ...ordercouponOption) *OrderCouponMutation {
	m := &OrderCouponMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderCoupon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderCouponID sets the ID field of the mutation.
func withOrderCouponID(id uint32) ordercouponOption {
	return func(m *OrderCouponMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderCoupon
		)
		m.oldValue = func(ctx context.Context) (*OrderCoupon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderCoupon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderCoupon sets the old OrderCoupon of the mutation.
func withOrderCoupon(node *OrderCoupon) ordercouponOption {
	return func(m *OrderCouponMutation) {
		m.oldValue = func(context.Context) (*OrderCoupon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderCouponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderCouponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderCoupon entities.
func (m *OrderCouponMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderCouponMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderCouponMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderCoupon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderCouponMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderCouponMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderCouponMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderCouponMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderCouponMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderCouponMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderCouponMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderCouponMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderCouponMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderCouponMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderCouponMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderCouponMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderCouponMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderCouponMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderCouponMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderCouponMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderCouponMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderCouponMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderCouponMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderCouponMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderCouponMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[ordercoupon.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderCouponMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[ordercoupon.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderCouponMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, ordercoupon.FieldOrderID)
}

// SetCouponID sets the "coupon_id" field.
func (m *OrderCouponMutation) SetCouponID(u uuid.UUID) {
	m.coupon_id = &u
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *OrderCouponMutation) CouponID() (r uuid.UUID, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the OrderCoupon entity.
// If the OrderCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderCouponMutation) OldCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// ClearCouponID clears the value of the "coupon_id" field.
func (m *OrderCouponMutation) ClearCouponID() {
	m.coupon_id = nil
	m.clearedFields[ordercoupon.FieldCouponID] = struct{}{}
}

// CouponIDCleared returns if the "coupon_id" field was cleared in this mutation.
func (m *OrderCouponMutation) CouponIDCleared() bool {
	_, ok := m.clearedFields[ordercoupon.FieldCouponID]
	return ok
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *OrderCouponMutation) ResetCouponID() {
	m.coupon_id = nil
	delete(m.clearedFields, ordercoupon.FieldCouponID)
}

// Where appends a list predicates to the OrderCouponMutation builder.
func (m *OrderCouponMutation) Where(ps ...predicate.OrderCoupon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderCouponMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderCoupon).
func (m *OrderCouponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderCouponMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, ordercoupon.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ordercoupon.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, ordercoupon.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, ordercoupon.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, ordercoupon.FieldOrderID)
	}
	if m.coupon_id != nil {
		fields = append(fields, ordercoupon.FieldCouponID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderCouponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ordercoupon.FieldCreatedAt:
		return m.CreatedAt()
	case ordercoupon.FieldUpdatedAt:
		return m.UpdatedAt()
	case ordercoupon.FieldDeletedAt:
		return m.DeletedAt()
	case ordercoupon.FieldEntID:
		return m.EntID()
	case ordercoupon.FieldOrderID:
		return m.OrderID()
	case ordercoupon.FieldCouponID:
		return m.CouponID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderCouponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ordercoupon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ordercoupon.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ordercoupon.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case ordercoupon.FieldEntID:
		return m.OldEntID(ctx)
	case ordercoupon.FieldOrderID:
		return m.OldOrderID(ctx)
	case ordercoupon.FieldCouponID:
		return m.OldCouponID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderCoupon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderCouponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ordercoupon.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ordercoupon.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ordercoupon.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case ordercoupon.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case ordercoupon.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case ordercoupon.FieldCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderCoupon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderCouponMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, ordercoupon.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, ordercoupon.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, ordercoupon.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderCouponMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ordercoupon.FieldCreatedAt:
		return m.AddedCreatedAt()
	case ordercoupon.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case ordercoupon.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderCouponMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ordercoupon.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case ordercoupon.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case ordercoupon.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderCoupon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderCouponMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ordercoupon.FieldOrderID) {
		fields = append(fields, ordercoupon.FieldOrderID)
	}
	if m.FieldCleared(ordercoupon.FieldCouponID) {
		fields = append(fields, ordercoupon.FieldCouponID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderCouponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderCouponMutation) ClearField(name string) error {
	switch name {
	case ordercoupon.FieldOrderID:
		m.ClearOrderID()
		return nil
	case ordercoupon.FieldCouponID:
		m.ClearCouponID()
		return nil
	}
	return fmt.Errorf("unknown OrderCoupon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderCouponMutation) ResetField(name string) error {
	switch name {
	case ordercoupon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ordercoupon.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ordercoupon.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case ordercoupon.FieldEntID:
		m.ResetEntID()
		return nil
	case ordercoupon.FieldOrderID:
		m.ResetOrderID()
		return nil
	case ordercoupon.FieldCouponID:
		m.ResetCouponID()
		return nil
	}
	return fmt.Errorf("unknown OrderCoupon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderCouponMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderCouponMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderCouponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderCouponMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderCouponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderCouponMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderCouponMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderCoupon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderCouponMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderCoupon edge %s", name)
}

// OrderLockMutation represents an operation that mutates the OrderLock nodes in the graph.
type OrderLockMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	ent_id        *uuid.UUID
	order_id      *uuid.UUID
	lock_type     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OrderLock, error)
	predicates    []predicate.OrderLock
}

var _ ent.Mutation = (*OrderLockMutation)(nil)

// orderlockOption allows management of the mutation configuration using functional options.
type orderlockOption func(*OrderLockMutation)

// newOrderLockMutation creates new mutation for the OrderLock entity.
func newOrderLockMutation(c config, op Op, opts ...orderlockOption) *OrderLockMutation {
	m := &OrderLockMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderLock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderLockID sets the ID field of the mutation.
func withOrderLockID(id uint32) orderlockOption {
	return func(m *OrderLockMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderLock
		)
		m.oldValue = func(ctx context.Context) (*OrderLock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderLock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderLock sets the old OrderLock of the mutation.
func withOrderLock(node *OrderLock) orderlockOption {
	return func(m *OrderLockMutation) {
		m.oldValue = func(context.Context) (*OrderLock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderLockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderLockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderLock entities.
func (m *OrderLockMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderLockMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderLockMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderLock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderLockMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderLockMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderLockMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderLockMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderLockMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderLockMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderLockMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderLockMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderLockMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderLockMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderLockMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderLockMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderLockMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderLockMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderLockMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderLockMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderLockMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderLockMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderLockMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderLockMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderLockMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[orderlock.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderLockMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[orderlock.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderLockMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, orderlock.FieldOrderID)
}

// SetLockType sets the "lock_type" field.
func (m *OrderLockMutation) SetLockType(s string) {
	m.lock_type = &s
}

// LockType returns the value of the "lock_type" field in the mutation.
func (m *OrderLockMutation) LockType() (r string, exists bool) {
	v := m.lock_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLockType returns the old "lock_type" field's value of the OrderLock entity.
// If the OrderLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLockMutation) OldLockType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLockType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLockType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLockType: %w", err)
	}
	return oldValue.LockType, nil
}

// ClearLockType clears the value of the "lock_type" field.
func (m *OrderLockMutation) ClearLockType() {
	m.lock_type = nil
	m.clearedFields[orderlock.FieldLockType] = struct{}{}
}

// LockTypeCleared returns if the "lock_type" field was cleared in this mutation.
func (m *OrderLockMutation) LockTypeCleared() bool {
	_, ok := m.clearedFields[orderlock.FieldLockType]
	return ok
}

// ResetLockType resets all changes to the "lock_type" field.
func (m *OrderLockMutation) ResetLockType() {
	m.lock_type = nil
	delete(m.clearedFields, orderlock.FieldLockType)
}

// Where appends a list predicates to the OrderLockMutation builder.
func (m *OrderLockMutation) Where(ps ...predicate.OrderLock) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderLockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderLock).
func (m *OrderLockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderLockMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, orderlock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderlock.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderlock.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderlock.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderlock.FieldOrderID)
	}
	if m.lock_type != nil {
		fields = append(fields, orderlock.FieldLockType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderLockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderlock.FieldCreatedAt:
		return m.CreatedAt()
	case orderlock.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderlock.FieldDeletedAt:
		return m.DeletedAt()
	case orderlock.FieldEntID:
		return m.EntID()
	case orderlock.FieldOrderID:
		return m.OrderID()
	case orderlock.FieldLockType:
		return m.LockType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderLockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderlock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderlock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderlock.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderlock.FieldEntID:
		return m.OldEntID(ctx)
	case orderlock.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderlock.FieldLockType:
		return m.OldLockType(ctx)
	}
	return nil, fmt.Errorf("unknown OrderLock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderLockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderlock.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderlock.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderlock.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderlock.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderlock.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderlock.FieldLockType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLockType(v)
		return nil
	}
	return fmt.Errorf("unknown OrderLock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderLockMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderlock.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderlock.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderlock.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderLockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderlock.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderlock.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderlock.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderLockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderlock.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderlock.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderlock.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderLock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderLockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderlock.FieldOrderID) {
		fields = append(fields, orderlock.FieldOrderID)
	}
	if m.FieldCleared(orderlock.FieldLockType) {
		fields = append(fields, orderlock.FieldLockType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderLockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderLockMutation) ClearField(name string) error {
	switch name {
	case orderlock.FieldOrderID:
		m.ClearOrderID()
		return nil
	case orderlock.FieldLockType:
		m.ClearLockType()
		return nil
	}
	return fmt.Errorf("unknown OrderLock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderLockMutation) ResetField(name string) error {
	switch name {
	case orderlock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderlock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderlock.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderlock.FieldEntID:
		m.ResetEntID()
		return nil
	case orderlock.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderlock.FieldLockType:
		m.ResetLockType()
		return nil
	}
	return fmt.Errorf("unknown OrderLock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderLockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderLockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderLockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderLockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderLockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderLockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderLockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderLock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderLockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderLock edge %s", name)
}

// OrderPaymentBalanceMutation represents an operation that mutates the OrderPaymentBalance nodes in the graph.
type OrderPaymentBalanceMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uint32
	created_at              *uint32
	addcreated_at           *int32
	updated_at              *uint32
	addupdated_at           *int32
	deleted_at              *uint32
	adddeleted_at           *int32
	ent_id                  *uuid.UUID
	order_id                *uuid.UUID
	coin_type_id            *uuid.UUID
	amount                  *decimal.Decimal
	coin_usd_currency       *decimal.Decimal
	local_coin_usd_currency *decimal.Decimal
	live_coin_usd_currency  *decimal.Decimal
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*OrderPaymentBalance, error)
	predicates              []predicate.OrderPaymentBalance
}

var _ ent.Mutation = (*OrderPaymentBalanceMutation)(nil)

// orderpaymentbalanceOption allows management of the mutation configuration using functional options.
type orderpaymentbalanceOption func(*OrderPaymentBalanceMutation)

// newOrderPaymentBalanceMutation creates new mutation for the OrderPaymentBalance entity.
func newOrderPaymentBalanceMutation(c config, op Op, opts ...orderpaymentbalanceOption) *OrderPaymentBalanceMutation {
	m := &OrderPaymentBalanceMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderPaymentBalance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderPaymentBalanceID sets the ID field of the mutation.
func withOrderPaymentBalanceID(id uint32) orderpaymentbalanceOption {
	return func(m *OrderPaymentBalanceMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderPaymentBalance
		)
		m.oldValue = func(ctx context.Context) (*OrderPaymentBalance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderPaymentBalance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderPaymentBalance sets the old OrderPaymentBalance of the mutation.
func withOrderPaymentBalance(node *OrderPaymentBalance) orderpaymentbalanceOption {
	return func(m *OrderPaymentBalanceMutation) {
		m.oldValue = func(context.Context) (*OrderPaymentBalance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderPaymentBalanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderPaymentBalanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderPaymentBalance entities.
func (m *OrderPaymentBalanceMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderPaymentBalanceMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderPaymentBalanceMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderPaymentBalance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderPaymentBalanceMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderPaymentBalanceMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderPaymentBalanceMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderPaymentBalanceMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderPaymentBalanceMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderPaymentBalanceMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderPaymentBalanceMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderPaymentBalanceMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderPaymentBalanceMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderPaymentBalanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderPaymentBalanceMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderPaymentBalanceMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderPaymentBalanceMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderPaymentBalanceMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderPaymentBalanceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderPaymentBalanceMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderPaymentBalanceMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderPaymentBalanceMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderPaymentBalanceMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderPaymentBalanceMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderPaymentBalanceMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[orderpaymentbalance.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderPaymentBalanceMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, orderpaymentbalance.FieldOrderID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *OrderPaymentBalanceMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *OrderPaymentBalanceMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *OrderPaymentBalanceMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[orderpaymentbalance.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *OrderPaymentBalanceMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, orderpaymentbalance.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *OrderPaymentBalanceMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *OrderPaymentBalanceMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *OrderPaymentBalanceMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[orderpaymentbalance.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) AmountCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *OrderPaymentBalanceMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, orderpaymentbalance.FieldAmount)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *OrderPaymentBalanceMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.clearedFields[orderpaymentbalance.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	delete(m.clearedFields, orderpaymentbalance.FieldCoinUsdCurrency)
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) SetLocalCoinUsdCurrency(d decimal.Decimal) {
	m.local_coin_usd_currency = &d
}

// LocalCoinUsdCurrency returns the value of the "local_coin_usd_currency" field in the mutation.
func (m *OrderPaymentBalanceMutation) LocalCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.local_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalCoinUsdCurrency returns the old "local_coin_usd_currency" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldLocalCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalCoinUsdCurrency: %w", err)
	}
	return oldValue.LocalCoinUsdCurrency, nil
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ClearLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	m.clearedFields[orderpaymentbalance.FieldLocalCoinUsdCurrency] = struct{}{}
}

// LocalCoinUsdCurrencyCleared returns if the "local_coin_usd_currency" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) LocalCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldLocalCoinUsdCurrency]
	return ok
}

// ResetLocalCoinUsdCurrency resets all changes to the "local_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ResetLocalCoinUsdCurrency() {
	m.local_coin_usd_currency = nil
	delete(m.clearedFields, orderpaymentbalance.FieldLocalCoinUsdCurrency)
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) SetLiveCoinUsdCurrency(d decimal.Decimal) {
	m.live_coin_usd_currency = &d
}

// LiveCoinUsdCurrency returns the value of the "live_coin_usd_currency" field in the mutation.
func (m *OrderPaymentBalanceMutation) LiveCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.live_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveCoinUsdCurrency returns the old "live_coin_usd_currency" field's value of the OrderPaymentBalance entity.
// If the OrderPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentBalanceMutation) OldLiveCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveCoinUsdCurrency: %w", err)
	}
	return oldValue.LiveCoinUsdCurrency, nil
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ClearLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	m.clearedFields[orderpaymentbalance.FieldLiveCoinUsdCurrency] = struct{}{}
}

// LiveCoinUsdCurrencyCleared returns if the "live_coin_usd_currency" field was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) LiveCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[orderpaymentbalance.FieldLiveCoinUsdCurrency]
	return ok
}

// ResetLiveCoinUsdCurrency resets all changes to the "live_coin_usd_currency" field.
func (m *OrderPaymentBalanceMutation) ResetLiveCoinUsdCurrency() {
	m.live_coin_usd_currency = nil
	delete(m.clearedFields, orderpaymentbalance.FieldLiveCoinUsdCurrency)
}

// Where appends a list predicates to the OrderPaymentBalanceMutation builder.
func (m *OrderPaymentBalanceMutation) Where(ps ...predicate.OrderPaymentBalance) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderPaymentBalanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderPaymentBalance).
func (m *OrderPaymentBalanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderPaymentBalanceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, orderpaymentbalance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderpaymentbalance.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderpaymentbalance.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderpaymentbalance.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderpaymentbalance.FieldOrderID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, orderpaymentbalance.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, orderpaymentbalance.FieldAmount)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, orderpaymentbalance.FieldCoinUsdCurrency)
	}
	if m.local_coin_usd_currency != nil {
		fields = append(fields, orderpaymentbalance.FieldLocalCoinUsdCurrency)
	}
	if m.live_coin_usd_currency != nil {
		fields = append(fields, orderpaymentbalance.FieldLiveCoinUsdCurrency)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderPaymentBalanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		return m.CreatedAt()
	case orderpaymentbalance.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderpaymentbalance.FieldDeletedAt:
		return m.DeletedAt()
	case orderpaymentbalance.FieldEntID:
		return m.EntID()
	case orderpaymentbalance.FieldOrderID:
		return m.OrderID()
	case orderpaymentbalance.FieldCoinTypeID:
		return m.CoinTypeID()
	case orderpaymentbalance.FieldAmount:
		return m.Amount()
	case orderpaymentbalance.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case orderpaymentbalance.FieldLocalCoinUsdCurrency:
		return m.LocalCoinUsdCurrency()
	case orderpaymentbalance.FieldLiveCoinUsdCurrency:
		return m.LiveCoinUsdCurrency()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderPaymentBalanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderpaymentbalance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderpaymentbalance.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderpaymentbalance.FieldEntID:
		return m.OldEntID(ctx)
	case orderpaymentbalance.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderpaymentbalance.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case orderpaymentbalance.FieldAmount:
		return m.OldAmount(ctx)
	case orderpaymentbalance.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case orderpaymentbalance.FieldLocalCoinUsdCurrency:
		return m.OldLocalCoinUsdCurrency(ctx)
	case orderpaymentbalance.FieldLiveCoinUsdCurrency:
		return m.OldLiveCoinUsdCurrency(ctx)
	}
	return nil, fmt.Errorf("unknown OrderPaymentBalance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentBalanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderpaymentbalance.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderpaymentbalance.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderpaymentbalance.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderpaymentbalance.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderpaymentbalance.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case orderpaymentbalance.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case orderpaymentbalance.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case orderpaymentbalance.FieldLocalCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalCoinUsdCurrency(v)
		return nil
	case orderpaymentbalance.FieldLiveCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveCoinUsdCurrency(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentBalance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderPaymentBalanceMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderpaymentbalance.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderpaymentbalance.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderpaymentbalance.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderPaymentBalanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderpaymentbalance.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderpaymentbalance.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentBalanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderpaymentbalance.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderpaymentbalance.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentBalance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderPaymentBalanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderpaymentbalance.FieldOrderID) {
		fields = append(fields, orderpaymentbalance.FieldOrderID)
	}
	if m.FieldCleared(orderpaymentbalance.FieldCoinTypeID) {
		fields = append(fields, orderpaymentbalance.FieldCoinTypeID)
	}
	if m.FieldCleared(orderpaymentbalance.FieldAmount) {
		fields = append(fields, orderpaymentbalance.FieldAmount)
	}
	if m.FieldCleared(orderpaymentbalance.FieldCoinUsdCurrency) {
		fields = append(fields, orderpaymentbalance.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(orderpaymentbalance.FieldLocalCoinUsdCurrency) {
		fields = append(fields, orderpaymentbalance.FieldLocalCoinUsdCurrency)
	}
	if m.FieldCleared(orderpaymentbalance.FieldLiveCoinUsdCurrency) {
		fields = append(fields, orderpaymentbalance.FieldLiveCoinUsdCurrency)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderPaymentBalanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderPaymentBalanceMutation) ClearField(name string) error {
	switch name {
	case orderpaymentbalance.FieldOrderID:
		m.ClearOrderID()
		return nil
	case orderpaymentbalance.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case orderpaymentbalance.FieldAmount:
		m.ClearAmount()
		return nil
	case orderpaymentbalance.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case orderpaymentbalance.FieldLocalCoinUsdCurrency:
		m.ClearLocalCoinUsdCurrency()
		return nil
	case orderpaymentbalance.FieldLiveCoinUsdCurrency:
		m.ClearLiveCoinUsdCurrency()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentBalance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderPaymentBalanceMutation) ResetField(name string) error {
	switch name {
	case orderpaymentbalance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderpaymentbalance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderpaymentbalance.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderpaymentbalance.FieldEntID:
		m.ResetEntID()
		return nil
	case orderpaymentbalance.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderpaymentbalance.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case orderpaymentbalance.FieldAmount:
		m.ResetAmount()
		return nil
	case orderpaymentbalance.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case orderpaymentbalance.FieldLocalCoinUsdCurrency:
		m.ResetLocalCoinUsdCurrency()
		return nil
	case orderpaymentbalance.FieldLiveCoinUsdCurrency:
		m.ResetLiveCoinUsdCurrency()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentBalance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderPaymentBalanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderPaymentBalanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderPaymentBalanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderPaymentBalanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderPaymentBalanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderPaymentBalanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderPaymentBalanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentBalance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderPaymentBalanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentBalance edge %s", name)
}

// OrderPaymentContractMutation represents an operation that mutates the OrderPaymentContract nodes in the graph.
type OrderPaymentContractMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	ent_id        *uuid.UUID
	order_id      *uuid.UUID
	coin_type_id  *uuid.UUID
	amount        *decimal.Decimal
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OrderPaymentContract, error)
	predicates    []predicate.OrderPaymentContract
}

var _ ent.Mutation = (*OrderPaymentContractMutation)(nil)

// orderpaymentcontractOption allows management of the mutation configuration using functional options.
type orderpaymentcontractOption func(*OrderPaymentContractMutation)

// newOrderPaymentContractMutation creates new mutation for the OrderPaymentContract entity.
func newOrderPaymentContractMutation(c config, op Op, opts ...orderpaymentcontractOption) *OrderPaymentContractMutation {
	m := &OrderPaymentContractMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderPaymentContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderPaymentContractID sets the ID field of the mutation.
func withOrderPaymentContractID(id uint32) orderpaymentcontractOption {
	return func(m *OrderPaymentContractMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderPaymentContract
		)
		m.oldValue = func(ctx context.Context) (*OrderPaymentContract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderPaymentContract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderPaymentContract sets the old OrderPaymentContract of the mutation.
func withOrderPaymentContract(node *OrderPaymentContract) orderpaymentcontractOption {
	return func(m *OrderPaymentContractMutation) {
		m.oldValue = func(context.Context) (*OrderPaymentContract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderPaymentContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderPaymentContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderPaymentContract entities.
func (m *OrderPaymentContractMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderPaymentContractMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderPaymentContractMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderPaymentContract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderPaymentContractMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderPaymentContractMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderPaymentContractMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderPaymentContractMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderPaymentContractMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderPaymentContractMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderPaymentContractMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderPaymentContractMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderPaymentContractMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderPaymentContractMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderPaymentContractMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderPaymentContractMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderPaymentContractMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderPaymentContractMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderPaymentContractMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderPaymentContractMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderPaymentContractMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderPaymentContractMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderPaymentContractMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderPaymentContractMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderPaymentContractMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[orderpaymentcontract.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderPaymentContractMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[orderpaymentcontract.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderPaymentContractMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, orderpaymentcontract.FieldOrderID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *OrderPaymentContractMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *OrderPaymentContractMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *OrderPaymentContractMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[orderpaymentcontract.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *OrderPaymentContractMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[orderpaymentcontract.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *OrderPaymentContractMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, orderpaymentcontract.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *OrderPaymentContractMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *OrderPaymentContractMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the OrderPaymentContract entity.
// If the OrderPaymentContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentContractMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *OrderPaymentContractMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[orderpaymentcontract.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *OrderPaymentContractMutation) AmountCleared() bool {
	_, ok := m.clearedFields[orderpaymentcontract.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *OrderPaymentContractMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, orderpaymentcontract.FieldAmount)
}

// Where appends a list predicates to the OrderPaymentContractMutation builder.
func (m *OrderPaymentContractMutation) Where(ps ...predicate.OrderPaymentContract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderPaymentContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderPaymentContract).
func (m *OrderPaymentContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderPaymentContractMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, orderpaymentcontract.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderpaymentcontract.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderpaymentcontract.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderpaymentcontract.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderpaymentcontract.FieldOrderID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, orderpaymentcontract.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, orderpaymentcontract.FieldAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderPaymentContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		return m.CreatedAt()
	case orderpaymentcontract.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderpaymentcontract.FieldDeletedAt:
		return m.DeletedAt()
	case orderpaymentcontract.FieldEntID:
		return m.EntID()
	case orderpaymentcontract.FieldOrderID:
		return m.OrderID()
	case orderpaymentcontract.FieldCoinTypeID:
		return m.CoinTypeID()
	case orderpaymentcontract.FieldAmount:
		return m.Amount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderPaymentContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderpaymentcontract.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderpaymentcontract.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderpaymentcontract.FieldEntID:
		return m.OldEntID(ctx)
	case orderpaymentcontract.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderpaymentcontract.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case orderpaymentcontract.FieldAmount:
		return m.OldAmount(ctx)
	}
	return nil, fmt.Errorf("unknown OrderPaymentContract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderpaymentcontract.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderpaymentcontract.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderpaymentcontract.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderpaymentcontract.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderpaymentcontract.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case orderpaymentcontract.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentContract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderPaymentContractMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderpaymentcontract.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderpaymentcontract.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderpaymentcontract.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderPaymentContractMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderpaymentcontract.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderpaymentcontract.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderpaymentcontract.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderpaymentcontract.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentContract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderPaymentContractMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderpaymentcontract.FieldOrderID) {
		fields = append(fields, orderpaymentcontract.FieldOrderID)
	}
	if m.FieldCleared(orderpaymentcontract.FieldCoinTypeID) {
		fields = append(fields, orderpaymentcontract.FieldCoinTypeID)
	}
	if m.FieldCleared(orderpaymentcontract.FieldAmount) {
		fields = append(fields, orderpaymentcontract.FieldAmount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderPaymentContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderPaymentContractMutation) ClearField(name string) error {
	switch name {
	case orderpaymentcontract.FieldOrderID:
		m.ClearOrderID()
		return nil
	case orderpaymentcontract.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case orderpaymentcontract.FieldAmount:
		m.ClearAmount()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentContract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderPaymentContractMutation) ResetField(name string) error {
	switch name {
	case orderpaymentcontract.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderpaymentcontract.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderpaymentcontract.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderpaymentcontract.FieldEntID:
		m.ResetEntID()
		return nil
	case orderpaymentcontract.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderpaymentcontract.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case orderpaymentcontract.FieldAmount:
		m.ResetAmount()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentContract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderPaymentContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderPaymentContractMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderPaymentContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderPaymentContractMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderPaymentContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderPaymentContractMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderPaymentContractMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentContract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderPaymentContractMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentContract edge %s", name)
}

// OrderPaymentTransferMutation represents an operation that mutates the OrderPaymentTransfer nodes in the graph.
type OrderPaymentTransferMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint32
	created_at             *uint32
	addcreated_at          *int32
	updated_at             *uint32
	addupdated_at          *int32
	deleted_at             *uint32
	adddeleted_at          *int32
	ent_id                 *uuid.UUID
	order_id               *uuid.UUID
	coin_type_id           *uuid.UUID
	start_amount           *decimal.Decimal
	payment_transaction_id *string
	payment_finish_amount  *decimal.Decimal
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*OrderPaymentTransfer, error)
	predicates             []predicate.OrderPaymentTransfer
}

var _ ent.Mutation = (*OrderPaymentTransferMutation)(nil)

// orderpaymenttransferOption allows management of the mutation configuration using functional options.
type orderpaymenttransferOption func(*OrderPaymentTransferMutation)

// newOrderPaymentTransferMutation creates new mutation for the OrderPaymentTransfer entity.
func newOrderPaymentTransferMutation(c config, op Op, opts ...orderpaymenttransferOption) *OrderPaymentTransferMutation {
	m := &OrderPaymentTransferMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderPaymentTransfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderPaymentTransferID sets the ID field of the mutation.
func withOrderPaymentTransferID(id uint32) orderpaymenttransferOption {
	return func(m *OrderPaymentTransferMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderPaymentTransfer
		)
		m.oldValue = func(ctx context.Context) (*OrderPaymentTransfer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderPaymentTransfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderPaymentTransfer sets the old OrderPaymentTransfer of the mutation.
func withOrderPaymentTransfer(node *OrderPaymentTransfer) orderpaymenttransferOption {
	return func(m *OrderPaymentTransferMutation) {
		m.oldValue = func(context.Context) (*OrderPaymentTransfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderPaymentTransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderPaymentTransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderPaymentTransfer entities.
func (m *OrderPaymentTransferMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderPaymentTransferMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderPaymentTransferMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderPaymentTransfer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderPaymentTransferMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderPaymentTransferMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderPaymentTransferMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderPaymentTransferMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderPaymentTransferMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderPaymentTransferMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderPaymentTransferMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderPaymentTransferMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderPaymentTransferMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderPaymentTransferMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderPaymentTransferMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderPaymentTransferMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderPaymentTransferMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderPaymentTransferMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderPaymentTransferMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderPaymentTransferMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderPaymentTransferMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderPaymentTransferMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderPaymentTransferMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderPaymentTransferMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderPaymentTransferMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[orderpaymenttransfer.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderPaymentTransferMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[orderpaymenttransfer.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderPaymentTransferMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, orderpaymenttransfer.FieldOrderID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *OrderPaymentTransferMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *OrderPaymentTransferMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *OrderPaymentTransferMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[orderpaymenttransfer.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *OrderPaymentTransferMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[orderpaymenttransfer.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *OrderPaymentTransferMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, orderpaymenttransfer.FieldCoinTypeID)
}

// SetStartAmount sets the "start_amount" field.
func (m *OrderPaymentTransferMutation) SetStartAmount(d decimal.Decimal) {
	m.start_amount = &d
}

// StartAmount returns the value of the "start_amount" field in the mutation.
func (m *OrderPaymentTransferMutation) StartAmount() (r decimal.Decimal, exists bool) {
	v := m.start_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAmount returns the old "start_amount" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldStartAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAmount: %w", err)
	}
	return oldValue.StartAmount, nil
}

// ClearStartAmount clears the value of the "start_amount" field.
func (m *OrderPaymentTransferMutation) ClearStartAmount() {
	m.start_amount = nil
	m.clearedFields[orderpaymenttransfer.FieldStartAmount] = struct{}{}
}

// StartAmountCleared returns if the "start_amount" field was cleared in this mutation.
func (m *OrderPaymentTransferMutation) StartAmountCleared() bool {
	_, ok := m.clearedFields[orderpaymenttransfer.FieldStartAmount]
	return ok
}

// ResetStartAmount resets all changes to the "start_amount" field.
func (m *OrderPaymentTransferMutation) ResetStartAmount() {
	m.start_amount = nil
	delete(m.clearedFields, orderpaymenttransfer.FieldStartAmount)
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (m *OrderPaymentTransferMutation) SetPaymentTransactionID(s string) {
	m.payment_transaction_id = &s
}

// PaymentTransactionID returns the value of the "payment_transaction_id" field in the mutation.
func (m *OrderPaymentTransferMutation) PaymentTransactionID() (r string, exists bool) {
	v := m.payment_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentTransactionID returns the old "payment_transaction_id" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldPaymentTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentTransactionID: %w", err)
	}
	return oldValue.PaymentTransactionID, nil
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (m *OrderPaymentTransferMutation) ClearPaymentTransactionID() {
	m.payment_transaction_id = nil
	m.clearedFields[orderpaymenttransfer.FieldPaymentTransactionID] = struct{}{}
}

// PaymentTransactionIDCleared returns if the "payment_transaction_id" field was cleared in this mutation.
func (m *OrderPaymentTransferMutation) PaymentTransactionIDCleared() bool {
	_, ok := m.clearedFields[orderpaymenttransfer.FieldPaymentTransactionID]
	return ok
}

// ResetPaymentTransactionID resets all changes to the "payment_transaction_id" field.
func (m *OrderPaymentTransferMutation) ResetPaymentTransactionID() {
	m.payment_transaction_id = nil
	delete(m.clearedFields, orderpaymenttransfer.FieldPaymentTransactionID)
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (m *OrderPaymentTransferMutation) SetPaymentFinishAmount(d decimal.Decimal) {
	m.payment_finish_amount = &d
}

// PaymentFinishAmount returns the value of the "payment_finish_amount" field in the mutation.
func (m *OrderPaymentTransferMutation) PaymentFinishAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_finish_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentFinishAmount returns the old "payment_finish_amount" field's value of the OrderPaymentTransfer entity.
// If the OrderPaymentTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderPaymentTransferMutation) OldPaymentFinishAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentFinishAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentFinishAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentFinishAmount: %w", err)
	}
	return oldValue.PaymentFinishAmount, nil
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (m *OrderPaymentTransferMutation) ClearPaymentFinishAmount() {
	m.payment_finish_amount = nil
	m.clearedFields[orderpaymenttransfer.FieldPaymentFinishAmount] = struct{}{}
}

// PaymentFinishAmountCleared returns if the "payment_finish_amount" field was cleared in this mutation.
func (m *OrderPaymentTransferMutation) PaymentFinishAmountCleared() bool {
	_, ok := m.clearedFields[orderpaymenttransfer.FieldPaymentFinishAmount]
	return ok
}

// ResetPaymentFinishAmount resets all changes to the "payment_finish_amount" field.
func (m *OrderPaymentTransferMutation) ResetPaymentFinishAmount() {
	m.payment_finish_amount = nil
	delete(m.clearedFields, orderpaymenttransfer.FieldPaymentFinishAmount)
}

// Where appends a list predicates to the OrderPaymentTransferMutation builder.
func (m *OrderPaymentTransferMutation) Where(ps ...predicate.OrderPaymentTransfer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderPaymentTransferMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderPaymentTransfer).
func (m *OrderPaymentTransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderPaymentTransferMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderpaymenttransfer.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderpaymenttransfer.FieldOrderID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, orderpaymenttransfer.FieldCoinTypeID)
	}
	if m.start_amount != nil {
		fields = append(fields, orderpaymenttransfer.FieldStartAmount)
	}
	if m.payment_transaction_id != nil {
		fields = append(fields, orderpaymenttransfer.FieldPaymentTransactionID)
	}
	if m.payment_finish_amount != nil {
		fields = append(fields, orderpaymenttransfer.FieldPaymentFinishAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderPaymentTransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		return m.CreatedAt()
	case orderpaymenttransfer.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderpaymenttransfer.FieldDeletedAt:
		return m.DeletedAt()
	case orderpaymenttransfer.FieldEntID:
		return m.EntID()
	case orderpaymenttransfer.FieldOrderID:
		return m.OrderID()
	case orderpaymenttransfer.FieldCoinTypeID:
		return m.CoinTypeID()
	case orderpaymenttransfer.FieldStartAmount:
		return m.StartAmount()
	case orderpaymenttransfer.FieldPaymentTransactionID:
		return m.PaymentTransactionID()
	case orderpaymenttransfer.FieldPaymentFinishAmount:
		return m.PaymentFinishAmount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderPaymentTransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderpaymenttransfer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderpaymenttransfer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderpaymenttransfer.FieldEntID:
		return m.OldEntID(ctx)
	case orderpaymenttransfer.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderpaymenttransfer.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case orderpaymenttransfer.FieldStartAmount:
		return m.OldStartAmount(ctx)
	case orderpaymenttransfer.FieldPaymentTransactionID:
		return m.OldPaymentTransactionID(ctx)
	case orderpaymenttransfer.FieldPaymentFinishAmount:
		return m.OldPaymentFinishAmount(ctx)
	}
	return nil, fmt.Errorf("unknown OrderPaymentTransfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentTransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderpaymenttransfer.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderpaymenttransfer.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderpaymenttransfer.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderpaymenttransfer.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderpaymenttransfer.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case orderpaymenttransfer.FieldStartAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAmount(v)
		return nil
	case orderpaymenttransfer.FieldPaymentTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentTransactionID(v)
		return nil
	case orderpaymenttransfer.FieldPaymentFinishAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentFinishAmount(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentTransfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderPaymentTransferMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderpaymenttransfer.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderPaymentTransferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderpaymenttransfer.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderpaymenttransfer.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderPaymentTransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderpaymenttransfer.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderpaymenttransfer.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentTransfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderPaymentTransferMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderpaymenttransfer.FieldOrderID) {
		fields = append(fields, orderpaymenttransfer.FieldOrderID)
	}
	if m.FieldCleared(orderpaymenttransfer.FieldCoinTypeID) {
		fields = append(fields, orderpaymenttransfer.FieldCoinTypeID)
	}
	if m.FieldCleared(orderpaymenttransfer.FieldStartAmount) {
		fields = append(fields, orderpaymenttransfer.FieldStartAmount)
	}
	if m.FieldCleared(orderpaymenttransfer.FieldPaymentTransactionID) {
		fields = append(fields, orderpaymenttransfer.FieldPaymentTransactionID)
	}
	if m.FieldCleared(orderpaymenttransfer.FieldPaymentFinishAmount) {
		fields = append(fields, orderpaymenttransfer.FieldPaymentFinishAmount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderPaymentTransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderPaymentTransferMutation) ClearField(name string) error {
	switch name {
	case orderpaymenttransfer.FieldOrderID:
		m.ClearOrderID()
		return nil
	case orderpaymenttransfer.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case orderpaymenttransfer.FieldStartAmount:
		m.ClearStartAmount()
		return nil
	case orderpaymenttransfer.FieldPaymentTransactionID:
		m.ClearPaymentTransactionID()
		return nil
	case orderpaymenttransfer.FieldPaymentFinishAmount:
		m.ClearPaymentFinishAmount()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentTransfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderPaymentTransferMutation) ResetField(name string) error {
	switch name {
	case orderpaymenttransfer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderpaymenttransfer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderpaymenttransfer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderpaymenttransfer.FieldEntID:
		m.ResetEntID()
		return nil
	case orderpaymenttransfer.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderpaymenttransfer.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case orderpaymenttransfer.FieldStartAmount:
		m.ResetStartAmount()
		return nil
	case orderpaymenttransfer.FieldPaymentTransactionID:
		m.ResetPaymentTransactionID()
		return nil
	case orderpaymenttransfer.FieldPaymentFinishAmount:
		m.ResetPaymentFinishAmount()
		return nil
	}
	return fmt.Errorf("unknown OrderPaymentTransfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderPaymentTransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderPaymentTransferMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderPaymentTransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderPaymentTransferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderPaymentTransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderPaymentTransferMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderPaymentTransferMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentTransfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderPaymentTransferMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderPaymentTransfer edge %s", name)
}

// OrderStateMutation represents an operation that mutates the OrderState nodes in the graph.
type OrderStateMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint32
	created_at             *uint32
	addcreated_at          *int32
	updated_at             *uint32
	addupdated_at          *int32
	deleted_at             *uint32
	adddeleted_at          *int32
	ent_id                 *uuid.UUID
	order_id               *uuid.UUID
	order_state            *string
	cancel_state           *string
	start_mode             *string
	start_at               *uint32
	addstart_at            *int32
	end_at                 *uint32
	addend_at              *int32
	paid_at                *uint32
	addpaid_at             *int32
	last_benefit_at        *uint32
	addlast_benefit_at     *int32
	benefit_state          *string
	user_set_paid          *bool
	user_set_canceled      *bool
	admin_set_canceled     *bool
	payment_transaction_id *string
	payment_finish_amount  *decimal.Decimal
	payment_state          *string
	outofgas_hours         *uint32
	addoutofgas_hours      *int32
	compensate_hours       *uint32
	addcompensate_hours    *int32
	renew_state            *string
	renew_notify_at        *uint32
	addrenew_notify_at     *int32
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*OrderState, error)
	predicates             []predicate.OrderState
}

var _ ent.Mutation = (*OrderStateMutation)(nil)

// orderstateOption allows management of the mutation configuration using functional options.
type orderstateOption func(*OrderStateMutation)

// newOrderStateMutation creates new mutation for the OrderState entity.
func newOrderStateMutation(c config, op Op, opts ...orderstateOption) *OrderStateMutation {
	m := &OrderStateMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderStateID sets the ID field of the mutation.
func withOrderStateID(id uint32) orderstateOption {
	return func(m *OrderStateMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderState
		)
		m.oldValue = func(ctx context.Context) (*OrderState, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderState sets the old OrderState of the mutation.
func withOrderState(node *OrderState) orderstateOption {
	return func(m *OrderStateMutation) {
		m.oldValue = func(context.Context) (*OrderState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderState entities.
func (m *OrderStateMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderStateMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderStateMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderState.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderStateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderStateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderStateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderStateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderStateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderStateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderStateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderStateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderStateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderStateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderStateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderStateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderStateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderStateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderStateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderStateMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderStateMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderStateMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderStateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderStateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderStateMutation) ResetOrderID() {
	m.order_id = nil
}

// SetOrderState sets the "order_state" field.
func (m *OrderStateMutation) SetOrderState(s string) {
	m.order_state = &s
}

// OrderState returns the value of the "order_state" field in the mutation.
func (m *OrderStateMutation) OrderState() (r string, exists bool) {
	v := m.order_state
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderState returns the old "order_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOrderState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderState: %w", err)
	}
	return oldValue.OrderState, nil
}

// ClearOrderState clears the value of the "order_state" field.
func (m *OrderStateMutation) ClearOrderState() {
	m.order_state = nil
	m.clearedFields[orderstate.FieldOrderState] = struct{}{}
}

// OrderStateCleared returns if the "order_state" field was cleared in this mutation.
func (m *OrderStateMutation) OrderStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldOrderState]
	return ok
}

// ResetOrderState resets all changes to the "order_state" field.
func (m *OrderStateMutation) ResetOrderState() {
	m.order_state = nil
	delete(m.clearedFields, orderstate.FieldOrderState)
}

// SetCancelState sets the "cancel_state" field.
func (m *OrderStateMutation) SetCancelState(s string) {
	m.cancel_state = &s
}

// CancelState returns the value of the "cancel_state" field in the mutation.
func (m *OrderStateMutation) CancelState() (r string, exists bool) {
	v := m.cancel_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelState returns the old "cancel_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldCancelState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelState: %w", err)
	}
	return oldValue.CancelState, nil
}

// ClearCancelState clears the value of the "cancel_state" field.
func (m *OrderStateMutation) ClearCancelState() {
	m.cancel_state = nil
	m.clearedFields[orderstate.FieldCancelState] = struct{}{}
}

// CancelStateCleared returns if the "cancel_state" field was cleared in this mutation.
func (m *OrderStateMutation) CancelStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldCancelState]
	return ok
}

// ResetCancelState resets all changes to the "cancel_state" field.
func (m *OrderStateMutation) ResetCancelState() {
	m.cancel_state = nil
	delete(m.clearedFields, orderstate.FieldCancelState)
}

// SetStartMode sets the "start_mode" field.
func (m *OrderStateMutation) SetStartMode(s string) {
	m.start_mode = &s
}

// StartMode returns the value of the "start_mode" field in the mutation.
func (m *OrderStateMutation) StartMode() (r string, exists bool) {
	v := m.start_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldStartMode returns the old "start_mode" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldStartMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartMode: %w", err)
	}
	return oldValue.StartMode, nil
}

// ClearStartMode clears the value of the "start_mode" field.
func (m *OrderStateMutation) ClearStartMode() {
	m.start_mode = nil
	m.clearedFields[orderstate.FieldStartMode] = struct{}{}
}

// StartModeCleared returns if the "start_mode" field was cleared in this mutation.
func (m *OrderStateMutation) StartModeCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldStartMode]
	return ok
}

// ResetStartMode resets all changes to the "start_mode" field.
func (m *OrderStateMutation) ResetStartMode() {
	m.start_mode = nil
	delete(m.clearedFields, orderstate.FieldStartMode)
}

// SetStartAt sets the "start_at" field.
func (m *OrderStateMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OrderStateMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OrderStateMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OrderStateMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OrderStateMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[orderstate.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OrderStateMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OrderStateMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, orderstate.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *OrderStateMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *OrderStateMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *OrderStateMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *OrderStateMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *OrderStateMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[orderstate.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *OrderStateMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *OrderStateMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, orderstate.FieldEndAt)
}

// SetPaidAt sets the "paid_at" field.
func (m *OrderStateMutation) SetPaidAt(u uint32) {
	m.paid_at = &u
	m.addpaid_at = nil
}

// PaidAt returns the value of the "paid_at" field in the mutation.
func (m *OrderStateMutation) PaidAt() (r uint32, exists bool) {
	v := m.paid_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPaidAt returns the old "paid_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaidAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaidAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaidAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaidAt: %w", err)
	}
	return oldValue.PaidAt, nil
}

// AddPaidAt adds u to the "paid_at" field.
func (m *OrderStateMutation) AddPaidAt(u int32) {
	if m.addpaid_at != nil {
		*m.addpaid_at += u
	} else {
		m.addpaid_at = &u
	}
}

// AddedPaidAt returns the value that was added to the "paid_at" field in this mutation.
func (m *OrderStateMutation) AddedPaidAt() (r int32, exists bool) {
	v := m.addpaid_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaidAt clears the value of the "paid_at" field.
func (m *OrderStateMutation) ClearPaidAt() {
	m.paid_at = nil
	m.addpaid_at = nil
	m.clearedFields[orderstate.FieldPaidAt] = struct{}{}
}

// PaidAtCleared returns if the "paid_at" field was cleared in this mutation.
func (m *OrderStateMutation) PaidAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaidAt]
	return ok
}

// ResetPaidAt resets all changes to the "paid_at" field.
func (m *OrderStateMutation) ResetPaidAt() {
	m.paid_at = nil
	m.addpaid_at = nil
	delete(m.clearedFields, orderstate.FieldPaidAt)
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (m *OrderStateMutation) SetLastBenefitAt(u uint32) {
	m.last_benefit_at = &u
	m.addlast_benefit_at = nil
}

// LastBenefitAt returns the value of the "last_benefit_at" field in the mutation.
func (m *OrderStateMutation) LastBenefitAt() (r uint32, exists bool) {
	v := m.last_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitAt returns the old "last_benefit_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldLastBenefitAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitAt: %w", err)
	}
	return oldValue.LastBenefitAt, nil
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (m *OrderStateMutation) AddLastBenefitAt(u int32) {
	if m.addlast_benefit_at != nil {
		*m.addlast_benefit_at += u
	} else {
		m.addlast_benefit_at = &u
	}
}

// AddedLastBenefitAt returns the value that was added to the "last_benefit_at" field in this mutation.
func (m *OrderStateMutation) AddedLastBenefitAt() (r int32, exists bool) {
	v := m.addlast_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (m *OrderStateMutation) ClearLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	m.clearedFields[orderstate.FieldLastBenefitAt] = struct{}{}
}

// LastBenefitAtCleared returns if the "last_benefit_at" field was cleared in this mutation.
func (m *OrderStateMutation) LastBenefitAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldLastBenefitAt]
	return ok
}

// ResetLastBenefitAt resets all changes to the "last_benefit_at" field.
func (m *OrderStateMutation) ResetLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	delete(m.clearedFields, orderstate.FieldLastBenefitAt)
}

// SetBenefitState sets the "benefit_state" field.
func (m *OrderStateMutation) SetBenefitState(s string) {
	m.benefit_state = &s
}

// BenefitState returns the value of the "benefit_state" field in the mutation.
func (m *OrderStateMutation) BenefitState() (r string, exists bool) {
	v := m.benefit_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitState returns the old "benefit_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldBenefitState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitState: %w", err)
	}
	return oldValue.BenefitState, nil
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (m *OrderStateMutation) ClearBenefitState() {
	m.benefit_state = nil
	m.clearedFields[orderstate.FieldBenefitState] = struct{}{}
}

// BenefitStateCleared returns if the "benefit_state" field was cleared in this mutation.
func (m *OrderStateMutation) BenefitStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldBenefitState]
	return ok
}

// ResetBenefitState resets all changes to the "benefit_state" field.
func (m *OrderStateMutation) ResetBenefitState() {
	m.benefit_state = nil
	delete(m.clearedFields, orderstate.FieldBenefitState)
}

// SetUserSetPaid sets the "user_set_paid" field.
func (m *OrderStateMutation) SetUserSetPaid(b bool) {
	m.user_set_paid = &b
}

// UserSetPaid returns the value of the "user_set_paid" field in the mutation.
func (m *OrderStateMutation) UserSetPaid() (r bool, exists bool) {
	v := m.user_set_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetPaid returns the old "user_set_paid" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUserSetPaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetPaid: %w", err)
	}
	return oldValue.UserSetPaid, nil
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (m *OrderStateMutation) ClearUserSetPaid() {
	m.user_set_paid = nil
	m.clearedFields[orderstate.FieldUserSetPaid] = struct{}{}
}

// UserSetPaidCleared returns if the "user_set_paid" field was cleared in this mutation.
func (m *OrderStateMutation) UserSetPaidCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldUserSetPaid]
	return ok
}

// ResetUserSetPaid resets all changes to the "user_set_paid" field.
func (m *OrderStateMutation) ResetUserSetPaid() {
	m.user_set_paid = nil
	delete(m.clearedFields, orderstate.FieldUserSetPaid)
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (m *OrderStateMutation) SetUserSetCanceled(b bool) {
	m.user_set_canceled = &b
}

// UserSetCanceled returns the value of the "user_set_canceled" field in the mutation.
func (m *OrderStateMutation) UserSetCanceled() (r bool, exists bool) {
	v := m.user_set_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetCanceled returns the old "user_set_canceled" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldUserSetCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetCanceled: %w", err)
	}
	return oldValue.UserSetCanceled, nil
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (m *OrderStateMutation) ClearUserSetCanceled() {
	m.user_set_canceled = nil
	m.clearedFields[orderstate.FieldUserSetCanceled] = struct{}{}
}

// UserSetCanceledCleared returns if the "user_set_canceled" field was cleared in this mutation.
func (m *OrderStateMutation) UserSetCanceledCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldUserSetCanceled]
	return ok
}

// ResetUserSetCanceled resets all changes to the "user_set_canceled" field.
func (m *OrderStateMutation) ResetUserSetCanceled() {
	m.user_set_canceled = nil
	delete(m.clearedFields, orderstate.FieldUserSetCanceled)
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (m *OrderStateMutation) SetAdminSetCanceled(b bool) {
	m.admin_set_canceled = &b
}

// AdminSetCanceled returns the value of the "admin_set_canceled" field in the mutation.
func (m *OrderStateMutation) AdminSetCanceled() (r bool, exists bool) {
	v := m.admin_set_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldAdminSetCanceled returns the old "admin_set_canceled" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldAdminSetCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdminSetCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdminSetCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdminSetCanceled: %w", err)
	}
	return oldValue.AdminSetCanceled, nil
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (m *OrderStateMutation) ClearAdminSetCanceled() {
	m.admin_set_canceled = nil
	m.clearedFields[orderstate.FieldAdminSetCanceled] = struct{}{}
}

// AdminSetCanceledCleared returns if the "admin_set_canceled" field was cleared in this mutation.
func (m *OrderStateMutation) AdminSetCanceledCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldAdminSetCanceled]
	return ok
}

// ResetAdminSetCanceled resets all changes to the "admin_set_canceled" field.
func (m *OrderStateMutation) ResetAdminSetCanceled() {
	m.admin_set_canceled = nil
	delete(m.clearedFields, orderstate.FieldAdminSetCanceled)
}

// SetPaymentTransactionID sets the "payment_transaction_id" field.
func (m *OrderStateMutation) SetPaymentTransactionID(s string) {
	m.payment_transaction_id = &s
}

// PaymentTransactionID returns the value of the "payment_transaction_id" field in the mutation.
func (m *OrderStateMutation) PaymentTransactionID() (r string, exists bool) {
	v := m.payment_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentTransactionID returns the old "payment_transaction_id" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentTransactionID: %w", err)
	}
	return oldValue.PaymentTransactionID, nil
}

// ClearPaymentTransactionID clears the value of the "payment_transaction_id" field.
func (m *OrderStateMutation) ClearPaymentTransactionID() {
	m.payment_transaction_id = nil
	m.clearedFields[orderstate.FieldPaymentTransactionID] = struct{}{}
}

// PaymentTransactionIDCleared returns if the "payment_transaction_id" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentTransactionIDCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentTransactionID]
	return ok
}

// ResetPaymentTransactionID resets all changes to the "payment_transaction_id" field.
func (m *OrderStateMutation) ResetPaymentTransactionID() {
	m.payment_transaction_id = nil
	delete(m.clearedFields, orderstate.FieldPaymentTransactionID)
}

// SetPaymentFinishAmount sets the "payment_finish_amount" field.
func (m *OrderStateMutation) SetPaymentFinishAmount(d decimal.Decimal) {
	m.payment_finish_amount = &d
}

// PaymentFinishAmount returns the value of the "payment_finish_amount" field in the mutation.
func (m *OrderStateMutation) PaymentFinishAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_finish_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentFinishAmount returns the old "payment_finish_amount" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentFinishAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentFinishAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentFinishAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentFinishAmount: %w", err)
	}
	return oldValue.PaymentFinishAmount, nil
}

// ClearPaymentFinishAmount clears the value of the "payment_finish_amount" field.
func (m *OrderStateMutation) ClearPaymentFinishAmount() {
	m.payment_finish_amount = nil
	m.clearedFields[orderstate.FieldPaymentFinishAmount] = struct{}{}
}

// PaymentFinishAmountCleared returns if the "payment_finish_amount" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentFinishAmountCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentFinishAmount]
	return ok
}

// ResetPaymentFinishAmount resets all changes to the "payment_finish_amount" field.
func (m *OrderStateMutation) ResetPaymentFinishAmount() {
	m.payment_finish_amount = nil
	delete(m.clearedFields, orderstate.FieldPaymentFinishAmount)
}

// SetPaymentState sets the "payment_state" field.
func (m *OrderStateMutation) SetPaymentState(s string) {
	m.payment_state = &s
}

// PaymentState returns the value of the "payment_state" field in the mutation.
func (m *OrderStateMutation) PaymentState() (r string, exists bool) {
	v := m.payment_state
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentState returns the old "payment_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldPaymentState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentState: %w", err)
	}
	return oldValue.PaymentState, nil
}

// ClearPaymentState clears the value of the "payment_state" field.
func (m *OrderStateMutation) ClearPaymentState() {
	m.payment_state = nil
	m.clearedFields[orderstate.FieldPaymentState] = struct{}{}
}

// PaymentStateCleared returns if the "payment_state" field was cleared in this mutation.
func (m *OrderStateMutation) PaymentStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldPaymentState]
	return ok
}

// ResetPaymentState resets all changes to the "payment_state" field.
func (m *OrderStateMutation) ResetPaymentState() {
	m.payment_state = nil
	delete(m.clearedFields, orderstate.FieldPaymentState)
}

// SetOutofgasHours sets the "outofgas_hours" field.
func (m *OrderStateMutation) SetOutofgasHours(u uint32) {
	m.outofgas_hours = &u
	m.addoutofgas_hours = nil
}

// OutofgasHours returns the value of the "outofgas_hours" field in the mutation.
func (m *OrderStateMutation) OutofgasHours() (r uint32, exists bool) {
	v := m.outofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldOutofgasHours returns the old "outofgas_hours" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldOutofgasHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutofgasHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutofgasHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutofgasHours: %w", err)
	}
	return oldValue.OutofgasHours, nil
}

// AddOutofgasHours adds u to the "outofgas_hours" field.
func (m *OrderStateMutation) AddOutofgasHours(u int32) {
	if m.addoutofgas_hours != nil {
		*m.addoutofgas_hours += u
	} else {
		m.addoutofgas_hours = &u
	}
}

// AddedOutofgasHours returns the value that was added to the "outofgas_hours" field in this mutation.
func (m *OrderStateMutation) AddedOutofgasHours() (r int32, exists bool) {
	v := m.addoutofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutofgasHours clears the value of the "outofgas_hours" field.
func (m *OrderStateMutation) ClearOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	m.clearedFields[orderstate.FieldOutofgasHours] = struct{}{}
}

// OutofgasHoursCleared returns if the "outofgas_hours" field was cleared in this mutation.
func (m *OrderStateMutation) OutofgasHoursCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldOutofgasHours]
	return ok
}

// ResetOutofgasHours resets all changes to the "outofgas_hours" field.
func (m *OrderStateMutation) ResetOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	delete(m.clearedFields, orderstate.FieldOutofgasHours)
}

// SetCompensateHours sets the "compensate_hours" field.
func (m *OrderStateMutation) SetCompensateHours(u uint32) {
	m.compensate_hours = &u
	m.addcompensate_hours = nil
}

// CompensateHours returns the value of the "compensate_hours" field in the mutation.
func (m *OrderStateMutation) CompensateHours() (r uint32, exists bool) {
	v := m.compensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateHours returns the old "compensate_hours" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldCompensateHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateHours: %w", err)
	}
	return oldValue.CompensateHours, nil
}

// AddCompensateHours adds u to the "compensate_hours" field.
func (m *OrderStateMutation) AddCompensateHours(u int32) {
	if m.addcompensate_hours != nil {
		*m.addcompensate_hours += u
	} else {
		m.addcompensate_hours = &u
	}
}

// AddedCompensateHours returns the value that was added to the "compensate_hours" field in this mutation.
func (m *OrderStateMutation) AddedCompensateHours() (r int32, exists bool) {
	v := m.addcompensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearCompensateHours clears the value of the "compensate_hours" field.
func (m *OrderStateMutation) ClearCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	m.clearedFields[orderstate.FieldCompensateHours] = struct{}{}
}

// CompensateHoursCleared returns if the "compensate_hours" field was cleared in this mutation.
func (m *OrderStateMutation) CompensateHoursCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldCompensateHours]
	return ok
}

// ResetCompensateHours resets all changes to the "compensate_hours" field.
func (m *OrderStateMutation) ResetCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	delete(m.clearedFields, orderstate.FieldCompensateHours)
}

// SetRenewState sets the "renew_state" field.
func (m *OrderStateMutation) SetRenewState(s string) {
	m.renew_state = &s
}

// RenewState returns the value of the "renew_state" field in the mutation.
func (m *OrderStateMutation) RenewState() (r string, exists bool) {
	v := m.renew_state
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewState returns the old "renew_state" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldRenewState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewState: %w", err)
	}
	return oldValue.RenewState, nil
}

// ClearRenewState clears the value of the "renew_state" field.
func (m *OrderStateMutation) ClearRenewState() {
	m.renew_state = nil
	m.clearedFields[orderstate.FieldRenewState] = struct{}{}
}

// RenewStateCleared returns if the "renew_state" field was cleared in this mutation.
func (m *OrderStateMutation) RenewStateCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldRenewState]
	return ok
}

// ResetRenewState resets all changes to the "renew_state" field.
func (m *OrderStateMutation) ResetRenewState() {
	m.renew_state = nil
	delete(m.clearedFields, orderstate.FieldRenewState)
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (m *OrderStateMutation) SetRenewNotifyAt(u uint32) {
	m.renew_notify_at = &u
	m.addrenew_notify_at = nil
}

// RenewNotifyAt returns the value of the "renew_notify_at" field in the mutation.
func (m *OrderStateMutation) RenewNotifyAt() (r uint32, exists bool) {
	v := m.renew_notify_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewNotifyAt returns the old "renew_notify_at" field's value of the OrderState entity.
// If the OrderState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateMutation) OldRenewNotifyAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewNotifyAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewNotifyAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewNotifyAt: %w", err)
	}
	return oldValue.RenewNotifyAt, nil
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (m *OrderStateMutation) AddRenewNotifyAt(u int32) {
	if m.addrenew_notify_at != nil {
		*m.addrenew_notify_at += u
	} else {
		m.addrenew_notify_at = &u
	}
}

// AddedRenewNotifyAt returns the value that was added to the "renew_notify_at" field in this mutation.
func (m *OrderStateMutation) AddedRenewNotifyAt() (r int32, exists bool) {
	v := m.addrenew_notify_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (m *OrderStateMutation) ClearRenewNotifyAt() {
	m.renew_notify_at = nil
	m.addrenew_notify_at = nil
	m.clearedFields[orderstate.FieldRenewNotifyAt] = struct{}{}
}

// RenewNotifyAtCleared returns if the "renew_notify_at" field was cleared in this mutation.
func (m *OrderStateMutation) RenewNotifyAtCleared() bool {
	_, ok := m.clearedFields[orderstate.FieldRenewNotifyAt]
	return ok
}

// ResetRenewNotifyAt resets all changes to the "renew_notify_at" field.
func (m *OrderStateMutation) ResetRenewNotifyAt() {
	m.renew_notify_at = nil
	m.addrenew_notify_at = nil
	delete(m.clearedFields, orderstate.FieldRenewNotifyAt)
}

// Where appends a list predicates to the OrderStateMutation builder.
func (m *OrderStateMutation) Where(ps ...predicate.OrderState) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderStateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderState).
func (m *OrderStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderStateMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.created_at != nil {
		fields = append(fields, orderstate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderstate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderstate.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderstate.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderstate.FieldOrderID)
	}
	if m.order_state != nil {
		fields = append(fields, orderstate.FieldOrderState)
	}
	if m.cancel_state != nil {
		fields = append(fields, orderstate.FieldCancelState)
	}
	if m.start_mode != nil {
		fields = append(fields, orderstate.FieldStartMode)
	}
	if m.start_at != nil {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.paid_at != nil {
		fields = append(fields, orderstate.FieldPaidAt)
	}
	if m.last_benefit_at != nil {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.benefit_state != nil {
		fields = append(fields, orderstate.FieldBenefitState)
	}
	if m.user_set_paid != nil {
		fields = append(fields, orderstate.FieldUserSetPaid)
	}
	if m.user_set_canceled != nil {
		fields = append(fields, orderstate.FieldUserSetCanceled)
	}
	if m.admin_set_canceled != nil {
		fields = append(fields, orderstate.FieldAdminSetCanceled)
	}
	if m.payment_transaction_id != nil {
		fields = append(fields, orderstate.FieldPaymentTransactionID)
	}
	if m.payment_finish_amount != nil {
		fields = append(fields, orderstate.FieldPaymentFinishAmount)
	}
	if m.payment_state != nil {
		fields = append(fields, orderstate.FieldPaymentState)
	}
	if m.outofgas_hours != nil {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.compensate_hours != nil {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	if m.renew_state != nil {
		fields = append(fields, orderstate.FieldRenewState)
	}
	if m.renew_notify_at != nil {
		fields = append(fields, orderstate.FieldRenewNotifyAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.CreatedAt()
	case orderstate.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderstate.FieldDeletedAt:
		return m.DeletedAt()
	case orderstate.FieldEntID:
		return m.EntID()
	case orderstate.FieldOrderID:
		return m.OrderID()
	case orderstate.FieldOrderState:
		return m.OrderState()
	case orderstate.FieldCancelState:
		return m.CancelState()
	case orderstate.FieldStartMode:
		return m.StartMode()
	case orderstate.FieldStartAt:
		return m.StartAt()
	case orderstate.FieldEndAt:
		return m.EndAt()
	case orderstate.FieldPaidAt:
		return m.PaidAt()
	case orderstate.FieldLastBenefitAt:
		return m.LastBenefitAt()
	case orderstate.FieldBenefitState:
		return m.BenefitState()
	case orderstate.FieldUserSetPaid:
		return m.UserSetPaid()
	case orderstate.FieldUserSetCanceled:
		return m.UserSetCanceled()
	case orderstate.FieldAdminSetCanceled:
		return m.AdminSetCanceled()
	case orderstate.FieldPaymentTransactionID:
		return m.PaymentTransactionID()
	case orderstate.FieldPaymentFinishAmount:
		return m.PaymentFinishAmount()
	case orderstate.FieldPaymentState:
		return m.PaymentState()
	case orderstate.FieldOutofgasHours:
		return m.OutofgasHours()
	case orderstate.FieldCompensateHours:
		return m.CompensateHours()
	case orderstate.FieldRenewState:
		return m.RenewState()
	case orderstate.FieldRenewNotifyAt:
		return m.RenewNotifyAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderstate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderstate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderstate.FieldEntID:
		return m.OldEntID(ctx)
	case orderstate.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderstate.FieldOrderState:
		return m.OldOrderState(ctx)
	case orderstate.FieldCancelState:
		return m.OldCancelState(ctx)
	case orderstate.FieldStartMode:
		return m.OldStartMode(ctx)
	case orderstate.FieldStartAt:
		return m.OldStartAt(ctx)
	case orderstate.FieldEndAt:
		return m.OldEndAt(ctx)
	case orderstate.FieldPaidAt:
		return m.OldPaidAt(ctx)
	case orderstate.FieldLastBenefitAt:
		return m.OldLastBenefitAt(ctx)
	case orderstate.FieldBenefitState:
		return m.OldBenefitState(ctx)
	case orderstate.FieldUserSetPaid:
		return m.OldUserSetPaid(ctx)
	case orderstate.FieldUserSetCanceled:
		return m.OldUserSetCanceled(ctx)
	case orderstate.FieldAdminSetCanceled:
		return m.OldAdminSetCanceled(ctx)
	case orderstate.FieldPaymentTransactionID:
		return m.OldPaymentTransactionID(ctx)
	case orderstate.FieldPaymentFinishAmount:
		return m.OldPaymentFinishAmount(ctx)
	case orderstate.FieldPaymentState:
		return m.OldPaymentState(ctx)
	case orderstate.FieldOutofgasHours:
		return m.OldOutofgasHours(ctx)
	case orderstate.FieldCompensateHours:
		return m.OldCompensateHours(ctx)
	case orderstate.FieldRenewState:
		return m.OldRenewState(ctx)
	case orderstate.FieldRenewNotifyAt:
		return m.OldRenewNotifyAt(ctx)
	}
	return nil, fmt.Errorf("unknown OrderState field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderstate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderstate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderstate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderstate.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderstate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderstate.FieldOrderState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderState(v)
		return nil
	case orderstate.FieldCancelState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelState(v)
		return nil
	case orderstate.FieldStartMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartMode(v)
		return nil
	case orderstate.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case orderstate.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case orderstate.FieldPaidAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaidAt(v)
		return nil
	case orderstate.FieldLastBenefitAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitAt(v)
		return nil
	case orderstate.FieldBenefitState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitState(v)
		return nil
	case orderstate.FieldUserSetPaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetPaid(v)
		return nil
	case orderstate.FieldUserSetCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetCanceled(v)
		return nil
	case orderstate.FieldAdminSetCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdminSetCanceled(v)
		return nil
	case orderstate.FieldPaymentTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentTransactionID(v)
		return nil
	case orderstate.FieldPaymentFinishAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentFinishAmount(v)
		return nil
	case orderstate.FieldPaymentState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentState(v)
		return nil
	case orderstate.FieldOutofgasHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutofgasHours(v)
		return nil
	case orderstate.FieldCompensateHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateHours(v)
		return nil
	case orderstate.FieldRenewState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewState(v)
		return nil
	case orderstate.FieldRenewNotifyAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewNotifyAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderState field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderStateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderstate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderstate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderstate.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.addpaid_at != nil {
		fields = append(fields, orderstate.FieldPaidAt)
	}
	if m.addlast_benefit_at != nil {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.addoutofgas_hours != nil {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.addcompensate_hours != nil {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	if m.addrenew_notify_at != nil {
		fields = append(fields, orderstate.FieldRenewNotifyAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderStateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderstate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderstate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderstate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case orderstate.FieldStartAt:
		return m.AddedStartAt()
	case orderstate.FieldEndAt:
		return m.AddedEndAt()
	case orderstate.FieldPaidAt:
		return m.AddedPaidAt()
	case orderstate.FieldLastBenefitAt:
		return m.AddedLastBenefitAt()
	case orderstate.FieldOutofgasHours:
		return m.AddedOutofgasHours()
	case orderstate.FieldCompensateHours:
		return m.AddedCompensateHours()
	case orderstate.FieldRenewNotifyAt:
		return m.AddedRenewNotifyAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderstate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderstate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderstate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case orderstate.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case orderstate.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	case orderstate.FieldPaidAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaidAt(v)
		return nil
	case orderstate.FieldLastBenefitAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitAt(v)
		return nil
	case orderstate.FieldOutofgasHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutofgasHours(v)
		return nil
	case orderstate.FieldCompensateHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompensateHours(v)
		return nil
	case orderstate.FieldRenewNotifyAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRenewNotifyAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderStateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderstate.FieldOrderState) {
		fields = append(fields, orderstate.FieldOrderState)
	}
	if m.FieldCleared(orderstate.FieldCancelState) {
		fields = append(fields, orderstate.FieldCancelState)
	}
	if m.FieldCleared(orderstate.FieldStartMode) {
		fields = append(fields, orderstate.FieldStartMode)
	}
	if m.FieldCleared(orderstate.FieldStartAt) {
		fields = append(fields, orderstate.FieldStartAt)
	}
	if m.FieldCleared(orderstate.FieldEndAt) {
		fields = append(fields, orderstate.FieldEndAt)
	}
	if m.FieldCleared(orderstate.FieldPaidAt) {
		fields = append(fields, orderstate.FieldPaidAt)
	}
	if m.FieldCleared(orderstate.FieldLastBenefitAt) {
		fields = append(fields, orderstate.FieldLastBenefitAt)
	}
	if m.FieldCleared(orderstate.FieldBenefitState) {
		fields = append(fields, orderstate.FieldBenefitState)
	}
	if m.FieldCleared(orderstate.FieldUserSetPaid) {
		fields = append(fields, orderstate.FieldUserSetPaid)
	}
	if m.FieldCleared(orderstate.FieldUserSetCanceled) {
		fields = append(fields, orderstate.FieldUserSetCanceled)
	}
	if m.FieldCleared(orderstate.FieldAdminSetCanceled) {
		fields = append(fields, orderstate.FieldAdminSetCanceled)
	}
	if m.FieldCleared(orderstate.FieldPaymentTransactionID) {
		fields = append(fields, orderstate.FieldPaymentTransactionID)
	}
	if m.FieldCleared(orderstate.FieldPaymentFinishAmount) {
		fields = append(fields, orderstate.FieldPaymentFinishAmount)
	}
	if m.FieldCleared(orderstate.FieldPaymentState) {
		fields = append(fields, orderstate.FieldPaymentState)
	}
	if m.FieldCleared(orderstate.FieldOutofgasHours) {
		fields = append(fields, orderstate.FieldOutofgasHours)
	}
	if m.FieldCleared(orderstate.FieldCompensateHours) {
		fields = append(fields, orderstate.FieldCompensateHours)
	}
	if m.FieldCleared(orderstate.FieldRenewState) {
		fields = append(fields, orderstate.FieldRenewState)
	}
	if m.FieldCleared(orderstate.FieldRenewNotifyAt) {
		fields = append(fields, orderstate.FieldRenewNotifyAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderStateMutation) ClearField(name string) error {
	switch name {
	case orderstate.FieldOrderState:
		m.ClearOrderState()
		return nil
	case orderstate.FieldCancelState:
		m.ClearCancelState()
		return nil
	case orderstate.FieldStartMode:
		m.ClearStartMode()
		return nil
	case orderstate.FieldStartAt:
		m.ClearStartAt()
		return nil
	case orderstate.FieldEndAt:
		m.ClearEndAt()
		return nil
	case orderstate.FieldPaidAt:
		m.ClearPaidAt()
		return nil
	case orderstate.FieldLastBenefitAt:
		m.ClearLastBenefitAt()
		return nil
	case orderstate.FieldBenefitState:
		m.ClearBenefitState()
		return nil
	case orderstate.FieldUserSetPaid:
		m.ClearUserSetPaid()
		return nil
	case orderstate.FieldUserSetCanceled:
		m.ClearUserSetCanceled()
		return nil
	case orderstate.FieldAdminSetCanceled:
		m.ClearAdminSetCanceled()
		return nil
	case orderstate.FieldPaymentTransactionID:
		m.ClearPaymentTransactionID()
		return nil
	case orderstate.FieldPaymentFinishAmount:
		m.ClearPaymentFinishAmount()
		return nil
	case orderstate.FieldPaymentState:
		m.ClearPaymentState()
		return nil
	case orderstate.FieldOutofgasHours:
		m.ClearOutofgasHours()
		return nil
	case orderstate.FieldCompensateHours:
		m.ClearCompensateHours()
		return nil
	case orderstate.FieldRenewState:
		m.ClearRenewState()
		return nil
	case orderstate.FieldRenewNotifyAt:
		m.ClearRenewNotifyAt()
		return nil
	}
	return fmt.Errorf("unknown OrderState nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderStateMutation) ResetField(name string) error {
	switch name {
	case orderstate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderstate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderstate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderstate.FieldEntID:
		m.ResetEntID()
		return nil
	case orderstate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderstate.FieldOrderState:
		m.ResetOrderState()
		return nil
	case orderstate.FieldCancelState:
		m.ResetCancelState()
		return nil
	case orderstate.FieldStartMode:
		m.ResetStartMode()
		return nil
	case orderstate.FieldStartAt:
		m.ResetStartAt()
		return nil
	case orderstate.FieldEndAt:
		m.ResetEndAt()
		return nil
	case orderstate.FieldPaidAt:
		m.ResetPaidAt()
		return nil
	case orderstate.FieldLastBenefitAt:
		m.ResetLastBenefitAt()
		return nil
	case orderstate.FieldBenefitState:
		m.ResetBenefitState()
		return nil
	case orderstate.FieldUserSetPaid:
		m.ResetUserSetPaid()
		return nil
	case orderstate.FieldUserSetCanceled:
		m.ResetUserSetCanceled()
		return nil
	case orderstate.FieldAdminSetCanceled:
		m.ResetAdminSetCanceled()
		return nil
	case orderstate.FieldPaymentTransactionID:
		m.ResetPaymentTransactionID()
		return nil
	case orderstate.FieldPaymentFinishAmount:
		m.ResetPaymentFinishAmount()
		return nil
	case orderstate.FieldPaymentState:
		m.ResetPaymentState()
		return nil
	case orderstate.FieldOutofgasHours:
		m.ResetOutofgasHours()
		return nil
	case orderstate.FieldCompensateHours:
		m.ResetCompensateHours()
		return nil
	case orderstate.FieldRenewState:
		m.ResetRenewState()
		return nil
	case orderstate.FieldRenewNotifyAt:
		m.ResetRenewNotifyAt()
		return nil
	}
	return fmt.Errorf("unknown OrderState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderState unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderState edge %s", name)
}

// OrderStateBaseMutation represents an operation that mutates the OrderStateBase nodes in the graph.
type OrderStateBaseMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	created_at         *uint32
	addcreated_at      *int32
	updated_at         *uint32
	addupdated_at      *int32
	deleted_at         *uint32
	adddeleted_at      *int32
	ent_id             *uuid.UUID
	order_id           *uuid.UUID
	order_state        *string
	start_mode         *string
	start_at           *uint32
	addstart_at        *int32
	last_benefit_at    *uint32
	addlast_benefit_at *int32
	benefit_state      *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*OrderStateBase, error)
	predicates         []predicate.OrderStateBase
}

var _ ent.Mutation = (*OrderStateBaseMutation)(nil)

// orderstatebaseOption allows management of the mutation configuration using functional options.
type orderstatebaseOption func(*OrderStateBaseMutation)

// newOrderStateBaseMutation creates new mutation for the OrderStateBase entity.
func newOrderStateBaseMutation(c config, op Op, opts ...orderstatebaseOption) *OrderStateBaseMutation {
	m := &OrderStateBaseMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderStateBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderStateBaseID sets the ID field of the mutation.
func withOrderStateBaseID(id uint32) orderstatebaseOption {
	return func(m *OrderStateBaseMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderStateBase
		)
		m.oldValue = func(ctx context.Context) (*OrderStateBase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderStateBase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderStateBase sets the old OrderStateBase of the mutation.
func withOrderStateBase(node *OrderStateBase) orderstatebaseOption {
	return func(m *OrderStateBaseMutation) {
		m.oldValue = func(context.Context) (*OrderStateBase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderStateBaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderStateBaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderStateBase entities.
func (m *OrderStateBaseMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderStateBaseMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderStateBaseMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderStateBase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderStateBaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderStateBaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OrderStateBaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OrderStateBaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderStateBaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderStateBaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderStateBaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OrderStateBaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OrderStateBaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderStateBaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderStateBaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderStateBaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OrderStateBaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OrderStateBaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderStateBaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OrderStateBaseMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OrderStateBaseMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OrderStateBaseMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderStateBaseMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderStateBaseMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderStateBaseMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[orderstatebase.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderStateBaseMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderStateBaseMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, orderstatebase.FieldOrderID)
}

// SetOrderState sets the "order_state" field.
func (m *OrderStateBaseMutation) SetOrderState(s string) {
	m.order_state = &s
}

// OrderState returns the value of the "order_state" field in the mutation.
func (m *OrderStateBaseMutation) OrderState() (r string, exists bool) {
	v := m.order_state
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderState returns the old "order_state" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldOrderState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderState: %w", err)
	}
	return oldValue.OrderState, nil
}

// ClearOrderState clears the value of the "order_state" field.
func (m *OrderStateBaseMutation) ClearOrderState() {
	m.order_state = nil
	m.clearedFields[orderstatebase.FieldOrderState] = struct{}{}
}

// OrderStateCleared returns if the "order_state" field was cleared in this mutation.
func (m *OrderStateBaseMutation) OrderStateCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldOrderState]
	return ok
}

// ResetOrderState resets all changes to the "order_state" field.
func (m *OrderStateBaseMutation) ResetOrderState() {
	m.order_state = nil
	delete(m.clearedFields, orderstatebase.FieldOrderState)
}

// SetStartMode sets the "start_mode" field.
func (m *OrderStateBaseMutation) SetStartMode(s string) {
	m.start_mode = &s
}

// StartMode returns the value of the "start_mode" field in the mutation.
func (m *OrderStateBaseMutation) StartMode() (r string, exists bool) {
	v := m.start_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldStartMode returns the old "start_mode" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldStartMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartMode: %w", err)
	}
	return oldValue.StartMode, nil
}

// ClearStartMode clears the value of the "start_mode" field.
func (m *OrderStateBaseMutation) ClearStartMode() {
	m.start_mode = nil
	m.clearedFields[orderstatebase.FieldStartMode] = struct{}{}
}

// StartModeCleared returns if the "start_mode" field was cleared in this mutation.
func (m *OrderStateBaseMutation) StartModeCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldStartMode]
	return ok
}

// ResetStartMode resets all changes to the "start_mode" field.
func (m *OrderStateBaseMutation) ResetStartMode() {
	m.start_mode = nil
	delete(m.clearedFields, orderstatebase.FieldStartMode)
}

// SetStartAt sets the "start_at" field.
func (m *OrderStateBaseMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OrderStateBaseMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OrderStateBaseMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OrderStateBaseMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OrderStateBaseMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[orderstatebase.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OrderStateBaseMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OrderStateBaseMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, orderstatebase.FieldStartAt)
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (m *OrderStateBaseMutation) SetLastBenefitAt(u uint32) {
	m.last_benefit_at = &u
	m.addlast_benefit_at = nil
}

// LastBenefitAt returns the value of the "last_benefit_at" field in the mutation.
func (m *OrderStateBaseMutation) LastBenefitAt() (r uint32, exists bool) {
	v := m.last_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitAt returns the old "last_benefit_at" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldLastBenefitAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitAt: %w", err)
	}
	return oldValue.LastBenefitAt, nil
}

// AddLastBenefitAt adds u to the "last_benefit_at" field.
func (m *OrderStateBaseMutation) AddLastBenefitAt(u int32) {
	if m.addlast_benefit_at != nil {
		*m.addlast_benefit_at += u
	} else {
		m.addlast_benefit_at = &u
	}
}

// AddedLastBenefitAt returns the value that was added to the "last_benefit_at" field in this mutation.
func (m *OrderStateBaseMutation) AddedLastBenefitAt() (r int32, exists bool) {
	v := m.addlast_benefit_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (m *OrderStateBaseMutation) ClearLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	m.clearedFields[orderstatebase.FieldLastBenefitAt] = struct{}{}
}

// LastBenefitAtCleared returns if the "last_benefit_at" field was cleared in this mutation.
func (m *OrderStateBaseMutation) LastBenefitAtCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldLastBenefitAt]
	return ok
}

// ResetLastBenefitAt resets all changes to the "last_benefit_at" field.
func (m *OrderStateBaseMutation) ResetLastBenefitAt() {
	m.last_benefit_at = nil
	m.addlast_benefit_at = nil
	delete(m.clearedFields, orderstatebase.FieldLastBenefitAt)
}

// SetBenefitState sets the "benefit_state" field.
func (m *OrderStateBaseMutation) SetBenefitState(s string) {
	m.benefit_state = &s
}

// BenefitState returns the value of the "benefit_state" field in the mutation.
func (m *OrderStateBaseMutation) BenefitState() (r string, exists bool) {
	v := m.benefit_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitState returns the old "benefit_state" field's value of the OrderStateBase entity.
// If the OrderStateBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStateBaseMutation) OldBenefitState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitState: %w", err)
	}
	return oldValue.BenefitState, nil
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (m *OrderStateBaseMutation) ClearBenefitState() {
	m.benefit_state = nil
	m.clearedFields[orderstatebase.FieldBenefitState] = struct{}{}
}

// BenefitStateCleared returns if the "benefit_state" field was cleared in this mutation.
func (m *OrderStateBaseMutation) BenefitStateCleared() bool {
	_, ok := m.clearedFields[orderstatebase.FieldBenefitState]
	return ok
}

// ResetBenefitState resets all changes to the "benefit_state" field.
func (m *OrderStateBaseMutation) ResetBenefitState() {
	m.benefit_state = nil
	delete(m.clearedFields, orderstatebase.FieldBenefitState)
}

// Where appends a list predicates to the OrderStateBaseMutation builder.
func (m *OrderStateBaseMutation) Where(ps ...predicate.OrderStateBase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderStateBaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderStateBase).
func (m *OrderStateBaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderStateBaseMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, orderstatebase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderstatebase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderstatebase.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, orderstatebase.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, orderstatebase.FieldOrderID)
	}
	if m.order_state != nil {
		fields = append(fields, orderstatebase.FieldOrderState)
	}
	if m.start_mode != nil {
		fields = append(fields, orderstatebase.FieldStartMode)
	}
	if m.start_at != nil {
		fields = append(fields, orderstatebase.FieldStartAt)
	}
	if m.last_benefit_at != nil {
		fields = append(fields, orderstatebase.FieldLastBenefitAt)
	}
	if m.benefit_state != nil {
		fields = append(fields, orderstatebase.FieldBenefitState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderStateBaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderstatebase.FieldCreatedAt:
		return m.CreatedAt()
	case orderstatebase.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderstatebase.FieldDeletedAt:
		return m.DeletedAt()
	case orderstatebase.FieldEntID:
		return m.EntID()
	case orderstatebase.FieldOrderID:
		return m.OrderID()
	case orderstatebase.FieldOrderState:
		return m.OrderState()
	case orderstatebase.FieldStartMode:
		return m.StartMode()
	case orderstatebase.FieldStartAt:
		return m.StartAt()
	case orderstatebase.FieldLastBenefitAt:
		return m.LastBenefitAt()
	case orderstatebase.FieldBenefitState:
		return m.BenefitState()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderStateBaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderstatebase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderstatebase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderstatebase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderstatebase.FieldEntID:
		return m.OldEntID(ctx)
	case orderstatebase.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderstatebase.FieldOrderState:
		return m.OldOrderState(ctx)
	case orderstatebase.FieldStartMode:
		return m.OldStartMode(ctx)
	case orderstatebase.FieldStartAt:
		return m.OldStartAt(ctx)
	case orderstatebase.FieldLastBenefitAt:
		return m.OldLastBenefitAt(ctx)
	case orderstatebase.FieldBenefitState:
		return m.OldBenefitState(ctx)
	}
	return nil, fmt.Errorf("unknown OrderStateBase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateBaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderstatebase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderstatebase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderstatebase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderstatebase.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case orderstatebase.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderstatebase.FieldOrderState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderState(v)
		return nil
	case orderstatebase.FieldStartMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartMode(v)
		return nil
	case orderstatebase.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case orderstatebase.FieldLastBenefitAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitAt(v)
		return nil
	case orderstatebase.FieldBenefitState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitState(v)
		return nil
	}
	return fmt.Errorf("unknown OrderStateBase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderStateBaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, orderstatebase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, orderstatebase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, orderstatebase.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, orderstatebase.FieldStartAt)
	}
	if m.addlast_benefit_at != nil {
		fields = append(fields, orderstatebase.FieldLastBenefitAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderStateBaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderstatebase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case orderstatebase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case orderstatebase.FieldDeletedAt:
		return m.AddedDeletedAt()
	case orderstatebase.FieldStartAt:
		return m.AddedStartAt()
	case orderstatebase.FieldLastBenefitAt:
		return m.AddedLastBenefitAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStateBaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderstatebase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case orderstatebase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case orderstatebase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case orderstatebase.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case orderstatebase.FieldLastBenefitAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderStateBase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderStateBaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderstatebase.FieldOrderID) {
		fields = append(fields, orderstatebase.FieldOrderID)
	}
	if m.FieldCleared(orderstatebase.FieldOrderState) {
		fields = append(fields, orderstatebase.FieldOrderState)
	}
	if m.FieldCleared(orderstatebase.FieldStartMode) {
		fields = append(fields, orderstatebase.FieldStartMode)
	}
	if m.FieldCleared(orderstatebase.FieldStartAt) {
		fields = append(fields, orderstatebase.FieldStartAt)
	}
	if m.FieldCleared(orderstatebase.FieldLastBenefitAt) {
		fields = append(fields, orderstatebase.FieldLastBenefitAt)
	}
	if m.FieldCleared(orderstatebase.FieldBenefitState) {
		fields = append(fields, orderstatebase.FieldBenefitState)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderStateBaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderStateBaseMutation) ClearField(name string) error {
	switch name {
	case orderstatebase.FieldOrderID:
		m.ClearOrderID()
		return nil
	case orderstatebase.FieldOrderState:
		m.ClearOrderState()
		return nil
	case orderstatebase.FieldStartMode:
		m.ClearStartMode()
		return nil
	case orderstatebase.FieldStartAt:
		m.ClearStartAt()
		return nil
	case orderstatebase.FieldLastBenefitAt:
		m.ClearLastBenefitAt()
		return nil
	case orderstatebase.FieldBenefitState:
		m.ClearBenefitState()
		return nil
	}
	return fmt.Errorf("unknown OrderStateBase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderStateBaseMutation) ResetField(name string) error {
	switch name {
	case orderstatebase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderstatebase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderstatebase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderstatebase.FieldEntID:
		m.ResetEntID()
		return nil
	case orderstatebase.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderstatebase.FieldOrderState:
		m.ResetOrderState()
		return nil
	case orderstatebase.FieldStartMode:
		m.ResetStartMode()
		return nil
	case orderstatebase.FieldStartAt:
		m.ResetStartAt()
		return nil
	case orderstatebase.FieldLastBenefitAt:
		m.ResetLastBenefitAt()
		return nil
	case orderstatebase.FieldBenefitState:
		m.ResetBenefitState()
		return nil
	}
	return fmt.Errorf("unknown OrderStateBase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderStateBaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderStateBaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderStateBaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderStateBaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderStateBaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderStateBaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderStateBaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderStateBase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderStateBaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderStateBase edge %s", name)
}

// OutOfGasMutation represents an operation that mutates the OutOfGas nodes in the graph.
type OutOfGasMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	ent_id        *uuid.UUID
	order_id      *uuid.UUID
	start_at      *uint32
	addstart_at   *int32
	end_at        *uint32
	addend_at     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OutOfGas, error)
	predicates    []predicate.OutOfGas
}

var _ ent.Mutation = (*OutOfGasMutation)(nil)

// outofgasOption allows management of the mutation configuration using functional options.
type outofgasOption func(*OutOfGasMutation)

// newOutOfGasMutation creates new mutation for the OutOfGas entity.
func newOutOfGasMutation(c config, op Op, opts ...outofgasOption) *OutOfGasMutation {
	m := &OutOfGasMutation{
		config:        c,
		op:            op,
		typ:           TypeOutOfGas,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutOfGasID sets the ID field of the mutation.
func withOutOfGasID(id uint32) outofgasOption {
	return func(m *OutOfGasMutation) {
		var (
			err   error
			once  sync.Once
			value *OutOfGas
		)
		m.oldValue = func(ctx context.Context) (*OutOfGas, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OutOfGas.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutOfGas sets the old OutOfGas of the mutation.
func withOutOfGas(node *OutOfGas) outofgasOption {
	return func(m *OutOfGasMutation) {
		m.oldValue = func(context.Context) (*OutOfGas, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutOfGasMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutOfGasMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OutOfGas entities.
func (m *OutOfGasMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutOfGasMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutOfGasMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OutOfGas.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OutOfGasMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OutOfGasMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *OutOfGasMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *OutOfGasMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OutOfGasMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OutOfGasMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OutOfGasMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *OutOfGasMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *OutOfGasMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OutOfGasMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OutOfGasMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OutOfGasMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *OutOfGasMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *OutOfGasMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OutOfGasMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *OutOfGasMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *OutOfGasMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *OutOfGasMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OutOfGasMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OutOfGasMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OutOfGasMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[outofgas.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OutOfGasMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OutOfGasMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, outofgas.FieldOrderID)
}

// SetStartAt sets the "start_at" field.
func (m *OutOfGasMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *OutOfGasMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *OutOfGasMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *OutOfGasMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *OutOfGasMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[outofgas.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *OutOfGasMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *OutOfGasMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, outofgas.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *OutOfGasMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *OutOfGasMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the OutOfGas entity.
// If the OutOfGas object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutOfGasMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *OutOfGasMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *OutOfGasMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *OutOfGasMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[outofgas.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *OutOfGasMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[outofgas.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *OutOfGasMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, outofgas.FieldEndAt)
}

// Where appends a list predicates to the OutOfGasMutation builder.
func (m *OutOfGasMutation) Where(ps ...predicate.OutOfGas) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutOfGasMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OutOfGas).
func (m *OutOfGasMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutOfGasMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, outofgas.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, outofgas.FieldOrderID)
	}
	if m.start_at != nil {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutOfGasMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.CreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.UpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.DeletedAt()
	case outofgas.FieldEntID:
		return m.EntID()
	case outofgas.FieldOrderID:
		return m.OrderID()
	case outofgas.FieldStartAt:
		return m.StartAt()
	case outofgas.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutOfGasMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case outofgas.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case outofgas.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case outofgas.FieldEntID:
		return m.OldEntID(ctx)
	case outofgas.FieldOrderID:
		return m.OldOrderID(ctx)
	case outofgas.FieldStartAt:
		return m.OldStartAt(ctx)
	case outofgas.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown OutOfGas field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case outofgas.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case outofgas.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case outofgas.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case outofgas.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutOfGasMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, outofgas.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, outofgas.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, outofgas.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutOfGasMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outofgas.FieldCreatedAt:
		return m.AddedCreatedAt()
	case outofgas.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case outofgas.FieldDeletedAt:
		return m.AddedDeletedAt()
	case outofgas.FieldStartAt:
		return m.AddedStartAt()
	case outofgas.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutOfGasMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outofgas.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case outofgas.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case outofgas.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case outofgas.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case outofgas.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown OutOfGas numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutOfGasMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outofgas.FieldOrderID) {
		fields = append(fields, outofgas.FieldOrderID)
	}
	if m.FieldCleared(outofgas.FieldStartAt) {
		fields = append(fields, outofgas.FieldStartAt)
	}
	if m.FieldCleared(outofgas.FieldEndAt) {
		fields = append(fields, outofgas.FieldEndAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutOfGasMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutOfGasMutation) ClearField(name string) error {
	switch name {
	case outofgas.FieldOrderID:
		m.ClearOrderID()
		return nil
	case outofgas.FieldStartAt:
		m.ClearStartAt()
		return nil
	case outofgas.FieldEndAt:
		m.ClearEndAt()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutOfGasMutation) ResetField(name string) error {
	switch name {
	case outofgas.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case outofgas.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case outofgas.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case outofgas.FieldEntID:
		m.ResetEntID()
		return nil
	case outofgas.FieldOrderID:
		m.ResetOrderID()
		return nil
	case outofgas.FieldStartAt:
		m.ResetStartAt()
		return nil
	case outofgas.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown OutOfGas field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutOfGasMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutOfGasMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutOfGasMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutOfGasMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutOfGasMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutOfGasMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutOfGasMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutOfGasMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OutOfGas edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	ent_id        *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	good_id       *uuid.UUID
	order_id      *uuid.UUID
	account_id    *uuid.UUID
	coin_type_id  *uuid.UUID
	coin_info_id  *uuid.UUID
	start_amount  *decimal.Decimal
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Payment, error)
	predicates    []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id uint32) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PaymentMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PaymentMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PaymentMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PaymentMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PaymentMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PaymentMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PaymentMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PaymentMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PaymentMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *PaymentMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *PaymentMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *PaymentMutation) ResetEntID() {
	m.ent_id = nil
}

// SetAppID sets the "app_id" field.
func (m *PaymentMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *PaymentMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *PaymentMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *PaymentMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PaymentMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PaymentMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *PaymentMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PaymentMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PaymentMutation) ResetGoodID() {
	m.good_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PaymentMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PaymentMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PaymentMutation) ResetOrderID() {
	m.order_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *PaymentMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *PaymentMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *PaymentMutation) ResetAccountID() {
	m.account_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *PaymentMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *PaymentMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *PaymentMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[payment.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *PaymentMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *PaymentMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, payment.FieldCoinTypeID)
}

// SetCoinInfoID sets the "coin_info_id" field.
func (m *PaymentMutation) SetCoinInfoID(u uuid.UUID) {
	m.coin_info_id = &u
}

// CoinInfoID returns the value of the "coin_info_id" field in the mutation.
func (m *PaymentMutation) CoinInfoID() (r uuid.UUID, exists bool) {
	v := m.coin_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinInfoID returns the old "coin_info_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCoinInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinInfoID: %w", err)
	}
	return oldValue.CoinInfoID, nil
}

// ClearCoinInfoID clears the value of the "coin_info_id" field.
func (m *PaymentMutation) ClearCoinInfoID() {
	m.coin_info_id = nil
	m.clearedFields[payment.FieldCoinInfoID] = struct{}{}
}

// CoinInfoIDCleared returns if the "coin_info_id" field was cleared in this mutation.
func (m *PaymentMutation) CoinInfoIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldCoinInfoID]
	return ok
}

// ResetCoinInfoID resets all changes to the "coin_info_id" field.
func (m *PaymentMutation) ResetCoinInfoID() {
	m.coin_info_id = nil
	delete(m.clearedFields, payment.FieldCoinInfoID)
}

// SetStartAmount sets the "start_amount" field.
func (m *PaymentMutation) SetStartAmount(d decimal.Decimal) {
	m.start_amount = &d
}

// StartAmount returns the value of the "start_amount" field in the mutation.
func (m *PaymentMutation) StartAmount() (r decimal.Decimal, exists bool) {
	v := m.start_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAmount returns the old "start_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStartAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAmount: %w", err)
	}
	return oldValue.StartAmount, nil
}

// ClearStartAmount clears the value of the "start_amount" field.
func (m *PaymentMutation) ClearStartAmount() {
	m.start_amount = nil
	m.clearedFields[payment.FieldStartAmount] = struct{}{}
}

// StartAmountCleared returns if the "start_amount" field was cleared in this mutation.
func (m *PaymentMutation) StartAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldStartAmount]
	return ok
}

// ResetStartAmount resets all changes to the "start_amount" field.
func (m *PaymentMutation) ResetStartAmount() {
	m.start_amount = nil
	delete(m.clearedFields, payment.FieldStartAmount)
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, payment.FieldEntID)
	}
	if m.app_id != nil {
		fields = append(fields, payment.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, payment.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, payment.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, payment.FieldOrderID)
	}
	if m.account_id != nil {
		fields = append(fields, payment.FieldAccountID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, payment.FieldCoinTypeID)
	}
	if m.coin_info_id != nil {
		fields = append(fields, payment.FieldCoinInfoID)
	}
	if m.start_amount != nil {
		fields = append(fields, payment.FieldStartAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	case payment.FieldDeletedAt:
		return m.DeletedAt()
	case payment.FieldEntID:
		return m.EntID()
	case payment.FieldAppID:
		return m.AppID()
	case payment.FieldUserID:
		return m.UserID()
	case payment.FieldGoodID:
		return m.GoodID()
	case payment.FieldOrderID:
		return m.OrderID()
	case payment.FieldAccountID:
		return m.AccountID()
	case payment.FieldCoinTypeID:
		return m.CoinTypeID()
	case payment.FieldCoinInfoID:
		return m.CoinInfoID()
	case payment.FieldStartAmount:
		return m.StartAmount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case payment.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case payment.FieldEntID:
		return m.OldEntID(ctx)
	case payment.FieldAppID:
		return m.OldAppID(ctx)
	case payment.FieldUserID:
		return m.OldUserID(ctx)
	case payment.FieldGoodID:
		return m.OldGoodID(ctx)
	case payment.FieldOrderID:
		return m.OldOrderID(ctx)
	case payment.FieldAccountID:
		return m.OldAccountID(ctx)
	case payment.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case payment.FieldCoinInfoID:
		return m.OldCoinInfoID(ctx)
	case payment.FieldStartAmount:
		return m.OldStartAmount(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case payment.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case payment.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case payment.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case payment.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case payment.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case payment.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case payment.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case payment.FieldCoinInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinInfoID(v)
		return nil
	case payment.FieldStartAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, payment.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreatedAt:
		return m.AddedCreatedAt()
	case payment.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case payment.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case payment.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldCoinTypeID) {
		fields = append(fields, payment.FieldCoinTypeID)
	}
	if m.FieldCleared(payment.FieldCoinInfoID) {
		fields = append(fields, payment.FieldCoinInfoID)
	}
	if m.FieldCleared(payment.FieldStartAmount) {
		fields = append(fields, payment.FieldStartAmount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case payment.FieldCoinInfoID:
		m.ClearCoinInfoID()
		return nil
	case payment.FieldStartAmount:
		m.ClearStartAmount()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case payment.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case payment.FieldEntID:
		m.ResetEntID()
		return nil
	case payment.FieldAppID:
		m.ResetAppID()
		return nil
	case payment.FieldUserID:
		m.ResetUserID()
		return nil
	case payment.FieldGoodID:
		m.ResetGoodID()
		return nil
	case payment.FieldOrderID:
		m.ResetOrderID()
		return nil
	case payment.FieldAccountID:
		m.ResetAccountID()
		return nil
	case payment.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case payment.FieldCoinInfoID:
		m.ResetCoinInfoID()
		return nil
	case payment.FieldStartAmount:
		m.ResetStartAmount()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Payment edge %s", name)
}

// PowerRentalMutation represents an operation that mutates the PowerRental nodes in the graph.
type PowerRentalMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	ent_id          *uuid.UUID
	order_id        *uuid.UUID
	units           *decimal.Decimal
	good_value      *decimal.Decimal
	good_value_usd  *decimal.Decimal
	payment_amount  *decimal.Decimal
	discount_amount *decimal.Decimal
	promotion_id    *uuid.UUID
	duration        *uint32
	addduration     *int32
	investment_type *string
	simulate        *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*PowerRental, error)
	predicates      []predicate.PowerRental
}

var _ ent.Mutation = (*PowerRentalMutation)(nil)

// powerrentalOption allows management of the mutation configuration using functional options.
type powerrentalOption func(*PowerRentalMutation)

// newPowerRentalMutation creates new mutation for the PowerRental entity.
func newPowerRentalMutation(c config, op Op, opts ...powerrentalOption) *PowerRentalMutation {
	m := &PowerRentalMutation{
		config:        c,
		op:            op,
		typ:           TypePowerRental,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPowerRentalID sets the ID field of the mutation.
func withPowerRentalID(id uint32) powerrentalOption {
	return func(m *PowerRentalMutation) {
		var (
			err   error
			once  sync.Once
			value *PowerRental
		)
		m.oldValue = func(ctx context.Context) (*PowerRental, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PowerRental.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPowerRental sets the old PowerRental of the mutation.
func withPowerRental(node *PowerRental) powerrentalOption {
	return func(m *PowerRentalMutation) {
		m.oldValue = func(context.Context) (*PowerRental, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PowerRentalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PowerRentalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PowerRental entities.
func (m *PowerRentalMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PowerRentalMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PowerRentalMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PowerRental.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PowerRentalMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PowerRentalMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PowerRentalMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PowerRentalMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PowerRentalMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PowerRentalMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PowerRentalMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PowerRentalMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PowerRentalMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PowerRentalMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PowerRentalMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PowerRentalMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PowerRentalMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PowerRentalMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PowerRentalMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *PowerRentalMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *PowerRentalMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *PowerRentalMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PowerRentalMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PowerRentalMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *PowerRentalMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[powerrental.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *PowerRentalMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PowerRentalMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, powerrental.FieldOrderID)
}

// SetUnits sets the "units" field.
func (m *PowerRentalMutation) SetUnits(d decimal.Decimal) {
	m.units = &d
}

// Units returns the value of the "units" field in the mutation.
func (m *PowerRentalMutation) Units() (r decimal.Decimal, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldUnits(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// ClearUnits clears the value of the "units" field.
func (m *PowerRentalMutation) ClearUnits() {
	m.units = nil
	m.clearedFields[powerrental.FieldUnits] = struct{}{}
}

// UnitsCleared returns if the "units" field was cleared in this mutation.
func (m *PowerRentalMutation) UnitsCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldUnits]
	return ok
}

// ResetUnits resets all changes to the "units" field.
func (m *PowerRentalMutation) ResetUnits() {
	m.units = nil
	delete(m.clearedFields, powerrental.FieldUnits)
}

// SetGoodValue sets the "good_value" field.
func (m *PowerRentalMutation) SetGoodValue(d decimal.Decimal) {
	m.good_value = &d
}

// GoodValue returns the value of the "good_value" field in the mutation.
func (m *PowerRentalMutation) GoodValue() (r decimal.Decimal, exists bool) {
	v := m.good_value
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodValue returns the old "good_value" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldGoodValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodValue: %w", err)
	}
	return oldValue.GoodValue, nil
}

// ClearGoodValue clears the value of the "good_value" field.
func (m *PowerRentalMutation) ClearGoodValue() {
	m.good_value = nil
	m.clearedFields[powerrental.FieldGoodValue] = struct{}{}
}

// GoodValueCleared returns if the "good_value" field was cleared in this mutation.
func (m *PowerRentalMutation) GoodValueCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldGoodValue]
	return ok
}

// ResetGoodValue resets all changes to the "good_value" field.
func (m *PowerRentalMutation) ResetGoodValue() {
	m.good_value = nil
	delete(m.clearedFields, powerrental.FieldGoodValue)
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (m *PowerRentalMutation) SetGoodValueUsd(d decimal.Decimal) {
	m.good_value_usd = &d
}

// GoodValueUsd returns the value of the "good_value_usd" field in the mutation.
func (m *PowerRentalMutation) GoodValueUsd() (r decimal.Decimal, exists bool) {
	v := m.good_value_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodValueUsd returns the old "good_value_usd" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldGoodValueUsd(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodValueUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodValueUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodValueUsd: %w", err)
	}
	return oldValue.GoodValueUsd, nil
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (m *PowerRentalMutation) ClearGoodValueUsd() {
	m.good_value_usd = nil
	m.clearedFields[powerrental.FieldGoodValueUsd] = struct{}{}
}

// GoodValueUsdCleared returns if the "good_value_usd" field was cleared in this mutation.
func (m *PowerRentalMutation) GoodValueUsdCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldGoodValueUsd]
	return ok
}

// ResetGoodValueUsd resets all changes to the "good_value_usd" field.
func (m *PowerRentalMutation) ResetGoodValueUsd() {
	m.good_value_usd = nil
	delete(m.clearedFields, powerrental.FieldGoodValueUsd)
}

// SetPaymentAmount sets the "payment_amount" field.
func (m *PowerRentalMutation) SetPaymentAmount(d decimal.Decimal) {
	m.payment_amount = &d
}

// PaymentAmount returns the value of the "payment_amount" field in the mutation.
func (m *PowerRentalMutation) PaymentAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAmount returns the old "payment_amount" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldPaymentAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAmount: %w", err)
	}
	return oldValue.PaymentAmount, nil
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (m *PowerRentalMutation) ClearPaymentAmount() {
	m.payment_amount = nil
	m.clearedFields[powerrental.FieldPaymentAmount] = struct{}{}
}

// PaymentAmountCleared returns if the "payment_amount" field was cleared in this mutation.
func (m *PowerRentalMutation) PaymentAmountCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldPaymentAmount]
	return ok
}

// ResetPaymentAmount resets all changes to the "payment_amount" field.
func (m *PowerRentalMutation) ResetPaymentAmount() {
	m.payment_amount = nil
	delete(m.clearedFields, powerrental.FieldPaymentAmount)
}

// SetDiscountAmount sets the "discount_amount" field.
func (m *PowerRentalMutation) SetDiscountAmount(d decimal.Decimal) {
	m.discount_amount = &d
}

// DiscountAmount returns the value of the "discount_amount" field in the mutation.
func (m *PowerRentalMutation) DiscountAmount() (r decimal.Decimal, exists bool) {
	v := m.discount_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountAmount returns the old "discount_amount" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldDiscountAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountAmount: %w", err)
	}
	return oldValue.DiscountAmount, nil
}

// ClearDiscountAmount clears the value of the "discount_amount" field.
func (m *PowerRentalMutation) ClearDiscountAmount() {
	m.discount_amount = nil
	m.clearedFields[powerrental.FieldDiscountAmount] = struct{}{}
}

// DiscountAmountCleared returns if the "discount_amount" field was cleared in this mutation.
func (m *PowerRentalMutation) DiscountAmountCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldDiscountAmount]
	return ok
}

// ResetDiscountAmount resets all changes to the "discount_amount" field.
func (m *PowerRentalMutation) ResetDiscountAmount() {
	m.discount_amount = nil
	delete(m.clearedFields, powerrental.FieldDiscountAmount)
}

// SetPromotionID sets the "promotion_id" field.
func (m *PowerRentalMutation) SetPromotionID(u uuid.UUID) {
	m.promotion_id = &u
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *PowerRentalMutation) PromotionID() (r uuid.UUID, exists bool) {
	v := m.promotion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldPromotionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (m *PowerRentalMutation) ClearPromotionID() {
	m.promotion_id = nil
	m.clearedFields[powerrental.FieldPromotionID] = struct{}{}
}

// PromotionIDCleared returns if the "promotion_id" field was cleared in this mutation.
func (m *PowerRentalMutation) PromotionIDCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldPromotionID]
	return ok
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *PowerRentalMutation) ResetPromotionID() {
	m.promotion_id = nil
	delete(m.clearedFields, powerrental.FieldPromotionID)
}

// SetDuration sets the "duration" field.
func (m *PowerRentalMutation) SetDuration(u uint32) {
	m.duration = &u
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *PowerRentalMutation) Duration() (r uint32, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldDuration(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds u to the "duration" field.
func (m *PowerRentalMutation) AddDuration(u int32) {
	if m.addduration != nil {
		*m.addduration += u
	} else {
		m.addduration = &u
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *PowerRentalMutation) AddedDuration() (r int32, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *PowerRentalMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[powerrental.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *PowerRentalMutation) DurationCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *PowerRentalMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, powerrental.FieldDuration)
}

// SetInvestmentType sets the "investment_type" field.
func (m *PowerRentalMutation) SetInvestmentType(s string) {
	m.investment_type = &s
}

// InvestmentType returns the value of the "investment_type" field in the mutation.
func (m *PowerRentalMutation) InvestmentType() (r string, exists bool) {
	v := m.investment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInvestmentType returns the old "investment_type" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldInvestmentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvestmentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvestmentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvestmentType: %w", err)
	}
	return oldValue.InvestmentType, nil
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (m *PowerRentalMutation) ClearInvestmentType() {
	m.investment_type = nil
	m.clearedFields[powerrental.FieldInvestmentType] = struct{}{}
}

// InvestmentTypeCleared returns if the "investment_type" field was cleared in this mutation.
func (m *PowerRentalMutation) InvestmentTypeCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldInvestmentType]
	return ok
}

// ResetInvestmentType resets all changes to the "investment_type" field.
func (m *PowerRentalMutation) ResetInvestmentType() {
	m.investment_type = nil
	delete(m.clearedFields, powerrental.FieldInvestmentType)
}

// SetSimulate sets the "simulate" field.
func (m *PowerRentalMutation) SetSimulate(b bool) {
	m.simulate = &b
}

// Simulate returns the value of the "simulate" field in the mutation.
func (m *PowerRentalMutation) Simulate() (r bool, exists bool) {
	v := m.simulate
	if v == nil {
		return
	}
	return *v, true
}

// OldSimulate returns the old "simulate" field's value of the PowerRental entity.
// If the PowerRental object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalMutation) OldSimulate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimulate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimulate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimulate: %w", err)
	}
	return oldValue.Simulate, nil
}

// ClearSimulate clears the value of the "simulate" field.
func (m *PowerRentalMutation) ClearSimulate() {
	m.simulate = nil
	m.clearedFields[powerrental.FieldSimulate] = struct{}{}
}

// SimulateCleared returns if the "simulate" field was cleared in this mutation.
func (m *PowerRentalMutation) SimulateCleared() bool {
	_, ok := m.clearedFields[powerrental.FieldSimulate]
	return ok
}

// ResetSimulate resets all changes to the "simulate" field.
func (m *PowerRentalMutation) ResetSimulate() {
	m.simulate = nil
	delete(m.clearedFields, powerrental.FieldSimulate)
}

// Where appends a list predicates to the PowerRentalMutation builder.
func (m *PowerRentalMutation) Where(ps ...predicate.PowerRental) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PowerRentalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PowerRental).
func (m *PowerRentalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PowerRentalMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, powerrental.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, powerrental.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, powerrental.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, powerrental.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, powerrental.FieldOrderID)
	}
	if m.units != nil {
		fields = append(fields, powerrental.FieldUnits)
	}
	if m.good_value != nil {
		fields = append(fields, powerrental.FieldGoodValue)
	}
	if m.good_value_usd != nil {
		fields = append(fields, powerrental.FieldGoodValueUsd)
	}
	if m.payment_amount != nil {
		fields = append(fields, powerrental.FieldPaymentAmount)
	}
	if m.discount_amount != nil {
		fields = append(fields, powerrental.FieldDiscountAmount)
	}
	if m.promotion_id != nil {
		fields = append(fields, powerrental.FieldPromotionID)
	}
	if m.duration != nil {
		fields = append(fields, powerrental.FieldDuration)
	}
	if m.investment_type != nil {
		fields = append(fields, powerrental.FieldInvestmentType)
	}
	if m.simulate != nil {
		fields = append(fields, powerrental.FieldSimulate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PowerRentalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case powerrental.FieldCreatedAt:
		return m.CreatedAt()
	case powerrental.FieldUpdatedAt:
		return m.UpdatedAt()
	case powerrental.FieldDeletedAt:
		return m.DeletedAt()
	case powerrental.FieldEntID:
		return m.EntID()
	case powerrental.FieldOrderID:
		return m.OrderID()
	case powerrental.FieldUnits:
		return m.Units()
	case powerrental.FieldGoodValue:
		return m.GoodValue()
	case powerrental.FieldGoodValueUsd:
		return m.GoodValueUsd()
	case powerrental.FieldPaymentAmount:
		return m.PaymentAmount()
	case powerrental.FieldDiscountAmount:
		return m.DiscountAmount()
	case powerrental.FieldPromotionID:
		return m.PromotionID()
	case powerrental.FieldDuration:
		return m.Duration()
	case powerrental.FieldInvestmentType:
		return m.InvestmentType()
	case powerrental.FieldSimulate:
		return m.Simulate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PowerRentalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case powerrental.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case powerrental.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case powerrental.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case powerrental.FieldEntID:
		return m.OldEntID(ctx)
	case powerrental.FieldOrderID:
		return m.OldOrderID(ctx)
	case powerrental.FieldUnits:
		return m.OldUnits(ctx)
	case powerrental.FieldGoodValue:
		return m.OldGoodValue(ctx)
	case powerrental.FieldGoodValueUsd:
		return m.OldGoodValueUsd(ctx)
	case powerrental.FieldPaymentAmount:
		return m.OldPaymentAmount(ctx)
	case powerrental.FieldDiscountAmount:
		return m.OldDiscountAmount(ctx)
	case powerrental.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case powerrental.FieldDuration:
		return m.OldDuration(ctx)
	case powerrental.FieldInvestmentType:
		return m.OldInvestmentType(ctx)
	case powerrental.FieldSimulate:
		return m.OldSimulate(ctx)
	}
	return nil, fmt.Errorf("unknown PowerRental field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PowerRentalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case powerrental.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case powerrental.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case powerrental.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case powerrental.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case powerrental.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case powerrental.FieldUnits:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case powerrental.FieldGoodValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodValue(v)
		return nil
	case powerrental.FieldGoodValueUsd:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodValueUsd(v)
		return nil
	case powerrental.FieldPaymentAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAmount(v)
		return nil
	case powerrental.FieldDiscountAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountAmount(v)
		return nil
	case powerrental.FieldPromotionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case powerrental.FieldDuration:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case powerrental.FieldInvestmentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvestmentType(v)
		return nil
	case powerrental.FieldSimulate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimulate(v)
		return nil
	}
	return fmt.Errorf("unknown PowerRental field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PowerRentalMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, powerrental.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, powerrental.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, powerrental.FieldDeletedAt)
	}
	if m.addduration != nil {
		fields = append(fields, powerrental.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PowerRentalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case powerrental.FieldCreatedAt:
		return m.AddedCreatedAt()
	case powerrental.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case powerrental.FieldDeletedAt:
		return m.AddedDeletedAt()
	case powerrental.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PowerRentalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case powerrental.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case powerrental.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case powerrental.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case powerrental.FieldDuration:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown PowerRental numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PowerRentalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(powerrental.FieldOrderID) {
		fields = append(fields, powerrental.FieldOrderID)
	}
	if m.FieldCleared(powerrental.FieldUnits) {
		fields = append(fields, powerrental.FieldUnits)
	}
	if m.FieldCleared(powerrental.FieldGoodValue) {
		fields = append(fields, powerrental.FieldGoodValue)
	}
	if m.FieldCleared(powerrental.FieldGoodValueUsd) {
		fields = append(fields, powerrental.FieldGoodValueUsd)
	}
	if m.FieldCleared(powerrental.FieldPaymentAmount) {
		fields = append(fields, powerrental.FieldPaymentAmount)
	}
	if m.FieldCleared(powerrental.FieldDiscountAmount) {
		fields = append(fields, powerrental.FieldDiscountAmount)
	}
	if m.FieldCleared(powerrental.FieldPromotionID) {
		fields = append(fields, powerrental.FieldPromotionID)
	}
	if m.FieldCleared(powerrental.FieldDuration) {
		fields = append(fields, powerrental.FieldDuration)
	}
	if m.FieldCleared(powerrental.FieldInvestmentType) {
		fields = append(fields, powerrental.FieldInvestmentType)
	}
	if m.FieldCleared(powerrental.FieldSimulate) {
		fields = append(fields, powerrental.FieldSimulate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PowerRentalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PowerRentalMutation) ClearField(name string) error {
	switch name {
	case powerrental.FieldOrderID:
		m.ClearOrderID()
		return nil
	case powerrental.FieldUnits:
		m.ClearUnits()
		return nil
	case powerrental.FieldGoodValue:
		m.ClearGoodValue()
		return nil
	case powerrental.FieldGoodValueUsd:
		m.ClearGoodValueUsd()
		return nil
	case powerrental.FieldPaymentAmount:
		m.ClearPaymentAmount()
		return nil
	case powerrental.FieldDiscountAmount:
		m.ClearDiscountAmount()
		return nil
	case powerrental.FieldPromotionID:
		m.ClearPromotionID()
		return nil
	case powerrental.FieldDuration:
		m.ClearDuration()
		return nil
	case powerrental.FieldInvestmentType:
		m.ClearInvestmentType()
		return nil
	case powerrental.FieldSimulate:
		m.ClearSimulate()
		return nil
	}
	return fmt.Errorf("unknown PowerRental nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PowerRentalMutation) ResetField(name string) error {
	switch name {
	case powerrental.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case powerrental.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case powerrental.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case powerrental.FieldEntID:
		m.ResetEntID()
		return nil
	case powerrental.FieldOrderID:
		m.ResetOrderID()
		return nil
	case powerrental.FieldUnits:
		m.ResetUnits()
		return nil
	case powerrental.FieldGoodValue:
		m.ResetGoodValue()
		return nil
	case powerrental.FieldGoodValueUsd:
		m.ResetGoodValueUsd()
		return nil
	case powerrental.FieldPaymentAmount:
		m.ResetPaymentAmount()
		return nil
	case powerrental.FieldDiscountAmount:
		m.ResetDiscountAmount()
		return nil
	case powerrental.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case powerrental.FieldDuration:
		m.ResetDuration()
		return nil
	case powerrental.FieldInvestmentType:
		m.ResetInvestmentType()
		return nil
	case powerrental.FieldSimulate:
		m.ResetSimulate()
		return nil
	}
	return fmt.Errorf("unknown PowerRental field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PowerRentalMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PowerRentalMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PowerRentalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PowerRentalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PowerRentalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PowerRentalMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PowerRentalMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PowerRental unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PowerRentalMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PowerRental edge %s", name)
}

// PowerRentalStateMutation represents an operation that mutates the PowerRentalState nodes in the graph.
type PowerRentalStateMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint32
	created_at          *uint32
	addcreated_at       *int32
	updated_at          *uint32
	addupdated_at       *int32
	deleted_at          *uint32
	adddeleted_at       *int32
	ent_id              *uuid.UUID
	order_id            *uuid.UUID
	cancel_state        *string
	end_at              *uint32
	addend_at           *int32
	paid_at             *uint32
	addpaid_at          *int32
	user_set_paid       *bool
	user_set_canceled   *bool
	admin_set_canceled  *bool
	payment_state       *string
	outofgas_hours      *uint32
	addoutofgas_hours   *int32
	compensate_hours    *uint32
	addcompensate_hours *int32
	renew_state         *string
	renew_notify_at     *uint32
	addrenew_notify_at  *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*PowerRentalState, error)
	predicates          []predicate.PowerRentalState
}

var _ ent.Mutation = (*PowerRentalStateMutation)(nil)

// powerrentalstateOption allows management of the mutation configuration using functional options.
type powerrentalstateOption func(*PowerRentalStateMutation)

// newPowerRentalStateMutation creates new mutation for the PowerRentalState entity.
func newPowerRentalStateMutation(c config, op Op, opts ...powerrentalstateOption) *PowerRentalStateMutation {
	m := &PowerRentalStateMutation{
		config:        c,
		op:            op,
		typ:           TypePowerRentalState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPowerRentalStateID sets the ID field of the mutation.
func withPowerRentalStateID(id uint32) powerrentalstateOption {
	return func(m *PowerRentalStateMutation) {
		var (
			err   error
			once  sync.Once
			value *PowerRentalState
		)
		m.oldValue = func(ctx context.Context) (*PowerRentalState, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PowerRentalState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPowerRentalState sets the old PowerRentalState of the mutation.
func withPowerRentalState(node *PowerRentalState) powerrentalstateOption {
	return func(m *PowerRentalStateMutation) {
		m.oldValue = func(context.Context) (*PowerRentalState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PowerRentalStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PowerRentalStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PowerRentalState entities.
func (m *PowerRentalStateMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PowerRentalStateMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PowerRentalStateMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PowerRentalState.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PowerRentalStateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PowerRentalStateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PowerRentalStateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PowerRentalStateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PowerRentalStateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PowerRentalStateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PowerRentalStateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PowerRentalStateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PowerRentalStateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PowerRentalStateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PowerRentalStateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PowerRentalStateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetEntID sets the "ent_id" field.
func (m *PowerRentalStateMutation) SetEntID(u uuid.UUID) {
	m.ent_id = &u
}

// EntID returns the value of the "ent_id" field in the mutation.
func (m *PowerRentalStateMutation) EntID() (r uuid.UUID, exists bool) {
	v := m.ent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntID returns the old "ent_id" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldEntID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntID: %w", err)
	}
	return oldValue.EntID, nil
}

// ResetEntID resets all changes to the "ent_id" field.
func (m *PowerRentalStateMutation) ResetEntID() {
	m.ent_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PowerRentalStateMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PowerRentalStateMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *PowerRentalStateMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[powerrentalstate.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *PowerRentalStateMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PowerRentalStateMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, powerrentalstate.FieldOrderID)
}

// SetCancelState sets the "cancel_state" field.
func (m *PowerRentalStateMutation) SetCancelState(s string) {
	m.cancel_state = &s
}

// CancelState returns the value of the "cancel_state" field in the mutation.
func (m *PowerRentalStateMutation) CancelState() (r string, exists bool) {
	v := m.cancel_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelState returns the old "cancel_state" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldCancelState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelState: %w", err)
	}
	return oldValue.CancelState, nil
}

// ClearCancelState clears the value of the "cancel_state" field.
func (m *PowerRentalStateMutation) ClearCancelState() {
	m.cancel_state = nil
	m.clearedFields[powerrentalstate.FieldCancelState] = struct{}{}
}

// CancelStateCleared returns if the "cancel_state" field was cleared in this mutation.
func (m *PowerRentalStateMutation) CancelStateCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldCancelState]
	return ok
}

// ResetCancelState resets all changes to the "cancel_state" field.
func (m *PowerRentalStateMutation) ResetCancelState() {
	m.cancel_state = nil
	delete(m.clearedFields, powerrentalstate.FieldCancelState)
}

// SetEndAt sets the "end_at" field.
func (m *PowerRentalStateMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *PowerRentalStateMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *PowerRentalStateMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *PowerRentalStateMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[powerrentalstate.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *PowerRentalStateMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *PowerRentalStateMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, powerrentalstate.FieldEndAt)
}

// SetPaidAt sets the "paid_at" field.
func (m *PowerRentalStateMutation) SetPaidAt(u uint32) {
	m.paid_at = &u
	m.addpaid_at = nil
}

// PaidAt returns the value of the "paid_at" field in the mutation.
func (m *PowerRentalStateMutation) PaidAt() (r uint32, exists bool) {
	v := m.paid_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPaidAt returns the old "paid_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldPaidAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaidAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaidAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaidAt: %w", err)
	}
	return oldValue.PaidAt, nil
}

// AddPaidAt adds u to the "paid_at" field.
func (m *PowerRentalStateMutation) AddPaidAt(u int32) {
	if m.addpaid_at != nil {
		*m.addpaid_at += u
	} else {
		m.addpaid_at = &u
	}
}

// AddedPaidAt returns the value that was added to the "paid_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedPaidAt() (r int32, exists bool) {
	v := m.addpaid_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaidAt clears the value of the "paid_at" field.
func (m *PowerRentalStateMutation) ClearPaidAt() {
	m.paid_at = nil
	m.addpaid_at = nil
	m.clearedFields[powerrentalstate.FieldPaidAt] = struct{}{}
}

// PaidAtCleared returns if the "paid_at" field was cleared in this mutation.
func (m *PowerRentalStateMutation) PaidAtCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldPaidAt]
	return ok
}

// ResetPaidAt resets all changes to the "paid_at" field.
func (m *PowerRentalStateMutation) ResetPaidAt() {
	m.paid_at = nil
	m.addpaid_at = nil
	delete(m.clearedFields, powerrentalstate.FieldPaidAt)
}

// SetUserSetPaid sets the "user_set_paid" field.
func (m *PowerRentalStateMutation) SetUserSetPaid(b bool) {
	m.user_set_paid = &b
}

// UserSetPaid returns the value of the "user_set_paid" field in the mutation.
func (m *PowerRentalStateMutation) UserSetPaid() (r bool, exists bool) {
	v := m.user_set_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetPaid returns the old "user_set_paid" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldUserSetPaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetPaid: %w", err)
	}
	return oldValue.UserSetPaid, nil
}

// ClearUserSetPaid clears the value of the "user_set_paid" field.
func (m *PowerRentalStateMutation) ClearUserSetPaid() {
	m.user_set_paid = nil
	m.clearedFields[powerrentalstate.FieldUserSetPaid] = struct{}{}
}

// UserSetPaidCleared returns if the "user_set_paid" field was cleared in this mutation.
func (m *PowerRentalStateMutation) UserSetPaidCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldUserSetPaid]
	return ok
}

// ResetUserSetPaid resets all changes to the "user_set_paid" field.
func (m *PowerRentalStateMutation) ResetUserSetPaid() {
	m.user_set_paid = nil
	delete(m.clearedFields, powerrentalstate.FieldUserSetPaid)
}

// SetUserSetCanceled sets the "user_set_canceled" field.
func (m *PowerRentalStateMutation) SetUserSetCanceled(b bool) {
	m.user_set_canceled = &b
}

// UserSetCanceled returns the value of the "user_set_canceled" field in the mutation.
func (m *PowerRentalStateMutation) UserSetCanceled() (r bool, exists bool) {
	v := m.user_set_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSetCanceled returns the old "user_set_canceled" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldUserSetCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSetCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSetCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSetCanceled: %w", err)
	}
	return oldValue.UserSetCanceled, nil
}

// ClearUserSetCanceled clears the value of the "user_set_canceled" field.
func (m *PowerRentalStateMutation) ClearUserSetCanceled() {
	m.user_set_canceled = nil
	m.clearedFields[powerrentalstate.FieldUserSetCanceled] = struct{}{}
}

// UserSetCanceledCleared returns if the "user_set_canceled" field was cleared in this mutation.
func (m *PowerRentalStateMutation) UserSetCanceledCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldUserSetCanceled]
	return ok
}

// ResetUserSetCanceled resets all changes to the "user_set_canceled" field.
func (m *PowerRentalStateMutation) ResetUserSetCanceled() {
	m.user_set_canceled = nil
	delete(m.clearedFields, powerrentalstate.FieldUserSetCanceled)
}

// SetAdminSetCanceled sets the "admin_set_canceled" field.
func (m *PowerRentalStateMutation) SetAdminSetCanceled(b bool) {
	m.admin_set_canceled = &b
}

// AdminSetCanceled returns the value of the "admin_set_canceled" field in the mutation.
func (m *PowerRentalStateMutation) AdminSetCanceled() (r bool, exists bool) {
	v := m.admin_set_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldAdminSetCanceled returns the old "admin_set_canceled" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldAdminSetCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdminSetCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdminSetCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdminSetCanceled: %w", err)
	}
	return oldValue.AdminSetCanceled, nil
}

// ClearAdminSetCanceled clears the value of the "admin_set_canceled" field.
func (m *PowerRentalStateMutation) ClearAdminSetCanceled() {
	m.admin_set_canceled = nil
	m.clearedFields[powerrentalstate.FieldAdminSetCanceled] = struct{}{}
}

// AdminSetCanceledCleared returns if the "admin_set_canceled" field was cleared in this mutation.
func (m *PowerRentalStateMutation) AdminSetCanceledCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldAdminSetCanceled]
	return ok
}

// ResetAdminSetCanceled resets all changes to the "admin_set_canceled" field.
func (m *PowerRentalStateMutation) ResetAdminSetCanceled() {
	m.admin_set_canceled = nil
	delete(m.clearedFields, powerrentalstate.FieldAdminSetCanceled)
}

// SetPaymentState sets the "payment_state" field.
func (m *PowerRentalStateMutation) SetPaymentState(s string) {
	m.payment_state = &s
}

// PaymentState returns the value of the "payment_state" field in the mutation.
func (m *PowerRentalStateMutation) PaymentState() (r string, exists bool) {
	v := m.payment_state
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentState returns the old "payment_state" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldPaymentState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentState: %w", err)
	}
	return oldValue.PaymentState, nil
}

// ClearPaymentState clears the value of the "payment_state" field.
func (m *PowerRentalStateMutation) ClearPaymentState() {
	m.payment_state = nil
	m.clearedFields[powerrentalstate.FieldPaymentState] = struct{}{}
}

// PaymentStateCleared returns if the "payment_state" field was cleared in this mutation.
func (m *PowerRentalStateMutation) PaymentStateCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldPaymentState]
	return ok
}

// ResetPaymentState resets all changes to the "payment_state" field.
func (m *PowerRentalStateMutation) ResetPaymentState() {
	m.payment_state = nil
	delete(m.clearedFields, powerrentalstate.FieldPaymentState)
}

// SetOutofgasHours sets the "outofgas_hours" field.
func (m *PowerRentalStateMutation) SetOutofgasHours(u uint32) {
	m.outofgas_hours = &u
	m.addoutofgas_hours = nil
}

// OutofgasHours returns the value of the "outofgas_hours" field in the mutation.
func (m *PowerRentalStateMutation) OutofgasHours() (r uint32, exists bool) {
	v := m.outofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldOutofgasHours returns the old "outofgas_hours" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldOutofgasHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutofgasHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutofgasHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutofgasHours: %w", err)
	}
	return oldValue.OutofgasHours, nil
}

// AddOutofgasHours adds u to the "outofgas_hours" field.
func (m *PowerRentalStateMutation) AddOutofgasHours(u int32) {
	if m.addoutofgas_hours != nil {
		*m.addoutofgas_hours += u
	} else {
		m.addoutofgas_hours = &u
	}
}

// AddedOutofgasHours returns the value that was added to the "outofgas_hours" field in this mutation.
func (m *PowerRentalStateMutation) AddedOutofgasHours() (r int32, exists bool) {
	v := m.addoutofgas_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutofgasHours clears the value of the "outofgas_hours" field.
func (m *PowerRentalStateMutation) ClearOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	m.clearedFields[powerrentalstate.FieldOutofgasHours] = struct{}{}
}

// OutofgasHoursCleared returns if the "outofgas_hours" field was cleared in this mutation.
func (m *PowerRentalStateMutation) OutofgasHoursCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldOutofgasHours]
	return ok
}

// ResetOutofgasHours resets all changes to the "outofgas_hours" field.
func (m *PowerRentalStateMutation) ResetOutofgasHours() {
	m.outofgas_hours = nil
	m.addoutofgas_hours = nil
	delete(m.clearedFields, powerrentalstate.FieldOutofgasHours)
}

// SetCompensateHours sets the "compensate_hours" field.
func (m *PowerRentalStateMutation) SetCompensateHours(u uint32) {
	m.compensate_hours = &u
	m.addcompensate_hours = nil
}

// CompensateHours returns the value of the "compensate_hours" field in the mutation.
func (m *PowerRentalStateMutation) CompensateHours() (r uint32, exists bool) {
	v := m.compensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateHours returns the old "compensate_hours" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldCompensateHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateHours: %w", err)
	}
	return oldValue.CompensateHours, nil
}

// AddCompensateHours adds u to the "compensate_hours" field.
func (m *PowerRentalStateMutation) AddCompensateHours(u int32) {
	if m.addcompensate_hours != nil {
		*m.addcompensate_hours += u
	} else {
		m.addcompensate_hours = &u
	}
}

// AddedCompensateHours returns the value that was added to the "compensate_hours" field in this mutation.
func (m *PowerRentalStateMutation) AddedCompensateHours() (r int32, exists bool) {
	v := m.addcompensate_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearCompensateHours clears the value of the "compensate_hours" field.
func (m *PowerRentalStateMutation) ClearCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	m.clearedFields[powerrentalstate.FieldCompensateHours] = struct{}{}
}

// CompensateHoursCleared returns if the "compensate_hours" field was cleared in this mutation.
func (m *PowerRentalStateMutation) CompensateHoursCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldCompensateHours]
	return ok
}

// ResetCompensateHours resets all changes to the "compensate_hours" field.
func (m *PowerRentalStateMutation) ResetCompensateHours() {
	m.compensate_hours = nil
	m.addcompensate_hours = nil
	delete(m.clearedFields, powerrentalstate.FieldCompensateHours)
}

// SetRenewState sets the "renew_state" field.
func (m *PowerRentalStateMutation) SetRenewState(s string) {
	m.renew_state = &s
}

// RenewState returns the value of the "renew_state" field in the mutation.
func (m *PowerRentalStateMutation) RenewState() (r string, exists bool) {
	v := m.renew_state
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewState returns the old "renew_state" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldRenewState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewState: %w", err)
	}
	return oldValue.RenewState, nil
}

// ClearRenewState clears the value of the "renew_state" field.
func (m *PowerRentalStateMutation) ClearRenewState() {
	m.renew_state = nil
	m.clearedFields[powerrentalstate.FieldRenewState] = struct{}{}
}

// RenewStateCleared returns if the "renew_state" field was cleared in this mutation.
func (m *PowerRentalStateMutation) RenewStateCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldRenewState]
	return ok
}

// ResetRenewState resets all changes to the "renew_state" field.
func (m *PowerRentalStateMutation) ResetRenewState() {
	m.renew_state = nil
	delete(m.clearedFields, powerrentalstate.FieldRenewState)
}

// SetRenewNotifyAt sets the "renew_notify_at" field.
func (m *PowerRentalStateMutation) SetRenewNotifyAt(u uint32) {
	m.renew_notify_at = &u
	m.addrenew_notify_at = nil
}

// RenewNotifyAt returns the value of the "renew_notify_at" field in the mutation.
func (m *PowerRentalStateMutation) RenewNotifyAt() (r uint32, exists bool) {
	v := m.renew_notify_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewNotifyAt returns the old "renew_notify_at" field's value of the PowerRentalState entity.
// If the PowerRentalState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PowerRentalStateMutation) OldRenewNotifyAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewNotifyAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewNotifyAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewNotifyAt: %w", err)
	}
	return oldValue.RenewNotifyAt, nil
}

// AddRenewNotifyAt adds u to the "renew_notify_at" field.
func (m *PowerRentalStateMutation) AddRenewNotifyAt(u int32) {
	if m.addrenew_notify_at != nil {
		*m.addrenew_notify_at += u
	} else {
		m.addrenew_notify_at = &u
	}
}

// AddedRenewNotifyAt returns the value that was added to the "renew_notify_at" field in this mutation.
func (m *PowerRentalStateMutation) AddedRenewNotifyAt() (r int32, exists bool) {
	v := m.addrenew_notify_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearRenewNotifyAt clears the value of the "renew_notify_at" field.
func (m *PowerRentalStateMutation) ClearRenewNotifyAt() {
	m.renew_notify_at = nil
	m.addrenew_notify_at = nil
	m.clearedFields[powerrentalstate.FieldRenewNotifyAt] = struct{}{}
}

// RenewNotifyAtCleared returns if the "renew_notify_at" field was cleared in this mutation.
func (m *PowerRentalStateMutation) RenewNotifyAtCleared() bool {
	_, ok := m.clearedFields[powerrentalstate.FieldRenewNotifyAt]
	return ok
}

// ResetRenewNotifyAt resets all changes to the "renew_notify_at" field.
func (m *PowerRentalStateMutation) ResetRenewNotifyAt() {
	m.renew_notify_at = nil
	m.addrenew_notify_at = nil
	delete(m.clearedFields, powerrentalstate.FieldRenewNotifyAt)
}

// Where appends a list predicates to the PowerRentalStateMutation builder.
func (m *PowerRentalStateMutation) Where(ps ...predicate.PowerRentalState) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PowerRentalStateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PowerRentalState).
func (m *PowerRentalStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PowerRentalStateMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, powerrentalstate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, powerrentalstate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, powerrentalstate.FieldDeletedAt)
	}
	if m.ent_id != nil {
		fields = append(fields, powerrentalstate.FieldEntID)
	}
	if m.order_id != nil {
		fields = append(fields, powerrentalstate.FieldOrderID)
	}
	if m.cancel_state != nil {
		fields = append(fields, powerrentalstate.FieldCancelState)
	}
	if m.end_at != nil {
		fields = append(fields, powerrentalstate.FieldEndAt)
	}
	if m.paid_at != nil {
		fields = append(fields, powerrentalstate.FieldPaidAt)
	}
	if m.user_set_paid != nil {
		fields = append(fields, powerrentalstate.FieldUserSetPaid)
	}
	if m.user_set_canceled != nil {
		fields = append(fields, powerrentalstate.FieldUserSetCanceled)
	}
	if m.admin_set_canceled != nil {
		fields = append(fields, powerrentalstate.FieldAdminSetCanceled)
	}
	if m.payment_state != nil {
		fields = append(fields, powerrentalstate.FieldPaymentState)
	}
	if m.outofgas_hours != nil {
		fields = append(fields, powerrentalstate.FieldOutofgasHours)
	}
	if m.compensate_hours != nil {
		fields = append(fields, powerrentalstate.FieldCompensateHours)
	}
	if m.renew_state != nil {
		fields = append(fields, powerrentalstate.FieldRenewState)
	}
	if m.renew_notify_at != nil {
		fields = append(fields, powerrentalstate.FieldRenewNotifyAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PowerRentalStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		return m.CreatedAt()
	case powerrentalstate.FieldUpdatedAt:
		return m.UpdatedAt()
	case powerrentalstate.FieldDeletedAt:
		return m.DeletedAt()
	case powerrentalstate.FieldEntID:
		return m.EntID()
	case powerrentalstate.FieldOrderID:
		return m.OrderID()
	case powerrentalstate.FieldCancelState:
		return m.CancelState()
	case powerrentalstate.FieldEndAt:
		return m.EndAt()
	case powerrentalstate.FieldPaidAt:
		return m.PaidAt()
	case powerrentalstate.FieldUserSetPaid:
		return m.UserSetPaid()
	case powerrentalstate.FieldUserSetCanceled:
		return m.UserSetCanceled()
	case powerrentalstate.FieldAdminSetCanceled:
		return m.AdminSetCanceled()
	case powerrentalstate.FieldPaymentState:
		return m.PaymentState()
	case powerrentalstate.FieldOutofgasHours:
		return m.OutofgasHours()
	case powerrentalstate.FieldCompensateHours:
		return m.CompensateHours()
	case powerrentalstate.FieldRenewState:
		return m.RenewState()
	case powerrentalstate.FieldRenewNotifyAt:
		return m.RenewNotifyAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PowerRentalStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case powerrentalstate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case powerrentalstate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case powerrentalstate.FieldEntID:
		return m.OldEntID(ctx)
	case powerrentalstate.FieldOrderID:
		return m.OldOrderID(ctx)
	case powerrentalstate.FieldCancelState:
		return m.OldCancelState(ctx)
	case powerrentalstate.FieldEndAt:
		return m.OldEndAt(ctx)
	case powerrentalstate.FieldPaidAt:
		return m.OldPaidAt(ctx)
	case powerrentalstate.FieldUserSetPaid:
		return m.OldUserSetPaid(ctx)
	case powerrentalstate.FieldUserSetCanceled:
		return m.OldUserSetCanceled(ctx)
	case powerrentalstate.FieldAdminSetCanceled:
		return m.OldAdminSetCanceled(ctx)
	case powerrentalstate.FieldPaymentState:
		return m.OldPaymentState(ctx)
	case powerrentalstate.FieldOutofgasHours:
		return m.OldOutofgasHours(ctx)
	case powerrentalstate.FieldCompensateHours:
		return m.OldCompensateHours(ctx)
	case powerrentalstate.FieldRenewState:
		return m.OldRenewState(ctx)
	case powerrentalstate.FieldRenewNotifyAt:
		return m.OldRenewNotifyAt(ctx)
	}
	return nil, fmt.Errorf("unknown PowerRentalState field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PowerRentalStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case powerrentalstate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case powerrentalstate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case powerrentalstate.FieldEntID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntID(v)
		return nil
	case powerrentalstate.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case powerrentalstate.FieldCancelState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelState(v)
		return nil
	case powerrentalstate.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case powerrentalstate.FieldPaidAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaidAt(v)
		return nil
	case powerrentalstate.FieldUserSetPaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetPaid(v)
		return nil
	case powerrentalstate.FieldUserSetCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSetCanceled(v)
		return nil
	case powerrentalstate.FieldAdminSetCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdminSetCanceled(v)
		return nil
	case powerrentalstate.FieldPaymentState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentState(v)
		return nil
	case powerrentalstate.FieldOutofgasHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutofgasHours(v)
		return nil
	case powerrentalstate.FieldCompensateHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateHours(v)
		return nil
	case powerrentalstate.FieldRenewState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewState(v)
		return nil
	case powerrentalstate.FieldRenewNotifyAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewNotifyAt(v)
		return nil
	}
	return fmt.Errorf("unknown PowerRentalState field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PowerRentalStateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, powerrentalstate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, powerrentalstate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, powerrentalstate.FieldDeletedAt)
	}
	if m.addend_at != nil {
		fields = append(fields, powerrentalstate.FieldEndAt)
	}
	if m.addpaid_at != nil {
		fields = append(fields, powerrentalstate.FieldPaidAt)
	}
	if m.addoutofgas_hours != nil {
		fields = append(fields, powerrentalstate.FieldOutofgasHours)
	}
	if m.addcompensate_hours != nil {
		fields = append(fields, powerrentalstate.FieldCompensateHours)
	}
	if m.addrenew_notify_at != nil {
		fields = append(fields, powerrentalstate.FieldRenewNotifyAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PowerRentalStateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case powerrentalstate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case powerrentalstate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case powerrentalstate.FieldEndAt:
		return m.AddedEndAt()
	case powerrentalstate.FieldPaidAt:
		return m.AddedPaidAt()
	case powerrentalstate.FieldOutofgasHours:
		return m.AddedOutofgasHours()
	case powerrentalstate.FieldCompensateHours:
		return m.AddedCompensateHours()
	case powerrentalstate.FieldRenewNotifyAt:
		return m.AddedRenewNotifyAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PowerRentalStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case powerrentalstate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case powerrentalstate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case powerrentalstate.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	case powerrentalstate.FieldPaidAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaidAt(v)
		return nil
	case powerrentalstate.FieldOutofgasHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutofgasHours(v)
		return nil
	case powerrentalstate.FieldCompensateHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompensateHours(v)
		return nil
	case powerrentalstate.FieldRenewNotifyAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRenewNotifyAt(v)
		return nil
	}
	return fmt.Errorf("unknown PowerRentalState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PowerRentalStateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(powerrentalstate.FieldOrderID) {
		fields = append(fields, powerrentalstate.FieldOrderID)
	}
	if m.FieldCleared(powerrentalstate.FieldCancelState) {
		fields = append(fields, powerrentalstate.FieldCancelState)
	}
	if m.FieldCleared(powerrentalstate.FieldEndAt) {
		fields = append(fields, powerrentalstate.FieldEndAt)
	}
	if m.FieldCleared(powerrentalstate.FieldPaidAt) {
		fields = append(fields, powerrentalstate.FieldPaidAt)
	}
	if m.FieldCleared(powerrentalstate.FieldUserSetPaid) {
		fields = append(fields, powerrentalstate.FieldUserSetPaid)
	}
	if m.FieldCleared(powerrentalstate.FieldUserSetCanceled) {
		fields = append(fields, powerrentalstate.FieldUserSetCanceled)
	}
	if m.FieldCleared(powerrentalstate.FieldAdminSetCanceled) {
		fields = append(fields, powerrentalstate.FieldAdminSetCanceled)
	}
	if m.FieldCleared(powerrentalstate.FieldPaymentState) {
		fields = append(fields, powerrentalstate.FieldPaymentState)
	}
	if m.FieldCleared(powerrentalstate.FieldOutofgasHours) {
		fields = append(fields, powerrentalstate.FieldOutofgasHours)
	}
	if m.FieldCleared(powerrentalstate.FieldCompensateHours) {
		fields = append(fields, powerrentalstate.FieldCompensateHours)
	}
	if m.FieldCleared(powerrentalstate.FieldRenewState) {
		fields = append(fields, powerrentalstate.FieldRenewState)
	}
	if m.FieldCleared(powerrentalstate.FieldRenewNotifyAt) {
		fields = append(fields, powerrentalstate.FieldRenewNotifyAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PowerRentalStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PowerRentalStateMutation) ClearField(name string) error {
	switch name {
	case powerrentalstate.FieldOrderID:
		m.ClearOrderID()
		return nil
	case powerrentalstate.FieldCancelState:
		m.ClearCancelState()
		return nil
	case powerrentalstate.FieldEndAt:
		m.ClearEndAt()
		return nil
	case powerrentalstate.FieldPaidAt:
		m.ClearPaidAt()
		return nil
	case powerrentalstate.FieldUserSetPaid:
		m.ClearUserSetPaid()
		return nil
	case powerrentalstate.FieldUserSetCanceled:
		m.ClearUserSetCanceled()
		return nil
	case powerrentalstate.FieldAdminSetCanceled:
		m.ClearAdminSetCanceled()
		return nil
	case powerrentalstate.FieldPaymentState:
		m.ClearPaymentState()
		return nil
	case powerrentalstate.FieldOutofgasHours:
		m.ClearOutofgasHours()
		return nil
	case powerrentalstate.FieldCompensateHours:
		m.ClearCompensateHours()
		return nil
	case powerrentalstate.FieldRenewState:
		m.ClearRenewState()
		return nil
	case powerrentalstate.FieldRenewNotifyAt:
		m.ClearRenewNotifyAt()
		return nil
	}
	return fmt.Errorf("unknown PowerRentalState nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PowerRentalStateMutation) ResetField(name string) error {
	switch name {
	case powerrentalstate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case powerrentalstate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case powerrentalstate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case powerrentalstate.FieldEntID:
		m.ResetEntID()
		return nil
	case powerrentalstate.FieldOrderID:
		m.ResetOrderID()
		return nil
	case powerrentalstate.FieldCancelState:
		m.ResetCancelState()
		return nil
	case powerrentalstate.FieldEndAt:
		m.ResetEndAt()
		return nil
	case powerrentalstate.FieldPaidAt:
		m.ResetPaidAt()
		return nil
	case powerrentalstate.FieldUserSetPaid:
		m.ResetUserSetPaid()
		return nil
	case powerrentalstate.FieldUserSetCanceled:
		m.ResetUserSetCanceled()
		return nil
	case powerrentalstate.FieldAdminSetCanceled:
		m.ResetAdminSetCanceled()
		return nil
	case powerrentalstate.FieldPaymentState:
		m.ResetPaymentState()
		return nil
	case powerrentalstate.FieldOutofgasHours:
		m.ResetOutofgasHours()
		return nil
	case powerrentalstate.FieldCompensateHours:
		m.ResetCompensateHours()
		return nil
	case powerrentalstate.FieldRenewState:
		m.ResetRenewState()
		return nil
	case powerrentalstate.FieldRenewNotifyAt:
		m.ResetRenewNotifyAt()
		return nil
	}
	return fmt.Errorf("unknown PowerRentalState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PowerRentalStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PowerRentalStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PowerRentalStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PowerRentalStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PowerRentalStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PowerRentalStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PowerRentalStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PowerRentalState unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PowerRentalStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PowerRentalState edge %s", name)
}
