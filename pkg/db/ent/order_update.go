// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/message/npool/order/mw/v1/order"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	entorder "github.com/NpoolPlatform/order-middleware/pkg/db/ent/order"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(u uint32) *OrderUpdate {
	ou.mutation.ResetCreatedAt()
	ou.mutation.SetCreatedAt(u)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(u *uint32) *OrderUpdate {
	if u != nil {
		ou.SetCreatedAt(*u)
	}
	return ou
}

// AddCreatedAt adds u to the "created_at" field.
func (ou *OrderUpdate) AddCreatedAt(u int32) *OrderUpdate {
	ou.mutation.AddCreatedAt(u)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(u uint32) *OrderUpdate {
	ou.mutation.ResetUpdatedAt()
	ou.mutation.SetUpdatedAt(u)
	return ou
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ou *OrderUpdate) AddUpdatedAt(u int32) *OrderUpdate {
	ou.mutation.AddUpdatedAt(u)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrderUpdate) SetDeletedAt(u uint32) *OrderUpdate {
	ou.mutation.ResetDeletedAt()
	ou.mutation.SetDeletedAt(u)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeletedAt(u *uint32) *OrderUpdate {
	if u != nil {
		ou.SetDeletedAt(*u)
	}
	return ou
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ou *OrderUpdate) AddDeletedAt(u int32) *OrderUpdate {
	ou.mutation.AddDeletedAt(u)
	return ou
}

// SetEntID sets the "ent_id" field.
func (ou *OrderUpdate) SetEntID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetEntID(u)
	return ou
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEntID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetEntID(*u)
	}
	return ou
}

// SetAppID sets the "app_id" field.
func (ou *OrderUpdate) SetAppID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetAppID(u)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetUserID(u)
	return ou
}

// SetGoodID sets the "good_id" field.
func (ou *OrderUpdate) SetGoodID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetGoodID(u)
	return ou
}

// SetAppGoodID sets the "app_good_id" field.
func (ou *OrderUpdate) SetAppGoodID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetAppGoodID(u)
	return ou
}

// SetPaymentID sets the "payment_id" field.
func (ou *OrderUpdate) SetPaymentID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetPaymentID(u)
	return ou
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetPaymentID(*u)
	}
	return ou
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ou *OrderUpdate) ClearPaymentID() *OrderUpdate {
	ou.mutation.ClearPaymentID()
	return ou
}

// SetParentOrderID sets the "parent_order_id" field.
func (ou *OrderUpdate) SetParentOrderID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetParentOrderID(u)
	return ou
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableParentOrderID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetParentOrderID(*u)
	}
	return ou
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (ou *OrderUpdate) ClearParentOrderID() *OrderUpdate {
	ou.mutation.ClearParentOrderID()
	return ou
}

// SetUnitsV1 sets the "units_v1" field.
func (ou *OrderUpdate) SetUnitsV1(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetUnitsV1(d)
	return ou
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUnitsV1(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetUnitsV1(*d)
	}
	return ou
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (ou *OrderUpdate) ClearUnitsV1() *OrderUpdate {
	ou.mutation.ClearUnitsV1()
	return ou
}

// SetGoodValue sets the "good_value" field.
func (ou *OrderUpdate) SetGoodValue(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetGoodValue(d)
	return ou
}

// SetNillableGoodValue sets the "good_value" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableGoodValue(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetGoodValue(*d)
	}
	return ou
}

// ClearGoodValue clears the value of the "good_value" field.
func (ou *OrderUpdate) ClearGoodValue() *OrderUpdate {
	ou.mutation.ClearGoodValue()
	return ou
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (ou *OrderUpdate) SetGoodValueUsd(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetGoodValueUsd(d)
	return ou
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableGoodValueUsd(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetGoodValueUsd(*d)
	}
	return ou
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (ou *OrderUpdate) ClearGoodValueUsd() *OrderUpdate {
	ou.mutation.ClearGoodValueUsd()
	return ou
}

// SetPaymentAmount sets the "payment_amount" field.
func (ou *OrderUpdate) SetPaymentAmount(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetPaymentAmount(d)
	return ou
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentAmount(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetPaymentAmount(*d)
	}
	return ou
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (ou *OrderUpdate) ClearPaymentAmount() *OrderUpdate {
	ou.mutation.ClearPaymentAmount()
	return ou
}

// SetDiscountAmount sets the "discount_amount" field.
func (ou *OrderUpdate) SetDiscountAmount(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetDiscountAmount(d)
	return ou
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDiscountAmount(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetDiscountAmount(*d)
	}
	return ou
}

// ClearDiscountAmount clears the value of the "discount_amount" field.
func (ou *OrderUpdate) ClearDiscountAmount() *OrderUpdate {
	ou.mutation.ClearDiscountAmount()
	return ou
}

// SetPromotionID sets the "promotion_id" field.
func (ou *OrderUpdate) SetPromotionID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetPromotionID(u)
	return ou
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePromotionID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetPromotionID(*u)
	}
	return ou
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (ou *OrderUpdate) ClearPromotionID() *OrderUpdate {
	ou.mutation.ClearPromotionID()
	return ou
}

// SetDuration sets the "duration" field.
func (ou *OrderUpdate) SetDuration(u uint32) *OrderUpdate {
	ou.mutation.ResetDuration()
	ou.mutation.SetDuration(u)
	return ou
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDuration(u *uint32) *OrderUpdate {
	if u != nil {
		ou.SetDuration(*u)
	}
	return ou
}

// AddDuration adds u to the "duration" field.
func (ou *OrderUpdate) AddDuration(u int32) *OrderUpdate {
	ou.mutation.AddDuration(u)
	return ou
}

// ClearDuration clears the value of the "duration" field.
func (ou *OrderUpdate) ClearDuration() *OrderUpdate {
	ou.mutation.ClearDuration()
	return ou
}

// SetOrderType sets the "order_type" field.
func (ou *OrderUpdate) SetOrderType(s string) *OrderUpdate {
	ou.mutation.SetOrderType(s)
	return ou
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderType(*s)
	}
	return ou
}

// ClearOrderType clears the value of the "order_type" field.
func (ou *OrderUpdate) ClearOrderType() *OrderUpdate {
	ou.mutation.ClearOrderType()
	return ou
}

// SetInvestmentType sets the "investment_type" field.
func (ou *OrderUpdate) SetInvestmentType(s string) *OrderUpdate {
	ou.mutation.SetInvestmentType(s)
	return ou
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableInvestmentType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetInvestmentType(*s)
	}
	return ou
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (ou *OrderUpdate) ClearInvestmentType() *OrderUpdate {
	ou.mutation.ClearInvestmentType()
	return ou
}

// SetCouponIds sets the "coupon_ids" field.
func (ou *OrderUpdate) SetCouponIds(u []uuid.UUID) *OrderUpdate {
	ou.mutation.SetCouponIds(u)
	return ou
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (ou *OrderUpdate) ClearCouponIds() *OrderUpdate {
	ou.mutation.ClearCouponIds()
	return ou
}

// SetPaymentType sets the "payment_type" field.
func (ou *OrderUpdate) SetPaymentType(s string) *OrderUpdate {
	ou.mutation.SetPaymentType(s)
	return ou
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentType(*s)
	}
	return ou
}

// ClearPaymentType clears the value of the "payment_type" field.
func (ou *OrderUpdate) ClearPaymentType() *OrderUpdate {
	ou.mutation.ClearPaymentType()
	return ou
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ou *OrderUpdate) SetCoinTypeID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCoinTypeID(u)
	return ou
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (ou *OrderUpdate) SetPaymentCoinTypeID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetPaymentCoinTypeID(u)
	return ou
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetPaymentCoinTypeID(*u)
	}
	return ou
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (ou *OrderUpdate) ClearPaymentCoinTypeID() *OrderUpdate {
	ou.mutation.ClearPaymentCoinTypeID()
	return ou
}

// SetTransferAmount sets the "transfer_amount" field.
func (ou *OrderUpdate) SetTransferAmount(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetTransferAmount(d)
	return ou
}

// SetNillableTransferAmount sets the "transfer_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTransferAmount(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetTransferAmount(*d)
	}
	return ou
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (ou *OrderUpdate) ClearTransferAmount() *OrderUpdate {
	ou.mutation.ClearTransferAmount()
	return ou
}

// SetBalanceAmount sets the "balance_amount" field.
func (ou *OrderUpdate) SetBalanceAmount(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetBalanceAmount(d)
	return ou
}

// SetNillableBalanceAmount sets the "balance_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBalanceAmount(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetBalanceAmount(*d)
	}
	return ou
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (ou *OrderUpdate) ClearBalanceAmount() *OrderUpdate {
	ou.mutation.ClearBalanceAmount()
	return ou
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (ou *OrderUpdate) SetCoinUsdCurrency(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetCoinUsdCurrency(d)
	return ou
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCoinUsdCurrency(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetCoinUsdCurrency(*d)
	}
	return ou
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (ou *OrderUpdate) ClearCoinUsdCurrency() *OrderUpdate {
	ou.mutation.ClearCoinUsdCurrency()
	return ou
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (ou *OrderUpdate) SetLocalCoinUsdCurrency(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetLocalCoinUsdCurrency(d)
	return ou
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetLocalCoinUsdCurrency(*d)
	}
	return ou
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (ou *OrderUpdate) ClearLocalCoinUsdCurrency() *OrderUpdate {
	ou.mutation.ClearLocalCoinUsdCurrency()
	return ou
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (ou *OrderUpdate) SetLiveCoinUsdCurrency(d decimal.Decimal) *OrderUpdate {
	ou.mutation.SetLiveCoinUsdCurrency(d)
	return ou
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *OrderUpdate {
	if d != nil {
		ou.SetLiveCoinUsdCurrency(*d)
	}
	return ou
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (ou *OrderUpdate) ClearLiveCoinUsdCurrency() *OrderUpdate {
	ou.mutation.ClearLiveCoinUsdCurrency()
	return ou
}

<<<<<<< HEAD
// SetSimulate sets the "simulate" field.
func (ou *OrderUpdate) SetSimulate(b bool) *OrderUpdate {
	ou.mutation.SetSimulate(b)
	return ou
}

// SetNillableSimulate sets the "simulate" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSimulate(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetSimulate(*b)
=======
// SetCreateMethod sets the "create_method" field.
func (ou *OrderUpdate) SetCreateMethod(s string) *OrderUpdate {
	ou.mutation.SetCreateMethod(s)
	return ou
}

// SetNillableCreateMethod sets the "create_method" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreateMethod(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCreateMethod(*s)
>>>>>>> d5fa78b087f47958b427ed03d6d0576f484281c6
	}
	return ou
}

<<<<<<< HEAD
// ClearSimulate clears the value of the "simulate" field.
func (ou *OrderUpdate) ClearSimulate() *OrderUpdate {
	ou.mutation.ClearSimulate()
=======
// ClearCreateMethod clears the value of the "create_method" field.
func (ou *OrderUpdate) ClearCreateMethod() *OrderUpdate {
	ou.mutation.ClearCreateMethod()
	return ou
}

// SetMultiPaymentCoins sets the "multi_payment_coins" field.
func (ou *OrderUpdate) SetMultiPaymentCoins(b bool) *OrderUpdate {
	ou.mutation.SetMultiPaymentCoins(b)
	return ou
}

// SetNillableMultiPaymentCoins sets the "multi_payment_coins" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMultiPaymentCoins(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetMultiPaymentCoins(*b)
	}
	return ou
}

// ClearMultiPaymentCoins clears the value of the "multi_payment_coins" field.
func (ou *OrderUpdate) ClearMultiPaymentCoins() *OrderUpdate {
	ou.mutation.ClearMultiPaymentCoins()
	return ou
}

// SetPaymentAmounts sets the "payment_amounts" field.
func (ou *OrderUpdate) SetPaymentAmounts(oa []order.PaymentAmount) *OrderUpdate {
	ou.mutation.SetPaymentAmounts(oa)
	return ou
}

// ClearPaymentAmounts clears the value of the "payment_amounts" field.
func (ou *OrderUpdate) ClearPaymentAmounts() *OrderUpdate {
	ou.mutation.ClearPaymentAmounts()
>>>>>>> d5fa78b087f47958b427ed03d6d0576f484281c6
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if entorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized entorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := entorder.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entorder.Table,
			Columns: entorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: entorder.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDeletedAt,
		})
	}
	if value, ok := ou.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDeletedAt,
		})
	}
	if value, ok := ou.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldEntID,
		})
	}
	if value, ok := ou.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldAppID,
		})
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldUserID,
		})
	}
	if value, ok := ou.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldGoodID,
		})
	}
	if value, ok := ou.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldAppGoodID,
		})
	}
	if value, ok := ou.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPaymentID,
		})
	}
	if ou.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPaymentID,
		})
	}
	if value, ok := ou.mutation.ParentOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldParentOrderID,
		})
	}
	if ou.mutation.ParentOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldParentOrderID,
		})
	}
	if value, ok := ou.mutation.UnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldUnitsV1,
		})
	}
	if ou.mutation.UnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldUnitsV1,
		})
	}
	if value, ok := ou.mutation.GoodValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldGoodValue,
		})
	}
	if ou.mutation.GoodValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldGoodValue,
		})
	}
	if value, ok := ou.mutation.GoodValueUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldGoodValueUsd,
		})
	}
	if ou.mutation.GoodValueUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldGoodValueUsd,
		})
	}
	if value, ok := ou.mutation.PaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldPaymentAmount,
		})
	}
	if ou.mutation.PaymentAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldPaymentAmount,
		})
	}
	if value, ok := ou.mutation.DiscountAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldDiscountAmount,
		})
	}
	if ou.mutation.DiscountAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldDiscountAmount,
		})
	}
	if value, ok := ou.mutation.PromotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPromotionID,
		})
	}
	if ou.mutation.PromotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPromotionID,
		})
	}
	if value, ok := ou.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDuration,
		})
	}
	if value, ok := ou.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDuration,
		})
	}
	if ou.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: entorder.FieldDuration,
		})
	}
	if value, ok := ou.mutation.OrderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldOrderType,
		})
	}
	if ou.mutation.OrderTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldOrderType,
		})
	}
	if value, ok := ou.mutation.InvestmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldInvestmentType,
		})
	}
	if ou.mutation.InvestmentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldInvestmentType,
		})
	}
	if value, ok := ou.mutation.CouponIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entorder.FieldCouponIds,
		})
	}
	if ou.mutation.CouponIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: entorder.FieldCouponIds,
		})
	}
	if value, ok := ou.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldPaymentType,
		})
	}
	if ou.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldPaymentType,
		})
	}
	if value, ok := ou.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldCoinTypeID,
		})
	}
	if value, ok := ou.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPaymentCoinTypeID,
		})
	}
	if ou.mutation.PaymentCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPaymentCoinTypeID,
		})
	}
	if value, ok := ou.mutation.TransferAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldTransferAmount,
		})
	}
	if ou.mutation.TransferAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldTransferAmount,
		})
	}
	if value, ok := ou.mutation.BalanceAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldBalanceAmount,
		})
	}
	if ou.mutation.BalanceAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldBalanceAmount,
		})
	}
	if value, ok := ou.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldCoinUsdCurrency,
		})
	}
	if ou.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldCoinUsdCurrency,
		})
	}
	if value, ok := ou.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldLocalCoinUsdCurrency,
		})
	}
	if ou.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := ou.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldLiveCoinUsdCurrency,
		})
	}
	if ou.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldLiveCoinUsdCurrency,
		})
	}
	if value, ok := ou.mutation.CreateMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldCreateMethod,
		})
	}
	if ou.mutation.CreateMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldCreateMethod,
		})
	}
	if value, ok := ou.mutation.MultiPaymentCoins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entorder.FieldMultiPaymentCoins,
		})
	}
	if ou.mutation.MultiPaymentCoinsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: entorder.FieldMultiPaymentCoins,
		})
	}
	if value, ok := ou.mutation.PaymentAmounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entorder.FieldPaymentAmounts,
		})
	}
	if ou.mutation.PaymentAmountsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: entorder.FieldPaymentAmounts,
		})
	}
	if value, ok := ou.mutation.Simulate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: order.FieldSimulate,
		})
	}
	if ou.mutation.SimulateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: order.FieldSimulate,
		})
	}
	_spec.Modifiers = ou.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(u uint32) *OrderUpdateOne {
	ouo.mutation.ResetCreatedAt()
	ouo.mutation.SetCreatedAt(u)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(u *uint32) *OrderUpdateOne {
	if u != nil {
		ouo.SetCreatedAt(*u)
	}
	return ouo
}

// AddCreatedAt adds u to the "created_at" field.
func (ouo *OrderUpdateOne) AddCreatedAt(u int32) *OrderUpdateOne {
	ouo.mutation.AddCreatedAt(u)
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(u uint32) *OrderUpdateOne {
	ouo.mutation.ResetUpdatedAt()
	ouo.mutation.SetUpdatedAt(u)
	return ouo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ouo *OrderUpdateOne) AddUpdatedAt(u int32) *OrderUpdateOne {
	ouo.mutation.AddUpdatedAt(u)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrderUpdateOne) SetDeletedAt(u uint32) *OrderUpdateOne {
	ouo.mutation.ResetDeletedAt()
	ouo.mutation.SetDeletedAt(u)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeletedAt(u *uint32) *OrderUpdateOne {
	if u != nil {
		ouo.SetDeletedAt(*u)
	}
	return ouo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ouo *OrderUpdateOne) AddDeletedAt(u int32) *OrderUpdateOne {
	ouo.mutation.AddDeletedAt(u)
	return ouo
}

// SetEntID sets the "ent_id" field.
func (ouo *OrderUpdateOne) SetEntID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetEntID(u)
	return ouo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEntID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetEntID(*u)
	}
	return ouo
}

// SetAppID sets the "app_id" field.
func (ouo *OrderUpdateOne) SetAppID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetAppID(u)
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetUserID(u)
	return ouo
}

// SetGoodID sets the "good_id" field.
func (ouo *OrderUpdateOne) SetGoodID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetGoodID(u)
	return ouo
}

// SetAppGoodID sets the "app_good_id" field.
func (ouo *OrderUpdateOne) SetAppGoodID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetAppGoodID(u)
	return ouo
}

// SetPaymentID sets the "payment_id" field.
func (ouo *OrderUpdateOne) SetPaymentID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetPaymentID(u)
	return ouo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetPaymentID(*u)
	}
	return ouo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ouo *OrderUpdateOne) ClearPaymentID() *OrderUpdateOne {
	ouo.mutation.ClearPaymentID()
	return ouo
}

// SetParentOrderID sets the "parent_order_id" field.
func (ouo *OrderUpdateOne) SetParentOrderID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetParentOrderID(u)
	return ouo
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableParentOrderID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetParentOrderID(*u)
	}
	return ouo
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (ouo *OrderUpdateOne) ClearParentOrderID() *OrderUpdateOne {
	ouo.mutation.ClearParentOrderID()
	return ouo
}

// SetUnitsV1 sets the "units_v1" field.
func (ouo *OrderUpdateOne) SetUnitsV1(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetUnitsV1(d)
	return ouo
}

// SetNillableUnitsV1 sets the "units_v1" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUnitsV1(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetUnitsV1(*d)
	}
	return ouo
}

// ClearUnitsV1 clears the value of the "units_v1" field.
func (ouo *OrderUpdateOne) ClearUnitsV1() *OrderUpdateOne {
	ouo.mutation.ClearUnitsV1()
	return ouo
}

// SetGoodValue sets the "good_value" field.
func (ouo *OrderUpdateOne) SetGoodValue(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetGoodValue(d)
	return ouo
}

// SetNillableGoodValue sets the "good_value" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableGoodValue(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetGoodValue(*d)
	}
	return ouo
}

// ClearGoodValue clears the value of the "good_value" field.
func (ouo *OrderUpdateOne) ClearGoodValue() *OrderUpdateOne {
	ouo.mutation.ClearGoodValue()
	return ouo
}

// SetGoodValueUsd sets the "good_value_usd" field.
func (ouo *OrderUpdateOne) SetGoodValueUsd(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetGoodValueUsd(d)
	return ouo
}

// SetNillableGoodValueUsd sets the "good_value_usd" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableGoodValueUsd(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetGoodValueUsd(*d)
	}
	return ouo
}

// ClearGoodValueUsd clears the value of the "good_value_usd" field.
func (ouo *OrderUpdateOne) ClearGoodValueUsd() *OrderUpdateOne {
	ouo.mutation.ClearGoodValueUsd()
	return ouo
}

// SetPaymentAmount sets the "payment_amount" field.
func (ouo *OrderUpdateOne) SetPaymentAmount(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetPaymentAmount(d)
	return ouo
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentAmount(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetPaymentAmount(*d)
	}
	return ouo
}

// ClearPaymentAmount clears the value of the "payment_amount" field.
func (ouo *OrderUpdateOne) ClearPaymentAmount() *OrderUpdateOne {
	ouo.mutation.ClearPaymentAmount()
	return ouo
}

// SetDiscountAmount sets the "discount_amount" field.
func (ouo *OrderUpdateOne) SetDiscountAmount(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetDiscountAmount(d)
	return ouo
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDiscountAmount(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetDiscountAmount(*d)
	}
	return ouo
}

// ClearDiscountAmount clears the value of the "discount_amount" field.
func (ouo *OrderUpdateOne) ClearDiscountAmount() *OrderUpdateOne {
	ouo.mutation.ClearDiscountAmount()
	return ouo
}

// SetPromotionID sets the "promotion_id" field.
func (ouo *OrderUpdateOne) SetPromotionID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetPromotionID(u)
	return ouo
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePromotionID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetPromotionID(*u)
	}
	return ouo
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (ouo *OrderUpdateOne) ClearPromotionID() *OrderUpdateOne {
	ouo.mutation.ClearPromotionID()
	return ouo
}

// SetDuration sets the "duration" field.
func (ouo *OrderUpdateOne) SetDuration(u uint32) *OrderUpdateOne {
	ouo.mutation.ResetDuration()
	ouo.mutation.SetDuration(u)
	return ouo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDuration(u *uint32) *OrderUpdateOne {
	if u != nil {
		ouo.SetDuration(*u)
	}
	return ouo
}

// AddDuration adds u to the "duration" field.
func (ouo *OrderUpdateOne) AddDuration(u int32) *OrderUpdateOne {
	ouo.mutation.AddDuration(u)
	return ouo
}

// ClearDuration clears the value of the "duration" field.
func (ouo *OrderUpdateOne) ClearDuration() *OrderUpdateOne {
	ouo.mutation.ClearDuration()
	return ouo
}

// SetOrderType sets the "order_type" field.
func (ouo *OrderUpdateOne) SetOrderType(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderType(s)
	return ouo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderType(*s)
	}
	return ouo
}

// ClearOrderType clears the value of the "order_type" field.
func (ouo *OrderUpdateOne) ClearOrderType() *OrderUpdateOne {
	ouo.mutation.ClearOrderType()
	return ouo
}

// SetInvestmentType sets the "investment_type" field.
func (ouo *OrderUpdateOne) SetInvestmentType(s string) *OrderUpdateOne {
	ouo.mutation.SetInvestmentType(s)
	return ouo
}

// SetNillableInvestmentType sets the "investment_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableInvestmentType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetInvestmentType(*s)
	}
	return ouo
}

// ClearInvestmentType clears the value of the "investment_type" field.
func (ouo *OrderUpdateOne) ClearInvestmentType() *OrderUpdateOne {
	ouo.mutation.ClearInvestmentType()
	return ouo
}

// SetCouponIds sets the "coupon_ids" field.
func (ouo *OrderUpdateOne) SetCouponIds(u []uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCouponIds(u)
	return ouo
}

// ClearCouponIds clears the value of the "coupon_ids" field.
func (ouo *OrderUpdateOne) ClearCouponIds() *OrderUpdateOne {
	ouo.mutation.ClearCouponIds()
	return ouo
}

// SetPaymentType sets the "payment_type" field.
func (ouo *OrderUpdateOne) SetPaymentType(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentType(s)
	return ouo
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentType(*s)
	}
	return ouo
}

// ClearPaymentType clears the value of the "payment_type" field.
func (ouo *OrderUpdateOne) ClearPaymentType() *OrderUpdateOne {
	ouo.mutation.ClearPaymentType()
	return ouo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (ouo *OrderUpdateOne) SetCoinTypeID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCoinTypeID(u)
	return ouo
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (ouo *OrderUpdateOne) SetPaymentCoinTypeID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetPaymentCoinTypeID(u)
	return ouo
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentCoinTypeID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetPaymentCoinTypeID(*u)
	}
	return ouo
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (ouo *OrderUpdateOne) ClearPaymentCoinTypeID() *OrderUpdateOne {
	ouo.mutation.ClearPaymentCoinTypeID()
	return ouo
}

// SetTransferAmount sets the "transfer_amount" field.
func (ouo *OrderUpdateOne) SetTransferAmount(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetTransferAmount(d)
	return ouo
}

// SetNillableTransferAmount sets the "transfer_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTransferAmount(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetTransferAmount(*d)
	}
	return ouo
}

// ClearTransferAmount clears the value of the "transfer_amount" field.
func (ouo *OrderUpdateOne) ClearTransferAmount() *OrderUpdateOne {
	ouo.mutation.ClearTransferAmount()
	return ouo
}

// SetBalanceAmount sets the "balance_amount" field.
func (ouo *OrderUpdateOne) SetBalanceAmount(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetBalanceAmount(d)
	return ouo
}

// SetNillableBalanceAmount sets the "balance_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBalanceAmount(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetBalanceAmount(*d)
	}
	return ouo
}

// ClearBalanceAmount clears the value of the "balance_amount" field.
func (ouo *OrderUpdateOne) ClearBalanceAmount() *OrderUpdateOne {
	ouo.mutation.ClearBalanceAmount()
	return ouo
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (ouo *OrderUpdateOne) SetCoinUsdCurrency(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetCoinUsdCurrency(d)
	return ouo
}

// SetNillableCoinUsdCurrency sets the "coin_usd_currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCoinUsdCurrency(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetCoinUsdCurrency(*d)
	}
	return ouo
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (ouo *OrderUpdateOne) ClearCoinUsdCurrency() *OrderUpdateOne {
	ouo.mutation.ClearCoinUsdCurrency()
	return ouo
}

// SetLocalCoinUsdCurrency sets the "local_coin_usd_currency" field.
func (ouo *OrderUpdateOne) SetLocalCoinUsdCurrency(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetLocalCoinUsdCurrency(d)
	return ouo
}

// SetNillableLocalCoinUsdCurrency sets the "local_coin_usd_currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLocalCoinUsdCurrency(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetLocalCoinUsdCurrency(*d)
	}
	return ouo
}

// ClearLocalCoinUsdCurrency clears the value of the "local_coin_usd_currency" field.
func (ouo *OrderUpdateOne) ClearLocalCoinUsdCurrency() *OrderUpdateOne {
	ouo.mutation.ClearLocalCoinUsdCurrency()
	return ouo
}

// SetLiveCoinUsdCurrency sets the "live_coin_usd_currency" field.
func (ouo *OrderUpdateOne) SetLiveCoinUsdCurrency(d decimal.Decimal) *OrderUpdateOne {
	ouo.mutation.SetLiveCoinUsdCurrency(d)
	return ouo
}

// SetNillableLiveCoinUsdCurrency sets the "live_coin_usd_currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLiveCoinUsdCurrency(d *decimal.Decimal) *OrderUpdateOne {
	if d != nil {
		ouo.SetLiveCoinUsdCurrency(*d)
	}
	return ouo
}

// ClearLiveCoinUsdCurrency clears the value of the "live_coin_usd_currency" field.
func (ouo *OrderUpdateOne) ClearLiveCoinUsdCurrency() *OrderUpdateOne {
	ouo.mutation.ClearLiveCoinUsdCurrency()
	return ouo
}

<<<<<<< HEAD
// SetSimulate sets the "simulate" field.
func (ouo *OrderUpdateOne) SetSimulate(b bool) *OrderUpdateOne {
	ouo.mutation.SetSimulate(b)
	return ouo
}

// SetNillableSimulate sets the "simulate" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSimulate(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetSimulate(*b)
=======
// SetCreateMethod sets the "create_method" field.
func (ouo *OrderUpdateOne) SetCreateMethod(s string) *OrderUpdateOne {
	ouo.mutation.SetCreateMethod(s)
	return ouo
}

// SetNillableCreateMethod sets the "create_method" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreateMethod(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCreateMethod(*s)
>>>>>>> d5fa78b087f47958b427ed03d6d0576f484281c6
	}
	return ouo
}

<<<<<<< HEAD
// ClearSimulate clears the value of the "simulate" field.
func (ouo *OrderUpdateOne) ClearSimulate() *OrderUpdateOne {
	ouo.mutation.ClearSimulate()
=======
// ClearCreateMethod clears the value of the "create_method" field.
func (ouo *OrderUpdateOne) ClearCreateMethod() *OrderUpdateOne {
	ouo.mutation.ClearCreateMethod()
	return ouo
}

// SetMultiPaymentCoins sets the "multi_payment_coins" field.
func (ouo *OrderUpdateOne) SetMultiPaymentCoins(b bool) *OrderUpdateOne {
	ouo.mutation.SetMultiPaymentCoins(b)
	return ouo
}

// SetNillableMultiPaymentCoins sets the "multi_payment_coins" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMultiPaymentCoins(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetMultiPaymentCoins(*b)
	}
	return ouo
}

// ClearMultiPaymentCoins clears the value of the "multi_payment_coins" field.
func (ouo *OrderUpdateOne) ClearMultiPaymentCoins() *OrderUpdateOne {
	ouo.mutation.ClearMultiPaymentCoins()
	return ouo
}

// SetPaymentAmounts sets the "payment_amounts" field.
func (ouo *OrderUpdateOne) SetPaymentAmounts(oa []order.PaymentAmount) *OrderUpdateOne {
	ouo.mutation.SetPaymentAmounts(oa)
	return ouo
}

// ClearPaymentAmounts clears the value of the "payment_amounts" field.
func (ouo *OrderUpdateOne) ClearPaymentAmounts() *OrderUpdateOne {
	ouo.mutation.ClearPaymentAmounts()
>>>>>>> d5fa78b087f47958b427ed03d6d0576f484281c6
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if entorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized entorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := entorder.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entorder.Table,
			Columns: entorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: entorder.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entorder.FieldID)
		for _, f := range fields {
			if !entorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDeletedAt,
		})
	}
	if value, ok := ouo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDeletedAt,
		})
	}
	if value, ok := ouo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldEntID,
		})
	}
	if value, ok := ouo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldAppID,
		})
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldUserID,
		})
	}
	if value, ok := ouo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldGoodID,
		})
	}
	if value, ok := ouo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldAppGoodID,
		})
	}
	if value, ok := ouo.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPaymentID,
		})
	}
	if ouo.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPaymentID,
		})
	}
	if value, ok := ouo.mutation.ParentOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldParentOrderID,
		})
	}
	if ouo.mutation.ParentOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldParentOrderID,
		})
	}
	if value, ok := ouo.mutation.UnitsV1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldUnitsV1,
		})
	}
	if ouo.mutation.UnitsV1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldUnitsV1,
		})
	}
	if value, ok := ouo.mutation.GoodValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldGoodValue,
		})
	}
	if ouo.mutation.GoodValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldGoodValue,
		})
	}
	if value, ok := ouo.mutation.GoodValueUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldGoodValueUsd,
		})
	}
	if ouo.mutation.GoodValueUsdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldGoodValueUsd,
		})
	}
	if value, ok := ouo.mutation.PaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldPaymentAmount,
		})
	}
	if ouo.mutation.PaymentAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldPaymentAmount,
		})
	}
	if value, ok := ouo.mutation.DiscountAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldDiscountAmount,
		})
	}
	if ouo.mutation.DiscountAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldDiscountAmount,
		})
	}
	if value, ok := ouo.mutation.PromotionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPromotionID,
		})
	}
	if ouo.mutation.PromotionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPromotionID,
		})
	}
	if value, ok := ouo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDuration,
		})
	}
	if value, ok := ouo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: entorder.FieldDuration,
		})
	}
	if ouo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: entorder.FieldDuration,
		})
	}
	if value, ok := ouo.mutation.OrderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldOrderType,
		})
	}
	if ouo.mutation.OrderTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldOrderType,
		})
	}
	if value, ok := ouo.mutation.InvestmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldInvestmentType,
		})
	}
	if ouo.mutation.InvestmentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldInvestmentType,
		})
	}
	if value, ok := ouo.mutation.CouponIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entorder.FieldCouponIds,
		})
	}
	if ouo.mutation.CouponIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: entorder.FieldCouponIds,
		})
	}
	if value, ok := ouo.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldPaymentType,
		})
	}
	if ouo.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldPaymentType,
		})
	}
	if value, ok := ouo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldCoinTypeID,
		})
	}
	if value, ok := ouo.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: entorder.FieldPaymentCoinTypeID,
		})
	}
	if ouo.mutation.PaymentCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: entorder.FieldPaymentCoinTypeID,
		})
	}
	if value, ok := ouo.mutation.TransferAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldTransferAmount,
		})
	}
	if ouo.mutation.TransferAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldTransferAmount,
		})
	}
	if value, ok := ouo.mutation.BalanceAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldBalanceAmount,
		})
	}
	if ouo.mutation.BalanceAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldBalanceAmount,
		})
	}
	if value, ok := ouo.mutation.CoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldCoinUsdCurrency,
		})
	}
	if ouo.mutation.CoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldCoinUsdCurrency,
		})
	}
	if value, ok := ouo.mutation.LocalCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldLocalCoinUsdCurrency,
		})
	}
	if ouo.mutation.LocalCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldLocalCoinUsdCurrency,
		})
	}
	if value, ok := ouo.mutation.LiveCoinUsdCurrency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: entorder.FieldLiveCoinUsdCurrency,
		})
	}
	if ouo.mutation.LiveCoinUsdCurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: entorder.FieldLiveCoinUsdCurrency,
		})
	}
	if value, ok := ouo.mutation.CreateMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entorder.FieldCreateMethod,
		})
	}
	if ouo.mutation.CreateMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entorder.FieldCreateMethod,
		})
	}
	if value, ok := ouo.mutation.MultiPaymentCoins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entorder.FieldMultiPaymentCoins,
		})
	}
	if ouo.mutation.MultiPaymentCoinsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: entorder.FieldMultiPaymentCoins,
		})
	}
	if value, ok := ouo.mutation.PaymentAmounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entorder.FieldPaymentAmounts,
		})
	}
	if ouo.mutation.PaymentAmountsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: entorder.FieldPaymentAmounts,
		})
	}
	if value, ok := ouo.mutation.Simulate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: order.FieldSimulate,
		})
	}
	if ouo.mutation.SimulateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: order.FieldSimulate,
		})
	}
	_spec.Modifiers = ouo.modifiers
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
