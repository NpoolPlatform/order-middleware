// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/order-middleware/pkg/db/ent/simulateconfig"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SimulateConfigUpdate is the builder for updating SimulateConfig entities.
type SimulateConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *SimulateConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SimulateConfigUpdate builder.
func (scu *SimulateConfigUpdate) Where(ps ...predicate.SimulateConfig) *SimulateConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *SimulateConfigUpdate) SetCreatedAt(u uint32) *SimulateConfigUpdate {
	scu.mutation.ResetCreatedAt()
	scu.mutation.SetCreatedAt(u)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableCreatedAt(u *uint32) *SimulateConfigUpdate {
	if u != nil {
		scu.SetCreatedAt(*u)
	}
	return scu
}

// AddCreatedAt adds u to the "created_at" field.
func (scu *SimulateConfigUpdate) AddCreatedAt(u int32) *SimulateConfigUpdate {
	scu.mutation.AddCreatedAt(u)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SimulateConfigUpdate) SetUpdatedAt(u uint32) *SimulateConfigUpdate {
	scu.mutation.ResetUpdatedAt()
	scu.mutation.SetUpdatedAt(u)
	return scu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (scu *SimulateConfigUpdate) AddUpdatedAt(u int32) *SimulateConfigUpdate {
	scu.mutation.AddUpdatedAt(u)
	return scu
}

// SetDeletedAt sets the "deleted_at" field.
func (scu *SimulateConfigUpdate) SetDeletedAt(u uint32) *SimulateConfigUpdate {
	scu.mutation.ResetDeletedAt()
	scu.mutation.SetDeletedAt(u)
	return scu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableDeletedAt(u *uint32) *SimulateConfigUpdate {
	if u != nil {
		scu.SetDeletedAt(*u)
	}
	return scu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (scu *SimulateConfigUpdate) AddDeletedAt(u int32) *SimulateConfigUpdate {
	scu.mutation.AddDeletedAt(u)
	return scu
}

// SetEntID sets the "ent_id" field.
func (scu *SimulateConfigUpdate) SetEntID(u uuid.UUID) *SimulateConfigUpdate {
	scu.mutation.SetEntID(u)
	return scu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableEntID(u *uuid.UUID) *SimulateConfigUpdate {
	if u != nil {
		scu.SetEntID(*u)
	}
	return scu
}

// SetAppID sets the "app_id" field.
func (scu *SimulateConfigUpdate) SetAppID(u uuid.UUID) *SimulateConfigUpdate {
	scu.mutation.SetAppID(u)
	return scu
}

// SetUnits sets the "units" field.
func (scu *SimulateConfigUpdate) SetUnits(d decimal.Decimal) *SimulateConfigUpdate {
	scu.mutation.SetUnits(d)
	return scu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableUnits(d *decimal.Decimal) *SimulateConfigUpdate {
	if d != nil {
		scu.SetUnits(*d)
	}
	return scu
}

// ClearUnits clears the value of the "units" field.
func (scu *SimulateConfigUpdate) ClearUnits() *SimulateConfigUpdate {
	scu.mutation.ClearUnits()
	return scu
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (scu *SimulateConfigUpdate) SetSendCouponMode(s string) *SimulateConfigUpdate {
	scu.mutation.SetSendCouponMode(s)
	return scu
}

// SetNillableSendCouponMode sets the "send_coupon_mode" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableSendCouponMode(s *string) *SimulateConfigUpdate {
	if s != nil {
		scu.SetSendCouponMode(*s)
	}
	return scu
}

// ClearSendCouponMode clears the value of the "send_coupon_mode" field.
func (scu *SimulateConfigUpdate) ClearSendCouponMode() *SimulateConfigUpdate {
	scu.mutation.ClearSendCouponMode()
	return scu
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (scu *SimulateConfigUpdate) SetSendCouponProbability(d decimal.Decimal) *SimulateConfigUpdate {
	scu.mutation.SetSendCouponProbability(d)
	return scu
}

// SetNillableSendCouponProbability sets the "send_coupon_probability" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableSendCouponProbability(d *decimal.Decimal) *SimulateConfigUpdate {
	if d != nil {
		scu.SetSendCouponProbability(*d)
	}
	return scu
}

// ClearSendCouponProbability clears the value of the "send_coupon_probability" field.
func (scu *SimulateConfigUpdate) ClearSendCouponProbability() *SimulateConfigUpdate {
	scu.mutation.ClearSendCouponProbability()
	return scu
}

// SetEnabled sets the "enabled" field.
func (scu *SimulateConfigUpdate) SetEnabled(b bool) *SimulateConfigUpdate {
	scu.mutation.SetEnabled(b)
	return scu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (scu *SimulateConfigUpdate) SetNillableEnabled(b *bool) *SimulateConfigUpdate {
	if b != nil {
		scu.SetEnabled(*b)
	}
	return scu
}

// ClearEnabled clears the value of the "enabled" field.
func (scu *SimulateConfigUpdate) ClearEnabled() *SimulateConfigUpdate {
	scu.mutation.ClearEnabled()
	return scu
}

// Mutation returns the SimulateConfigMutation object of the builder.
func (scu *SimulateConfigUpdate) Mutation() *SimulateConfigMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SimulateConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := scu.defaults(); err != nil {
		return 0, err
	}
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SimulateConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SimulateConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SimulateConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SimulateConfigUpdate) defaults() error {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		if simulateconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateconfig.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *SimulateConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SimulateConfigUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *SimulateConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   simulateconfig.Table,
			Columns: simulateconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateconfig.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldCreatedAt,
		})
	}
	if value, ok := scu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldCreatedAt,
		})
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDeletedAt,
		})
	}
	if value, ok := scu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDeletedAt,
		})
	}
	if value, ok := scu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldEntID,
		})
	}
	if value, ok := scu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldAppID,
		})
	}
	if value, ok := scu.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldUnits,
		})
	}
	if scu.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: simulateconfig.FieldUnits,
		})
	}
	if value, ok := scu.mutation.SendCouponMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulateconfig.FieldSendCouponMode,
		})
	}
	if scu.mutation.SendCouponModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: simulateconfig.FieldSendCouponMode,
		})
	}
	if value, ok := scu.mutation.SendCouponProbability(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldSendCouponProbability,
		})
	}
	if scu.mutation.SendCouponProbabilityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: simulateconfig.FieldSendCouponProbability,
		})
	}
	if value, ok := scu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: simulateconfig.FieldEnabled,
		})
	}
	if scu.mutation.EnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: simulateconfig.FieldEnabled,
		})
	}
	_spec.Modifiers = scu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulateconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SimulateConfigUpdateOne is the builder for updating a single SimulateConfig entity.
type SimulateConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SimulateConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (scuo *SimulateConfigUpdateOne) SetCreatedAt(u uint32) *SimulateConfigUpdateOne {
	scuo.mutation.ResetCreatedAt()
	scuo.mutation.SetCreatedAt(u)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableCreatedAt(u *uint32) *SimulateConfigUpdateOne {
	if u != nil {
		scuo.SetCreatedAt(*u)
	}
	return scuo
}

// AddCreatedAt adds u to the "created_at" field.
func (scuo *SimulateConfigUpdateOne) AddCreatedAt(u int32) *SimulateConfigUpdateOne {
	scuo.mutation.AddCreatedAt(u)
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SimulateConfigUpdateOne) SetUpdatedAt(u uint32) *SimulateConfigUpdateOne {
	scuo.mutation.ResetUpdatedAt()
	scuo.mutation.SetUpdatedAt(u)
	return scuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (scuo *SimulateConfigUpdateOne) AddUpdatedAt(u int32) *SimulateConfigUpdateOne {
	scuo.mutation.AddUpdatedAt(u)
	return scuo
}

// SetDeletedAt sets the "deleted_at" field.
func (scuo *SimulateConfigUpdateOne) SetDeletedAt(u uint32) *SimulateConfigUpdateOne {
	scuo.mutation.ResetDeletedAt()
	scuo.mutation.SetDeletedAt(u)
	return scuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableDeletedAt(u *uint32) *SimulateConfigUpdateOne {
	if u != nil {
		scuo.SetDeletedAt(*u)
	}
	return scuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (scuo *SimulateConfigUpdateOne) AddDeletedAt(u int32) *SimulateConfigUpdateOne {
	scuo.mutation.AddDeletedAt(u)
	return scuo
}

// SetEntID sets the "ent_id" field.
func (scuo *SimulateConfigUpdateOne) SetEntID(u uuid.UUID) *SimulateConfigUpdateOne {
	scuo.mutation.SetEntID(u)
	return scuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableEntID(u *uuid.UUID) *SimulateConfigUpdateOne {
	if u != nil {
		scuo.SetEntID(*u)
	}
	return scuo
}

// SetAppID sets the "app_id" field.
func (scuo *SimulateConfigUpdateOne) SetAppID(u uuid.UUID) *SimulateConfigUpdateOne {
	scuo.mutation.SetAppID(u)
	return scuo
}

// SetUnits sets the "units" field.
func (scuo *SimulateConfigUpdateOne) SetUnits(d decimal.Decimal) *SimulateConfigUpdateOne {
	scuo.mutation.SetUnits(d)
	return scuo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableUnits(d *decimal.Decimal) *SimulateConfigUpdateOne {
	if d != nil {
		scuo.SetUnits(*d)
	}
	return scuo
}

// ClearUnits clears the value of the "units" field.
func (scuo *SimulateConfigUpdateOne) ClearUnits() *SimulateConfigUpdateOne {
	scuo.mutation.ClearUnits()
	return scuo
}

// SetSendCouponMode sets the "send_coupon_mode" field.
func (scuo *SimulateConfigUpdateOne) SetSendCouponMode(s string) *SimulateConfigUpdateOne {
	scuo.mutation.SetSendCouponMode(s)
	return scuo
}

// SetNillableSendCouponMode sets the "send_coupon_mode" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableSendCouponMode(s *string) *SimulateConfigUpdateOne {
	if s != nil {
		scuo.SetSendCouponMode(*s)
	}
	return scuo
}

// ClearSendCouponMode clears the value of the "send_coupon_mode" field.
func (scuo *SimulateConfigUpdateOne) ClearSendCouponMode() *SimulateConfigUpdateOne {
	scuo.mutation.ClearSendCouponMode()
	return scuo
}

// SetSendCouponProbability sets the "send_coupon_probability" field.
func (scuo *SimulateConfigUpdateOne) SetSendCouponProbability(d decimal.Decimal) *SimulateConfigUpdateOne {
	scuo.mutation.SetSendCouponProbability(d)
	return scuo
}

// SetNillableSendCouponProbability sets the "send_coupon_probability" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableSendCouponProbability(d *decimal.Decimal) *SimulateConfigUpdateOne {
	if d != nil {
		scuo.SetSendCouponProbability(*d)
	}
	return scuo
}

// ClearSendCouponProbability clears the value of the "send_coupon_probability" field.
func (scuo *SimulateConfigUpdateOne) ClearSendCouponProbability() *SimulateConfigUpdateOne {
	scuo.mutation.ClearSendCouponProbability()
	return scuo
}

// SetEnabled sets the "enabled" field.
func (scuo *SimulateConfigUpdateOne) SetEnabled(b bool) *SimulateConfigUpdateOne {
	scuo.mutation.SetEnabled(b)
	return scuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (scuo *SimulateConfigUpdateOne) SetNillableEnabled(b *bool) *SimulateConfigUpdateOne {
	if b != nil {
		scuo.SetEnabled(*b)
	}
	return scuo
}

// ClearEnabled clears the value of the "enabled" field.
func (scuo *SimulateConfigUpdateOne) ClearEnabled() *SimulateConfigUpdateOne {
	scuo.mutation.ClearEnabled()
	return scuo
}

// Mutation returns the SimulateConfigMutation object of the builder.
func (scuo *SimulateConfigUpdateOne) Mutation() *SimulateConfigMutation {
	return scuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SimulateConfigUpdateOne) Select(field string, fields ...string) *SimulateConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SimulateConfig entity.
func (scuo *SimulateConfigUpdateOne) Save(ctx context.Context) (*SimulateConfig, error) {
	var (
		err  error
		node *SimulateConfig
	)
	if err := scuo.defaults(); err != nil {
		return nil, err
	}
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SimulateConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, scuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SimulateConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SimulateConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SimulateConfigUpdateOne) SaveX(ctx context.Context) *SimulateConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SimulateConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SimulateConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SimulateConfigUpdateOne) defaults() error {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		if simulateconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized simulateconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := simulateconfig.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *SimulateConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SimulateConfigUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *SimulateConfigUpdateOne) sqlSave(ctx context.Context) (_node *SimulateConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   simulateconfig.Table,
			Columns: simulateconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: simulateconfig.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SimulateConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, simulateconfig.FieldID)
		for _, f := range fields {
			if !simulateconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != simulateconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldCreatedAt,
		})
	}
	if value, ok := scuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldCreatedAt,
		})
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDeletedAt,
		})
	}
	if value, ok := scuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: simulateconfig.FieldDeletedAt,
		})
	}
	if value, ok := scuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldEntID,
		})
	}
	if value, ok := scuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: simulateconfig.FieldAppID,
		})
	}
	if value, ok := scuo.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldUnits,
		})
	}
	if scuo.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: simulateconfig.FieldUnits,
		})
	}
	if value, ok := scuo.mutation.SendCouponMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: simulateconfig.FieldSendCouponMode,
		})
	}
	if scuo.mutation.SendCouponModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: simulateconfig.FieldSendCouponMode,
		})
	}
	if value, ok := scuo.mutation.SendCouponProbability(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: simulateconfig.FieldSendCouponProbability,
		})
	}
	if scuo.mutation.SendCouponProbabilityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: simulateconfig.FieldSendCouponProbability,
		})
	}
	if value, ok := scuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: simulateconfig.FieldEnabled,
		})
	}
	if scuo.mutation.EnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: simulateconfig.FieldEnabled,
		})
	}
	_spec.Modifiers = scuo.modifiers
	_node = &SimulateConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulateconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
